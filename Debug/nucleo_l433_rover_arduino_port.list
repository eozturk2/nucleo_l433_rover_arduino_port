
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000794  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800679c  0800679c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800679c  0800679c  0001679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a4  080067a4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a8  080067a8  000167a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  0800681c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  0800681c  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013da8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d7  00000000  00000000  00033e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  00036720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  000378c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bac  00000000  00000000  00038948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001527d  00000000  00000000  0005f4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db6ad  00000000  00000000  00074771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fe1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  0014fe70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ff0 	.word	0x08005ff0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005ff0 	.word	0x08005ff0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x130>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80005fa:	2200      	movs	r2, #0
 80005fc:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 f87e 	bl	8001704 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <MX_GPIO_Init+0x134>)
 800060e:	f001 f879 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2160      	movs	r1, #96	; 0x60
 8000616:	4829      	ldr	r0, [pc, #164]	; (80006bc <MX_GPIO_Init+0x138>)
 8000618:	f001 f874 	bl	8001704 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <MX_GPIO_Init+0x134>)
 8000634:	f000 feec 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000638:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800063c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 fedc 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fecf 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0x134>)
 800068a:	f000 fec1 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0x138>)
 80006a6:	f000 feb3 	bl	8001410 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800
 80006bc:	48000400 	.word	0x48000400

080006c0 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <_Z5printPKc+0x2c>)
 80006da:	f003 fd31 	bl	8004140 <HAL_UART_Transmit>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000254 	.word	0x20000254

080006f0 <printf>:
int printf(const char* s, ...){
 80006f0:	b40f      	push	{r0, r1, r2, r3}
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b0c2      	sub	sp, #264	; 0x108
 80006f6:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80006f8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000704:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 8000706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800070a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800070e:	f107 0008 	add.w	r0, r7, #8
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000718:	f004 fe82 	bl	8005420 <vsiprintf>
	perror(buffer);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f004 fc67 	bl	8004ff4 <perror>
	print(buffer);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffc8 	bl	80006c0 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd4b 	bl	80001d0 <strlen>
 800073a:	4603      	mov	r3, r0
}
 800073c:	4618      	mov	r0, r3
 800073e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fcd7 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f83d 	bl	80007d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f7ff ff13 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075e:	f000 fc1d 	bl	8000f9c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000762:	f000 f89d 	bl	80008a0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000766:	f000 f8d9 	bl	800091c <MX_SPI2_Init>
  MX_SPI3_Init();
 800076a:	f000 f915 	bl	8000998 <MX_SPI3_Init>
  MX_TIM1_Init();
 800076e:	f000 fae3 	bl	8000d38 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000772:	f000 fb35 	bl	8000de0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 8000776:	2363      	movs	r3, #99	; 0x63
 8000778:	81fb      	strh	r3, [r7, #14]
  uint16_t encoderData_2 = 99;
 800077a:	2363      	movs	r3, #99	; 0x63
 800077c:	81bb      	strh	r3, [r7, #12]
  uint16_t encoderData_3 = 99;
 800077e:	2363      	movs	r3, #99	; 0x63
 8000780:	817b      	strh	r3, [r7, #10]
  uint16_t encoder_max = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	813b      	strh	r3, [r7, #8]
  uint16_t encoder_min = 4100;
 8000786:	f241 0304 	movw	r3, #4100	; 0x1004
 800078a:	80fb      	strh	r3, [r7, #6]
  HAL_TIM_Base_Start(&htim1);
 800078c:	480d      	ldr	r0, [pc, #52]	; (80007c4 <main+0x78>)
 800078e:	f002 fe1b 	bl	80033c8 <HAL_TIM_Base_Start>
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
//  HAL_Delay(10);
//  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
//  RoverArmMotor Wrist_Roll(&hspi1, CYTRON_PWM_1, CYTRON_DIR_1, AMT22_1, CYTRON, 0, 359.0f);
  
  resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x78>)
 8000794:	2280      	movs	r2, #128	; 0x80
 8000796:	490c      	ldr	r1, [pc, #48]	; (80007c8 <main+0x7c>)
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <main+0x80>)
 800079a:	f004 fa3c 	bl	8004c16 <resetAMT22>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //AMT22 test
	  encoderData_1 = getPositionSPI(&hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <main+0x78>)
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	230c      	movs	r3, #12
 80007a4:	2280      	movs	r2, #128	; 0x80
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <main+0x7c>)
 80007a8:	4808      	ldr	r0, [pc, #32]	; (80007cc <main+0x80>)
 80007aa:	f004 f9a4 	bl	8004af6 <getPositionSPI>
 80007ae:	4603      	mov	r3, r0
 80007b0:	81fb      	strh	r3, [r7, #14]
	  // encoderData_2 = getPositionSPI(&hspi2, GPIOB, GPIO_PIN_6, 12, &htim1);
	  // encoderData_3 = getPositionSPI(&hspi3, GPIOA, GPIO_PIN_8, 12, &htim1);
	  printf("encoder 1 gives %d\r\n", encoderData_1);
 80007b2:	89fb      	ldrh	r3, [r7, #14]
 80007b4:	4619      	mov	r1, r3
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <main+0x84>)
 80007b8:	f7ff ff9a 	bl	80006f0 <printf>





	  HAL_Delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 fd1d 	bl	80011fc <HAL_Delay>
	  encoderData_1 = getPositionSPI(&hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 80007c2:	e7ec      	b.n	800079e <main+0x52>
 80007c4:	200001bc 	.word	0x200001bc
 80007c8:	48000800 	.word	0x48000800
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	08006008 	.word	0x08006008

080007d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fa84 	bl	8004cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f000 ffa9 	bl	8001750 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	bf14      	ite	ne
 8000804:	2301      	movne	r3, #1
 8000806:	2300      	moveq	r3, #0
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800080e:	f000 f841 	bl	8000894 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000816:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000820:	2302      	movs	r3, #2
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000828:	2301      	movs	r3, #1
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800082c:	230a      	movs	r3, #10
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000830:	2307      	movs	r3, #7
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f000 ffdb 	bl	80017fc <HAL_RCC_OscConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	bf14      	ite	ne
 800084c:	2301      	movne	r3, #1
 800084e:	2300      	moveq	r3, #0
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000856:	f000 f81d 	bl	8000894 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	230f      	movs	r3, #15
 800085c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085e:	2303      	movs	r3, #3
 8000860:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2104      	movs	r1, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fbd6 	bl	8002024 <HAL_RCC_ClockConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000888:	f000 f804 	bl	8000894 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3758      	adds	r7, #88	; 0x58
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000898:	b672      	cpsid	i
}
 800089a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800089c:	e7fe      	b.n	800089c <Error_Handler+0x8>
	...

080008a0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_SPI1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_SPI1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_SPI1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_SPI1_Init+0x74>)
 80008d6:	2220      	movs	r2, #32
 80008d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_SPI1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_SPI1_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_SPI1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_SPI1_Init+0x74>)
 80008fa:	2208      	movs	r2, #8
 80008fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_SPI1_Init+0x74>)
 8000900:	f002 f8f0 	bl	8002ae4 <HAL_SPI_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f7ff ffc3 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	2000008c 	.word	0x2000008c
 8000918:	40013000 	.word	0x40013000

0800091c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_SPI2_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_SPI2_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI2_Init+0x74>)
 8000928:	f44f 7282 	mov.w	r2, #260	; 0x104
 800092c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI2_Init+0x74>)
 8000936:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800093a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI2_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI2_Init+0x74>)
 800094a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800094e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI2_Init+0x74>)
 8000952:	2220      	movs	r2, #32
 8000954:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI2_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI2_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI2_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI2_Init+0x74>)
 800096a:	2207      	movs	r2, #7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI2_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI2_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_SPI2_Init+0x74>)
 800097c:	f002 f8b2 	bl	8002ae4 <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000986:	f7ff ff85 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200000f0 	.word	0x200000f0
 8000994:	40003800 	.word	0x40003800

08000998 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_SPI3_Init+0x74>)
 800099e:	4a1c      	ldr	r2, [pc, #112]	; (8000a10 <MX_SPI3_Init+0x78>)
 80009a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009ce:	2220      	movs	r2, #32
 80009d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009e6:	2207      	movs	r2, #7
 80009e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009f2:	2208      	movs	r2, #8
 80009f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_SPI3_Init+0x74>)
 80009f8:	f002 f874 	bl	8002ae4 <HAL_SPI_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a02:	f7ff ff47 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000154 	.word	0x20000154
 8000a10:	40003c00 	.word	0x40003c00

08000a14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a47      	ldr	r2, [pc, #284]	; (8000b50 <HAL_SPI_MspInit+0x13c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12a      	bne.n	8000a8c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a36:	4b47      	ldr	r3, [pc, #284]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a3a:	4a46      	ldr	r2, [pc, #280]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a40:	6613      	str	r3, [r2, #96]	; 0x60
 8000a42:	4b44      	ldr	r3, [pc, #272]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a4a:	623b      	str	r3, [r7, #32]
 8000a4c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b41      	ldr	r3, [pc, #260]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a40      	ldr	r2, [pc, #256]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b3e      	ldr	r3, [pc, #248]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
 8000a64:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000a66:	f641 0302 	movw	r3, #6146	; 0x1802
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a78:	2305      	movs	r3, #5
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 fcc3 	bl	8001410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a8a:	e05c      	b.n	8000b46 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a31      	ldr	r2, [pc, #196]	; (8000b58 <HAL_SPI_MspInit+0x144>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d129      	bne.n	8000aea <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9a:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa2:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab2:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000ab4:	f043 0302 	orr.w	r3, r3, #2
 8000ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	f003 0302 	and.w	r3, r3, #2
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ac6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ad8:	2305      	movs	r3, #5
 8000ada:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481e      	ldr	r0, [pc, #120]	; (8000b5c <HAL_SPI_MspInit+0x148>)
 8000ae4:	f000 fc94 	bl	8001410 <HAL_GPIO_Init>
}
 8000ae8:	e02d      	b.n	8000b46 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_SPI_MspInit+0x14c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d128      	bne.n	8000b46 <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afe:	6593      	str	r3, [r2, #88]	; 0x58
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <HAL_SPI_MspInit+0x140>)
 8000b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b24:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b36:	2306      	movs	r3, #6
 8000b38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <HAL_SPI_MspInit+0x150>)
 8000b42:	f000 fc65 	bl	8001410 <HAL_GPIO_Init>
}
 8000b46:	bf00      	nop
 8000b48:	3738      	adds	r7, #56	; 0x38
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40013000 	.word	0x40013000
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40003800 	.word	0x40003800
 8000b5c:	48000400 	.word	0x48000400
 8000b60:	40003c00 	.word	0x40003c00
 8000b64:	48000800 	.word	0x48000800

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x44>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a0e      	ldr	r2, [pc, #56]	; (8000bac <HAL_MspInit+0x44>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_MspInit+0x44>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <HAL_MspInit+0x44>)
 8000b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HAL_MspInit+0x44>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6593      	str	r3, [r2, #88]	; 0x58
 8000b92:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_MspInit+0x44>)
 8000b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <HardFault_Handler+0x4>

08000bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <MemManage_Handler+0x4>

08000bc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc6:	e7fe      	b.n	8000bc6 <BusFault_Handler+0x4>

08000bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <UsageFault_Handler+0x4>

08000bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bfc:	f000 fade 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
 8000c14:	e00a      	b.n	8000c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c16:	f3af 8000 	nop.w
 8000c1a:	4601      	mov	r1, r0
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	1c5a      	adds	r2, r3, #1
 8000c20:	60ba      	str	r2, [r7, #8]
 8000c22:	b2ca      	uxtb	r2, r1
 8000c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf0      	blt.n	8000c16 <_read+0x12>
  }

  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3718      	adds	r7, #24
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	60f8      	str	r0, [r7, #12]
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
 8000c4e:	e009      	b.n	8000c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	60ba      	str	r2, [r7, #8]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf1      	blt.n	8000c50 <_write+0x12>
  }
  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_close>:

int _close(int file)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	b085      	sub	sp, #20
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cb0:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <_sbrk+0x5c>)
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <_sbrk+0x60>)
 8000cb4:	1ad3      	subs	r3, r2, r3
 8000cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cc4:	4b11      	ldr	r3, [pc, #68]	; (8000d0c <_sbrk+0x64>)
 8000cc6:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <_sbrk+0x68>)
 8000cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <_sbrk+0x64>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d207      	bcs.n	8000ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cd8:	f003 ffe0 	bl	8004c9c <__errno>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	220c      	movs	r2, #12
 8000ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e009      	b.n	8000cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <_sbrk+0x64>)
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a05      	ldr	r2, [pc, #20]	; (8000d0c <_sbrk+0x64>)
 8000cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20010000 	.word	0x20010000
 8000d08:	00000400 	.word	0x00000400
 8000d0c:	200001b8 	.word	0x200001b8
 8000d10:	200002f0 	.word	0x200002f0

08000d14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <SystemInit+0x20>)
 8000d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d1e:	4a05      	ldr	r2, [pc, #20]	; (8000d34 <SystemInit+0x20>)
 8000d20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d56:	4b20      	ldr	r3, [pc, #128]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d58:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <MX_TIM1_Init+0xa4>)
 8000d5a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d5e:	224f      	movs	r2, #79	; 0x4f
 8000d60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b19      	ldr	r3, [pc, #100]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d82:	4815      	ldr	r0, [pc, #84]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000d84:	f002 fac8 	bl	8003318 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d8e:	f7ff fd81 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0310 	add.w	r3, r7, #16
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000da0:	f002 fcd4 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000daa:	f7ff fd73 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <MX_TIM1_Init+0xa0>)
 8000dc0:	f003 f90a 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dca:	f7ff fd63 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dce:	bf00      	nop
 8000dd0:	3720      	adds	r7, #32
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200001bc 	.word	0x200001bc
 8000ddc:	40012c00 	.word	0x40012c00

08000de0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08e      	sub	sp, #56	; 0x38
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000de6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000df4:	f107 031c 	add.w	r3, r7, #28
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	615a      	str	r2, [r3, #20]
 8000e10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e1c:	224f      	movs	r2, #79	; 0x4f
 8000e1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e20:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000e26:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e28:	2263      	movs	r2, #99	; 0x63
 8000e2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e38:	4823      	ldr	r0, [pc, #140]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e3a:	f002 fa6d 	bl	8003318 <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e44:	f7ff fd26 	bl	8000894 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e52:	4619      	mov	r1, r3
 8000e54:	481c      	ldr	r0, [pc, #112]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e56:	f002 fc79 	bl	800374c <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e60:	f7ff fd18 	bl	8000894 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e64:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e66:	f002 fafb 	bl	8003460 <HAL_TIM_PWM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e70:	f7ff fd10 	bl	8000894 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	4811      	ldr	r0, [pc, #68]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000e84:	f003 f8a8 	bl	8003fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e8e:	f7ff fd01 	bl	8000894 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e92:	2360      	movs	r3, #96	; 0x60
 8000e94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4807      	ldr	r0, [pc, #28]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000eaa:	f002 fb3b 	bl	8003524 <HAL_TIM_PWM_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000eb4:	f7ff fcee 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eb8:	4803      	ldr	r0, [pc, #12]	; (8000ec8 <MX_TIM2_Init+0xe8>)
 8000eba:	f000 f839 	bl	8000f30 <HAL_TIM_MspPostInit>

}
 8000ebe:	bf00      	nop
 8000ec0:	3738      	adds	r7, #56	; 0x38
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	20000208 	.word	0x20000208

08000ecc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_TIM_Base_MspInit+0x5c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10c      	bne.n	8000ef8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_TIM_Base_MspInit+0x60>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee2:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_TIM_Base_MspInit+0x60>)
 8000ee4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ee8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_TIM_Base_MspInit+0x60>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ef6:	e010      	b.n	8000f1a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d10b      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_Base_MspInit+0x60>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a09      	ldr	r2, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x60>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <HAL_TIM_Base_MspInit+0x60>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	40021000 	.word	0x40021000

08000f30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f50:	d11b      	bne.n	8000f8a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_TIM_MspPostInit+0x64>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a0f      	ldr	r2, [pc, #60]	; (8000f94 <HAL_TIM_MspPostInit+0x64>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_TIM_MspPostInit+0x64>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 030c 	add.w	r3, r7, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <HAL_TIM_MspPostInit+0x68>)
 8000f86:	f000 fa43 	bl	8001410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3720      	adds	r7, #32
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000400 	.word	0x48000400

08000f9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <MX_USART2_UART_Init+0x5c>)
 8000fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fba:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc0:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fc2:	220c      	movs	r2, #12
 8000fc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_USART2_UART_Init+0x58>)
 8000fe0:	f003 f860 	bl	80040a4 <HAL_UART_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fea:	f7ff fc53 	bl	8000894 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000254 	.word	0x20000254
 8000ff8:	40004400 	.word	0x40004400

08000ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0a2      	sub	sp, #136	; 0x88
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2260      	movs	r2, #96	; 0x60
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 fe67 	bl	8004cf0 <memset>
  if(uartHandle->Instance==USART2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <HAL_UART_MspInit+0xac>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d138      	bne.n	800109e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001030:	2300      	movs	r3, #0
 8001032:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4618      	mov	r0, r3
 800103a:	f001 fa17 	bl	800246c <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001044:	f7ff fc26 	bl	8000894 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_UART_MspInit+0xb0>)
 800104a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_UART_MspInit+0xb0>)
 800104e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001052:	6593      	str	r3, [r2, #88]	; 0x58
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_UART_MspInit+0xb0>)
 8001056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_UART_MspInit+0xb0>)
 8001062:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <HAL_UART_MspInit+0xb0>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_UART_MspInit+0xb0>)
 800106e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001078:	230c      	movs	r3, #12
 800107a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800108a:	2307      	movs	r3, #7
 800108c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001090:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001094:	4619      	mov	r1, r3
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f000 f9b9 	bl	8001410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800109e:	bf00      	nop
 80010a0:	3788      	adds	r7, #136	; 0x88
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40004400 	.word	0x40004400
 80010ac:	40021000 	.word	0x40021000

080010b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b4:	f7ff fe2e 	bl	8000d14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b8:	480c      	ldr	r0, [pc, #48]	; (80010ec <LoopForever+0x6>)
  ldr r1, =_edata
 80010ba:	490d      	ldr	r1, [pc, #52]	; (80010f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <LoopForever+0xe>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c0:	e002      	b.n	80010c8 <LoopCopyDataInit>

080010c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c6:	3304      	adds	r3, #4

080010c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010cc:	d3f9      	bcc.n	80010c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d0:	4c0a      	ldr	r4, [pc, #40]	; (80010fc <LoopForever+0x16>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d4:	e001      	b.n	80010da <LoopFillZerobss>

080010d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d8:	3204      	adds	r2, #4

080010da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010dc:	d3fb      	bcc.n	80010d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010de:	f003 fde3 	bl	8004ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e2:	f7ff fb33 	bl	800074c <main>

080010e6 <LoopForever>:

LoopForever:
    b LoopForever
 80010e6:	e7fe      	b.n	80010e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010f4:	080067ac 	.word	0x080067ac
  ldr r2, =_sbss
 80010f8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010fc:	200002ec 	.word	0x200002ec

08001100 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC1_IRQHandler>
	...

08001104 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_Init+0x3c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <HAL_Init+0x3c>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 f944 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f80f 	bl	8001144 <HAL_InitTick>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d002      	beq.n	8001132 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	e001      	b.n	8001136 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001132:	f7ff fd19 	bl	8000b68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001136:	79fb      	ldrb	r3, [r7, #7]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40022000 	.word	0x40022000

08001144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_InitTick+0x6c>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d023      	beq.n	80011a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_InitTick+0x70>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_InitTick+0x6c>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	4619      	mov	r1, r3
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	fbb3 f3f1 	udiv	r3, r3, r1
 800116a:	fbb2 f3f3 	udiv	r3, r2, r3
 800116e:	4618      	mov	r0, r3
 8001170:	f000 f941 	bl	80013f6 <HAL_SYSTICK_Config>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10f      	bne.n	800119a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b0f      	cmp	r3, #15
 800117e:	d809      	bhi.n	8001194 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001180:	2200      	movs	r2, #0
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	f04f 30ff 	mov.w	r0, #4294967295
 8001188:	f000 f919 	bl	80013be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_InitTick+0x74>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6013      	str	r3, [r2, #0]
 8001192:	e007      	b.n	80011a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	73fb      	strb	r3, [r7, #15]
 8001198:	e004      	b.n	80011a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	73fb      	strb	r3, [r7, #15]
 800119e:	e001      	b.n	80011a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a0:	2301      	movs	r3, #1
 80011a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	20000000 	.word	0x20000000
 80011b8:	20000004 	.word	0x20000004

080011bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <HAL_IncTick+0x20>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	461a      	mov	r2, r3
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <HAL_IncTick+0x24>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_IncTick+0x24>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000008 	.word	0x20000008
 80011e0:	200002d8 	.word	0x200002d8

080011e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return uwTick;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <HAL_GetTick+0x14>)
 80011ea:	681b      	ldr	r3, [r3, #0]
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	200002d8 	.word	0x200002d8

080011fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff ffee 	bl	80011e4 <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001214:	d005      	beq.n	8001222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_Delay+0x44>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	461a      	mov	r2, r3
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4413      	add	r3, r2
 8001220:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001222:	bf00      	nop
 8001224:	f7ff ffde 	bl	80011e4 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8f7      	bhi.n	8001224 <HAL_Delay+0x28>
  {
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3710      	adds	r7, #16
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000008 	.word	0x20000008

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	db0a      	blt.n	80012d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	490c      	ldr	r1, [pc, #48]	; (80012f4 <__NVIC_SetPriority+0x4c>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	0112      	lsls	r2, r2, #4
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d0:	e00a      	b.n	80012e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4908      	ldr	r1, [pc, #32]	; (80012f8 <__NVIC_SetPriority+0x50>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	f003 030f 	and.w	r3, r3, #15
 80012de:	3b04      	subs	r3, #4
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	440b      	add	r3, r1
 80012e6:	761a      	strb	r2, [r3, #24]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000e100 	.word	0xe000e100
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	; 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f1c3 0307 	rsb	r3, r3, #7
 8001316:	2b04      	cmp	r3, #4
 8001318:	bf28      	it	cs
 800131a:	2304      	movcs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	3304      	adds	r3, #4
 8001322:	2b06      	cmp	r3, #6
 8001324:	d902      	bls.n	800132c <NVIC_EncodePriority+0x30>
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3b03      	subs	r3, #3
 800132a:	e000      	b.n	800132e <NVIC_EncodePriority+0x32>
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43da      	mvns	r2, r3
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	401a      	ands	r2, r3
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001344:	f04f 31ff 	mov.w	r1, #4294967295
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	fa01 f303 	lsl.w	r3, r1, r3
 800134e:	43d9      	mvns	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	4313      	orrs	r3, r2
         );
}
 8001356:	4618      	mov	r0, r3
 8001358:	3724      	adds	r7, #36	; 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001374:	d301      	bcc.n	800137a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001376:	2301      	movs	r3, #1
 8001378:	e00f      	b.n	800139a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137a:	4a0a      	ldr	r2, [pc, #40]	; (80013a4 <SysTick_Config+0x40>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3b01      	subs	r3, #1
 8001380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001382:	210f      	movs	r1, #15
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f7ff ff8e 	bl	80012a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <SysTick_Config+0x40>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <SysTick_Config+0x40>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff ff47 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
 80013ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013cc:	2300      	movs	r3, #0
 80013ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013d0:	f7ff ff5c 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	6978      	ldr	r0, [r7, #20]
 80013dc:	f7ff ff8e 	bl	80012fc <NVIC_EncodePriority>
 80013e0:	4602      	mov	r2, r0
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	4611      	mov	r1, r2
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff5d 	bl	80012a8 <__NVIC_SetPriority>
}
 80013ee:	bf00      	nop
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffb0 	bl	8001364 <SysTick_Config>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b087      	sub	sp, #28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141e:	e154      	b.n	80016ca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8146 	beq.w	80016c4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d005      	beq.n	8001450 <HAL_GPIO_Init+0x40>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d130      	bne.n	80014b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001486:	2201      	movs	r2, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	f003 0201 	and.w	r2, r3, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d017      	beq.n	80014ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d123      	bne.n	8001542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43db      	mvns	r3, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f003 0203 	and.w	r2, r3, #3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800157e:	2b00      	cmp	r3, #0
 8001580:	f000 80a0 	beq.w	80016c4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <HAL_GPIO_Init+0x2d8>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001588:	4a57      	ldr	r2, [pc, #348]	; (80016e8 <HAL_GPIO_Init+0x2d8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6613      	str	r3, [r2, #96]	; 0x60
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <HAL_GPIO_Init+0x2d8>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800159c:	4a53      	ldr	r2, [pc, #332]	; (80016ec <HAL_GPIO_Init+0x2dc>)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	3302      	adds	r3, #2
 80015a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	220f      	movs	r2, #15
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015c6:	d019      	beq.n	80015fc <HAL_GPIO_Init+0x1ec>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a49      	ldr	r2, [pc, #292]	; (80016f0 <HAL_GPIO_Init+0x2e0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d013      	beq.n	80015f8 <HAL_GPIO_Init+0x1e8>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a48      	ldr	r2, [pc, #288]	; (80016f4 <HAL_GPIO_Init+0x2e4>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00d      	beq.n	80015f4 <HAL_GPIO_Init+0x1e4>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a47      	ldr	r2, [pc, #284]	; (80016f8 <HAL_GPIO_Init+0x2e8>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d007      	beq.n	80015f0 <HAL_GPIO_Init+0x1e0>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <HAL_GPIO_Init+0x2ec>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d101      	bne.n	80015ec <HAL_GPIO_Init+0x1dc>
 80015e8:	2304      	movs	r3, #4
 80015ea:	e008      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015ec:	2307      	movs	r3, #7
 80015ee:	e006      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f0:	2303      	movs	r3, #3
 80015f2:	e004      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f4:	2302      	movs	r3, #2
 80015f6:	e002      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_GPIO_Init+0x1ee>
 80015fc:	2300      	movs	r3, #0
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	f002 0203 	and.w	r2, r2, #3
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	4093      	lsls	r3, r2
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160e:	4937      	ldr	r1, [pc, #220]	; (80016ec <HAL_GPIO_Init+0x2dc>)
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	089b      	lsrs	r3, r3, #2
 8001614:	3302      	adds	r3, #2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800161c:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43db      	mvns	r3, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001640:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001646:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800166a:	4a25      	ldr	r2, [pc, #148]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001670:	4b23      	ldr	r3, [pc, #140]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001694:	4a1a      	ldr	r2, [pc, #104]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_GPIO_Init+0x2f0>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	3301      	adds	r3, #1
 80016c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f47f aea3 	bne.w	8001420 <HAL_GPIO_Init+0x10>
  }
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	371c      	adds	r7, #28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40010000 	.word	0x40010000
 80016f0:	48000400 	.word	0x48000400
 80016f4:	48000800 	.word	0x48000800
 80016f8:	48000c00 	.word	0x48000c00
 80016fc:	48001000 	.word	0x48001000
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	807b      	strh	r3, [r7, #2]
 8001710:	4613      	mov	r3, r2
 8001712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171a:	887a      	ldrh	r2, [r7, #2]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001720:	e002      	b.n	8001728 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001722:	887a      	ldrh	r2, [r7, #2]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_PWREx_GetVoltageRange+0x18>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40007000 	.word	0x40007000

08001750 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800175e:	d130      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	d038      	beq.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001778:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2232      	movs	r2, #50	; 0x32
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	4a1b      	ldr	r2, [pc, #108]	; (80017f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001794:	e002      	b.n	800179c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	3b01      	subs	r3, #1
 800179a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a8:	d102      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f2      	bne.n	8001796 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017bc:	d110      	bne.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e00f      	b.n	80017e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ce:	d007      	beq.n	80017e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40007000 	.word	0x40007000
 80017f4:	20000000 	.word	0x20000000
 80017f8:	431bde83 	.word	0x431bde83

080017fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d102      	bne.n	8001810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	f000 bc02 	b.w	8002014 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001810:	4b96      	ldr	r3, [pc, #600]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 030c 	and.w	r3, r3, #12
 8001818:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800181a:	4b94      	ldr	r3, [pc, #592]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0310 	and.w	r3, r3, #16
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80e4 	beq.w	80019fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_RCC_OscConfig+0x4c>
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	2b0c      	cmp	r3, #12
 800183c:	f040 808b 	bne.w	8001956 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b01      	cmp	r3, #1
 8001844:	f040 8087 	bne.w	8001956 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001848:	4b88      	ldr	r3, [pc, #544]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_OscConfig+0x64>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e3d9      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	4b81      	ldr	r3, [pc, #516]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_RCC_OscConfig+0x7e>
 8001870:	4b7e      	ldr	r3, [pc, #504]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001878:	e005      	b.n	8001886 <HAL_RCC_OscConfig+0x8a>
 800187a:	4b7c      	ldr	r3, [pc, #496]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	091b      	lsrs	r3, r3, #4
 8001882:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001886:	4293      	cmp	r3, r2
 8001888:	d223      	bcs.n	80018d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	4618      	mov	r0, r3
 8001890:	f000 fd8c 	bl	80023ac <RCC_SetFlashLatencyFromMSIRange>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e3ba      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800189e:	4b73      	ldr	r3, [pc, #460]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a72      	ldr	r2, [pc, #456]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b70      	ldr	r3, [pc, #448]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	496d      	ldr	r1, [pc, #436]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018bc:	4b6b      	ldr	r3, [pc, #428]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	4968      	ldr	r1, [pc, #416]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
 80018d0:	e025      	b.n	800191e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018d2:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018d8:	f043 0308 	orr.w	r3, r3, #8
 80018dc:	6013      	str	r3, [r2, #0]
 80018de:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	4960      	ldr	r1, [pc, #384]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f0:	4b5e      	ldr	r3, [pc, #376]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	495b      	ldr	r1, [pc, #364]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001900:	4313      	orrs	r3, r2
 8001902:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 fd4c 	bl	80023ac <RCC_SetFlashLatencyFromMSIRange>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e37a      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800191e:	f000 fc81 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 8001922:	4602      	mov	r2, r0
 8001924:	4b51      	ldr	r3, [pc, #324]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	091b      	lsrs	r3, r3, #4
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	4950      	ldr	r1, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x274>)
 8001930:	5ccb      	ldrb	r3, [r1, r3]
 8001932:	f003 031f 	and.w	r3, r3, #31
 8001936:	fa22 f303 	lsr.w	r3, r2, r3
 800193a:	4a4e      	ldr	r2, [pc, #312]	; (8001a74 <HAL_RCC_OscConfig+0x278>)
 800193c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800193e:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <HAL_RCC_OscConfig+0x27c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fbfe 	bl	8001144 <HAL_InitTick>
 8001948:	4603      	mov	r3, r0
 800194a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d052      	beq.n	80019f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	e35e      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d032      	beq.n	80019c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800195e:	4b43      	ldr	r3, [pc, #268]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a42      	ldr	r2, [pc, #264]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800196a:	f7ff fc3b 	bl	80011e4 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001972:	f7ff fc37 	bl	80011e4 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e347      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001984:	4b39      	ldr	r3, [pc, #228]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001990:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a35      	ldr	r2, [pc, #212]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001996:	f043 0308 	orr.w	r3, r3, #8
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b33      	ldr	r3, [pc, #204]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4930      	ldr	r1, [pc, #192]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ae:	4b2f      	ldr	r3, [pc, #188]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	021b      	lsls	r3, r3, #8
 80019bc:	492b      	ldr	r1, [pc, #172]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	604b      	str	r3, [r1, #4]
 80019c2:	e01a      	b.n	80019fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019c4:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a28      	ldr	r2, [pc, #160]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019ca:	f023 0301 	bic.w	r3, r3, #1
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019d0:	f7ff fc08 	bl	80011e4 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019d8:	f7ff fc04 	bl	80011e4 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e314      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1dc>
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d073      	beq.n	8001aee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_OscConfig+0x21c>
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d10e      	bne.n	8001a30 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d063      	beq.n	8001aec <HAL_RCC_OscConfig+0x2f0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d15f      	bne.n	8001aec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e2f1      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x24c>
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e025      	b.n	8001a94 <HAL_RCC_OscConfig+0x298>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d114      	bne.n	8001a7c <HAL_RCC_OscConfig+0x280>
 8001a52:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a02      	ldr	r2, [pc, #8]	; (8001a6c <HAL_RCC_OscConfig+0x270>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e013      	b.n	8001a94 <HAL_RCC_OscConfig+0x298>
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	08006020 	.word	0x08006020
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	4ba0      	ldr	r3, [pc, #640]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a9f      	ldr	r2, [pc, #636]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b9d      	ldr	r3, [pc, #628]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a9c      	ldr	r2, [pc, #624]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fba2 	bl	80011e4 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fb9e 	bl	80011e4 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e2ae      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ab6:	4b92      	ldr	r3, [pc, #584]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x2a8>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fb8e 	bl	80011e4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fb8a 	bl	80011e4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e29a      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ade:	4b88      	ldr	r3, [pc, #544]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x2d0>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d060      	beq.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d005      	beq.n	8001b0c <HAL_RCC_OscConfig+0x310>
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2b0c      	cmp	r3, #12
 8001b04:	d119      	bne.n	8001b3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d116      	bne.n	8001b3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b0c:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d005      	beq.n	8001b24 <HAL_RCC_OscConfig+0x328>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d101      	bne.n	8001b24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e277      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b24:	4b76      	ldr	r3, [pc, #472]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	061b      	lsls	r3, r3, #24
 8001b32:	4973      	ldr	r1, [pc, #460]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b38:	e040      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d023      	beq.n	8001b8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b42:	4b6f      	ldr	r3, [pc, #444]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6e      	ldr	r2, [pc, #440]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fb49 	bl	80011e4 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7ff fb45 	bl	80011e4 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e255      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b68:	4b65      	ldr	r3, [pc, #404]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b74:	4b62      	ldr	r3, [pc, #392]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	495f      	ldr	r1, [pc, #380]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a5c      	ldr	r2, [pc, #368]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fb25 	bl	80011e4 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fb21 	bl	80011e4 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e231      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d03c      	beq.n	8001c42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d01c      	beq.n	8001c0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd0:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bd6:	4a4a      	ldr	r2, [pc, #296]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fb00 	bl	80011e4 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fafc 	bl	80011e4 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e20c      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bfa:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ef      	beq.n	8001be8 <HAL_RCC_OscConfig+0x3ec>
 8001c08:	e01b      	b.n	8001c42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c10:	4a3b      	ldr	r2, [pc, #236]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1a:	f7ff fae3 	bl	80011e4 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c22:	f7ff fadf 	bl	80011e4 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e1ef      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c34:	4b32      	ldr	r3, [pc, #200]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1ef      	bne.n	8001c22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a6 	beq.w	8001d9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c50:	2300      	movs	r3, #0
 8001c52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10d      	bne.n	8001c7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c60:	4b27      	ldr	r3, [pc, #156]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c64:	4a26      	ldr	r2, [pc, #152]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c7c:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d118      	bne.n	8001cba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c94:	f7ff faa6 	bl	80011e4 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9c:	f7ff faa2 	bl	80011e4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1b2      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x508>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d108      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d8>
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd2:	e029      	b.n	8001d28 <HAL_RCC_OscConfig+0x52c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d115      	bne.n	8001d08 <HAL_RCC_OscConfig+0x50c>
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a07      	ldr	r2, [pc, #28]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f043 0304 	orr.w	r3, r3, #4
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_RCC_OscConfig+0x504>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cfc:	e014      	b.n	8001d28 <HAL_RCC_OscConfig+0x52c>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	40007000 	.word	0x40007000
 8001d08:	4b9a      	ldr	r3, [pc, #616]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	4a99      	ldr	r2, [pc, #612]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d18:	4b96      	ldr	r3, [pc, #600]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	4a95      	ldr	r2, [pc, #596]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d016      	beq.n	8001d5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d30:	f7ff fa58 	bl	80011e4 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d36:	e00a      	b.n	8001d4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d38:	f7ff fa54 	bl	80011e4 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e162      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4e:	4b89      	ldr	r3, [pc, #548]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0ed      	beq.n	8001d38 <HAL_RCC_OscConfig+0x53c>
 8001d5c:	e015      	b.n	8001d8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5e:	f7ff fa41 	bl	80011e4 <HAL_GetTick>
 8001d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d64:	e00a      	b.n	8001d7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d66:	f7ff fa3d 	bl	80011e4 <HAL_GetTick>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e14b      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d7c:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1ed      	bne.n	8001d66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d8a:	7ffb      	ldrb	r3, [r7, #31]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d105      	bne.n	8001d9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d90:	4b78      	ldr	r3, [pc, #480]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	4a77      	ldr	r2, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d03c      	beq.n	8001e22 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01c      	beq.n	8001dea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001db0:	4b70      	ldr	r3, [pc, #448]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001db2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db6:	4a6f      	ldr	r2, [pc, #444]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff fa10 	bl	80011e4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc8:	f7ff fa0c 	bl	80011e4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e11c      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dda:	4b66      	ldr	r3, [pc, #408]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001de0:	f003 0302 	and.w	r3, r3, #2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0ef      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x5cc>
 8001de8:	e01b      	b.n	8001e22 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dea:	4b62      	ldr	r3, [pc, #392]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df0:	4a60      	ldr	r2, [pc, #384]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001df2:	f023 0301 	bic.w	r3, r3, #1
 8001df6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f9f3 	bl	80011e4 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e02:	f7ff f9ef 	bl	80011e4 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e0ff      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e14:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001e16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ef      	bne.n	8001e02 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 80f3 	beq.w	8002012 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	f040 80c9 	bne.w	8001fc8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e36:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0203 	and.w	r2, r3, #3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d12c      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	3b01      	subs	r3, #1
 8001e56:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d123      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e66:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d11b      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d113      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e86:	085b      	lsrs	r3, r3, #1
 8001e88:	3b01      	subs	r3, #1
 8001e8a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d109      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d06b      	beq.n	8001f7c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d062      	beq.n	8001f70 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001eaa:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0ac      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a2d      	ldr	r2, [pc, #180]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001ec0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ec6:	f7ff f98d 	bl	80011e4 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff f989 	bl	80011e4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e099      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1f0      	bne.n	8001ece <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eec:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x77c>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001efc:	3a01      	subs	r2, #1
 8001efe:	0112      	lsls	r2, r2, #4
 8001f00:	4311      	orrs	r1, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f06:	0212      	lsls	r2, r2, #8
 8001f08:	4311      	orrs	r1, r2
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f0e:	0852      	lsrs	r2, r2, #1
 8001f10:	3a01      	subs	r2, #1
 8001f12:	0552      	lsls	r2, r2, #21
 8001f14:	4311      	orrs	r1, r2
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f1a:	0852      	lsrs	r2, r2, #1
 8001f1c:	3a01      	subs	r2, #1
 8001f1e:	0652      	lsls	r2, r2, #25
 8001f20:	4311      	orrs	r1, r2
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f26:	06d2      	lsls	r2, r2, #27
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	4912      	ldr	r1, [pc, #72]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f30:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f3c:	4b0d      	ldr	r3, [pc, #52]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4a0c      	ldr	r2, [pc, #48]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f48:	f7ff f94c 	bl	80011e4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f948 	bl	80011e4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e058      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <HAL_RCC_OscConfig+0x778>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f6e:	e050      	b.n	8002012 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e04f      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
 8001f74:	40021000 	.word	0x40021000
 8001f78:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d144      	bne.n	8002012 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a23      	ldr	r2, [pc, #140]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f94:	4b21      	ldr	r3, [pc, #132]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a20      	ldr	r2, [pc, #128]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fa0:	f7ff f920 	bl	80011e4 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff f91c 	bl	80011e4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e02c      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x7ac>
 8001fc6:	e024      	b.n	8002012 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	2b0c      	cmp	r3, #12
 8001fcc:	d01f      	beq.n	800200e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001fd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7ff f903 	bl	80011e4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff f8ff 	bl	80011e4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e00f      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4905      	ldr	r1, [pc, #20]	; (800201c <HAL_RCC_OscConfig+0x820>)
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_RCC_OscConfig+0x824>)
 8002008:	4013      	ands	r3, r2
 800200a:	60cb      	str	r3, [r1, #12]
 800200c:	e001      	b.n	8002012 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40021000 	.word	0x40021000
 8002020:	feeefffc 	.word	0xfeeefffc

08002024 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0e7      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b75      	ldr	r3, [pc, #468]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b72      	ldr	r3, [pc, #456]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4970      	ldr	r1, [pc, #448]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0cf      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	4b66      	ldr	r3, [pc, #408]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002080:	429a      	cmp	r2, r3
 8002082:	d908      	bls.n	8002096 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4960      	ldr	r1, [pc, #384]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	4313      	orrs	r3, r2
 8002094:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d04c      	beq.n	800213c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020aa:	4b5a      	ldr	r3, [pc, #360]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d121      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e0a6      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d107      	bne.n	80020d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c2:	4b54      	ldr	r3, [pc, #336]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d115      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e09a      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020da:	4b4e      	ldr	r3, [pc, #312]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d109      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e08e      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ea:	4b4a      	ldr	r3, [pc, #296]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e086      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020fa:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f023 0203 	bic.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	4943      	ldr	r1, [pc, #268]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210c:	f7ff f86a 	bl	80011e4 <HAL_GetTick>
 8002110:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002112:	e00a      	b.n	800212a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002114:	f7ff f866 	bl	80011e4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002122:	4293      	cmp	r3, r2
 8002124:	d901      	bls.n	800212a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e06e      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 020c 	and.w	r2, r3, #12
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d1eb      	bne.n	8002114 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d010      	beq.n	800216a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	4b31      	ldr	r3, [pc, #196]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002154:	429a      	cmp	r2, r3
 8002156:	d208      	bcs.n	800216a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	492b      	ldr	r1, [pc, #172]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d210      	bcs.n	800219a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f023 0207 	bic.w	r2, r3, #7
 8002180:	4923      	ldr	r1, [pc, #140]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	4313      	orrs	r3, r2
 8002186:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_RCC_ClockConfig+0x1ec>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d001      	beq.n	800219a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e036      	b.n	8002208 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d008      	beq.n	80021b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4918      	ldr	r1, [pc, #96]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0308 	and.w	r3, r3, #8
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d009      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4910      	ldr	r1, [pc, #64]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d8:	f000 f824 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	490b      	ldr	r1, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x1f4>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_RCC_ClockConfig+0x1f8>)
 80021f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1fc>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe ffa1 	bl	8001144 <HAL_InitTick>
 8002202:	4603      	mov	r3, r0
 8002204:	72fb      	strb	r3, [r7, #11]

  return status;
 8002206:	7afb      	ldrb	r3, [r7, #11]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	08006020 	.word	0x08006020
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
 800222e:	2300      	movs	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0303 	and.w	r3, r3, #3
 8002244:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d005      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x34>
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	d121      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d11e      	bne.n	8002296 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002258:	4b34      	ldr	r3, [pc, #208]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b00      	cmp	r3, #0
 8002262:	d107      	bne.n	8002274 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002264:	4b31      	ldr	r3, [pc, #196]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	61fb      	str	r3, [r7, #28]
 8002272:	e005      	b.n	8002280 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002280:	4a2b      	ldr	r2, [pc, #172]	; (8002330 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002288:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10d      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	e004      	b.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022a8:	4b23      	ldr	r3, [pc, #140]	; (8002338 <HAL_RCC_GetSysClockFreq+0x114>)
 80022aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	2b0c      	cmp	r3, #12
 80022b0:	d134      	bne.n	800231c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022b2:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_RCC_GetSysClockFreq+0xa6>
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d003      	beq.n	80022d0 <HAL_RCC_GetSysClockFreq+0xac>
 80022c8:	e005      	b.n	80022d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <HAL_RCC_GetSysClockFreq+0x110>)
 80022cc:	617b      	str	r3, [r7, #20]
      break;
 80022ce:	e005      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <HAL_RCC_GetSysClockFreq+0x114>)
 80022d2:	617b      	str	r3, [r7, #20]
      break;
 80022d4:	e002      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	617b      	str	r3, [r7, #20]
      break;
 80022da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	3301      	adds	r3, #1
 80022e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	fb03 f202 	mul.w	r2, r3, r2
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002300:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_RCC_GetSysClockFreq+0x108>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	0e5b      	lsrs	r3, r3, #25
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	3301      	adds	r3, #1
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800231c:	69bb      	ldr	r3, [r7, #24]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	08006038 	.word	0x08006038
 8002334:	00f42400 	.word	0x00f42400
 8002338:	007a1200 	.word	0x007a1200

0800233c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_RCC_GetHCLKFreq+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000000 	.word	0x20000000

08002354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002358:	f7ff fff0 	bl	800233c <HAL_RCC_GetHCLKFreq>
 800235c:	4602      	mov	r2, r0
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	f003 0307 	and.w	r3, r3, #7
 8002368:	4904      	ldr	r1, [pc, #16]	; (800237c <HAL_RCC_GetPCLK1Freq+0x28>)
 800236a:	5ccb      	ldrb	r3, [r1, r3]
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002374:	4618      	mov	r0, r3
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	08006030 	.word	0x08006030

08002380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002384:	f7ff ffda 	bl	800233c <HAL_RCC_GetHCLKFreq>
 8002388:	4602      	mov	r2, r0
 800238a:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	0adb      	lsrs	r3, r3, #11
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002396:	5ccb      	ldrb	r3, [r1, r3]
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08006030 	.word	0x08006030

080023ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023c4:	f7ff f9b6 	bl	8001734 <HAL_PWREx_GetVoltageRange>
 80023c8:	6178      	str	r0, [r7, #20]
 80023ca:	e014      	b.n	80023f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d0:	4a24      	ldr	r2, [pc, #144]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023d6:	6593      	str	r3, [r2, #88]	; 0x58
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023e4:	f7ff f9a6 	bl	8001734 <HAL_PWREx_GetVoltageRange>
 80023e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4b1e      	ldr	r3, [pc, #120]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023fc:	d10b      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b80      	cmp	r3, #128	; 0x80
 8002402:	d919      	bls.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2ba0      	cmp	r3, #160	; 0xa0
 8002408:	d902      	bls.n	8002410 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800240a:	2302      	movs	r3, #2
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	e013      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002410:	2301      	movs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e010      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b80      	cmp	r3, #128	; 0x80
 800241a:	d902      	bls.n	8002422 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800241c:	2303      	movs	r3, #3
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	e00a      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d102      	bne.n	800242e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002428:	2302      	movs	r3, #2
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	e004      	b.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b70      	cmp	r3, #112	; 0x70
 8002432:	d101      	bne.n	8002438 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002434:	2301      	movs	r3, #1
 8002436:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002438:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 0207 	bic.w	r2, r3, #7
 8002440:	4909      	ldr	r1, [pc, #36]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40021000 	.word	0x40021000
 8002468:	40022000 	.word	0x40022000

0800246c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002474:	2300      	movs	r3, #0
 8002476:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002478:	2300      	movs	r3, #0
 800247a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002484:	2b00      	cmp	r3, #0
 8002486:	d031      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002490:	d01a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002492:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002496:	d814      	bhi.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002498:	2b00      	cmp	r3, #0
 800249a:	d009      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800249c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80024a0:	d10f      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80024a2:	4b5d      	ldr	r3, [pc, #372]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4a5c      	ldr	r2, [pc, #368]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024ae:	e00c      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fa22 	bl	8002900 <RCCEx_PLLSAI1_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80024c0:	e003      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	74fb      	strb	r3, [r7, #19]
      break;
 80024c6:	e000      	b.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80024c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024d0:	4b51      	ldr	r3, [pc, #324]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	494e      	ldr	r1, [pc, #312]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024e6:	e001      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024e8:	7cfb      	ldrb	r3, [r7, #19]
 80024ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 809e 	beq.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fa:	2300      	movs	r3, #0
 80024fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d00d      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002514:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002518:	4a3f      	ldr	r2, [pc, #252]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800251a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251e:	6593      	str	r3, [r2, #88]	; 0x58
 8002520:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002528:	60bb      	str	r3, [r7, #8]
 800252a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252c:	2301      	movs	r3, #1
 800252e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002530:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a39      	ldr	r2, [pc, #228]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800253c:	f7fe fe52 	bl	80011e4 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002542:	e009      	b.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002544:	f7fe fe4e 	bl	80011e4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d902      	bls.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	74fb      	strb	r3, [r7, #19]
        break;
 8002556:	e005      	b.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002558:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ef      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002564:	7cfb      	ldrb	r3, [r7, #19]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d15a      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800256a:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002574:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01e      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	429a      	cmp	r2, r3
 8002584:	d019      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002590:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002592:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002598:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800259a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b2:	4a19      	ldr	r2, [pc, #100]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d016      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c4:	f7fe fe0e 	bl	80011e4 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ca:	e00b      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe fe0a 	bl	80011e4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d902      	bls.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	74fb      	strb	r3, [r7, #19]
            break;
 80025e2:	e006      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e4:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ec      	beq.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10b      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002606:	4904      	ldr	r1, [pc, #16]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800260e:	e009      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002610:	7cfb      	ldrb	r3, [r7, #19]
 8002612:	74bb      	strb	r3, [r7, #18]
 8002614:	e006      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002624:	7c7b      	ldrb	r3, [r7, #17]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a8c      	ldr	r2, [pc, #560]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002642:	4b87      	ldr	r3, [pc, #540]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f023 0203 	bic.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	4983      	ldr	r1, [pc, #524]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002664:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 020c 	bic.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	497b      	ldr	r1, [pc, #492]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002686:	4b76      	ldr	r3, [pc, #472]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	4972      	ldr	r1, [pc, #456]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026a8:	4b6d      	ldr	r3, [pc, #436]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	496a      	ldr	r1, [pc, #424]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ca:	4b65      	ldr	r3, [pc, #404]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d8:	4961      	ldr	r1, [pc, #388]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026ec:	4b5c      	ldr	r3, [pc, #368]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4959      	ldr	r1, [pc, #356]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800270e:	4b54      	ldr	r3, [pc, #336]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	4950      	ldr	r1, [pc, #320]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800273e:	4948      	ldr	r1, [pc, #288]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002752:	4b43      	ldr	r3, [pc, #268]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002760:	493f      	ldr	r1, [pc, #252]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d028      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002774:	4b3a      	ldr	r3, [pc, #232]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002782:	4937      	ldr	r1, [pc, #220]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002792:	d106      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b32      	ldr	r3, [pc, #200]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a31      	ldr	r2, [pc, #196]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
 80027a0:	e011      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027aa:	d10c      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f8a4 	bl	8002900 <RCCEx_PLLSAI1_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d028      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027d2:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e0:	491f      	ldr	r1, [pc, #124]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f0:	d106      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f2:	4b1b      	ldr	r3, [pc, #108]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fc:	60d3      	str	r3, [r2, #12]
 80027fe:	e011      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002804:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002808:	d10c      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3304      	adds	r3, #4
 800280e:	2101      	movs	r1, #1
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f875 	bl	8002900 <RCCEx_PLLSAI1_Config>
 8002816:	4603      	mov	r3, r0
 8002818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281a:	7cfb      	ldrb	r3, [r7, #19]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02b      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284e:	d109      	bne.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002850:	4b03      	ldr	r3, [pc, #12]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	4a02      	ldr	r2, [pc, #8]	; (8002860 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002856:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800285a:	60d3      	str	r3, [r2, #12]
 800285c:	e014      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002868:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800286c:	d10c      	bne.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3304      	adds	r3, #4
 8002872:	2101      	movs	r1, #1
 8002874:	4618      	mov	r0, r3
 8002876:	f000 f843 	bl	8002900 <RCCEx_PLLSAI1_Config>
 800287a:	4603      	mov	r3, r0
 800287c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002884:	7cfb      	ldrb	r3, [r7, #19]
 8002886:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d01c      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028a2:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028b2:	d10c      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	2102      	movs	r1, #2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 f820 	bl	8002900 <RCCEx_PLLSAI1_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028c4:	7cfb      	ldrb	r3, [r7, #19]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80028ca:	7cfb      	ldrb	r3, [r7, #19]
 80028cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e8:	4904      	ldr	r1, [pc, #16]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3718      	adds	r7, #24
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000

08002900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800290e:	4b74      	ldr	r3, [pc, #464]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d018      	beq.n	800294c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800291a:	4b71      	ldr	r3, [pc, #452]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0203 	and.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d10d      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
       ||
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002932:	4b6b      	ldr	r3, [pc, #428]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
       ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d047      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e044      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b03      	cmp	r3, #3
 8002952:	d018      	beq.n	8002986 <RCCEx_PLLSAI1_Config+0x86>
 8002954:	2b03      	cmp	r3, #3
 8002956:	d825      	bhi.n	80029a4 <RCCEx_PLLSAI1_Config+0xa4>
 8002958:	2b01      	cmp	r3, #1
 800295a:	d002      	beq.n	8002962 <RCCEx_PLLSAI1_Config+0x62>
 800295c:	2b02      	cmp	r3, #2
 800295e:	d009      	beq.n	8002974 <RCCEx_PLLSAI1_Config+0x74>
 8002960:	e020      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002962:	4b5f      	ldr	r3, [pc, #380]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d11d      	bne.n	80029aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002972:	e01a      	b.n	80029aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002974:	4b5a      	ldr	r3, [pc, #360]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002984:	e013      	b.n	80029ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002986:	4b56      	ldr	r3, [pc, #344]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002992:	4b53      	ldr	r3, [pc, #332]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a2:	e006      	b.n	80029b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      break;
 80029a8:	e004      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029aa:	bf00      	nop
 80029ac:	e002      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e000      	b.n	80029b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b4:	7bfb      	ldrb	r3, [r7, #15]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10d      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029ba:	4b49      	ldr	r3, [pc, #292]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	430b      	orrs	r3, r1
 80029d0:	4943      	ldr	r1, [pc, #268]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d17c      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029dc:	4b40      	ldr	r3, [pc, #256]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a3f      	ldr	r2, [pc, #252]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029e8:	f7fe fbfc 	bl	80011e4 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029ee:	e009      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029f0:	f7fe fbf8 	bl	80011e4 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	73fb      	strb	r3, [r7, #15]
        break;
 8002a02:	e005      	b.n	8002a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a04:	4b36      	ldr	r3, [pc, #216]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ef      	bne.n	80029f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d15f      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d110      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a1c:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6892      	ldr	r2, [r2, #8]
 8002a2c:	0211      	lsls	r1, r2, #8
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	68d2      	ldr	r2, [r2, #12]
 8002a32:	06d2      	lsls	r2, r2, #27
 8002a34:	430a      	orrs	r2, r1
 8002a36:	492a      	ldr	r1, [pc, #168]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	610b      	str	r3, [r1, #16]
 8002a3c:	e027      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d112      	bne.n	8002a6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a44:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	0211      	lsls	r1, r2, #8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6912      	ldr	r2, [r2, #16]
 8002a5a:	0852      	lsrs	r2, r2, #1
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0552      	lsls	r2, r2, #21
 8002a60:	430a      	orrs	r2, r1
 8002a62:	491f      	ldr	r1, [pc, #124]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	610b      	str	r3, [r1, #16]
 8002a68:	e011      	b.n	8002a8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6892      	ldr	r2, [r2, #8]
 8002a7a:	0211      	lsls	r1, r2, #8
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6952      	ldr	r2, [r2, #20]
 8002a80:	0852      	lsrs	r2, r2, #1
 8002a82:	3a01      	subs	r2, #1
 8002a84:	0652      	lsls	r2, r2, #25
 8002a86:	430a      	orrs	r2, r1
 8002a88:	4915      	ldr	r1, [pc, #84]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a8e:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a94:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9a:	f7fe fba3 	bl	80011e4 <HAL_GetTick>
 8002a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002aa0:	e009      	b.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aa2:	f7fe fb9f 	bl	80011e4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d902      	bls.n	8002ab6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ab4:	e005      	b.n	8002ac2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab6:	4b0a      	ldr	r3, [pc, #40]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ef      	beq.n	8002aa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	4903      	ldr	r1, [pc, #12]	; (8002ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e095      	b.n	8002c22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b06:	d009      	beq.n	8002b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
 8002b0e:	e005      	b.n	8002b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fd ff6c 	bl	8000a14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b5c:	d902      	bls.n	8002b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e002      	b.n	8002b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b72:	d007      	beq.n	8002b84 <HAL_SPI_Init+0xa0>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b7c:	d002      	beq.n	8002b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	f003 0301 	and.w	r3, r3, #1
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc6:	ea42 0103 	orr.w	r1, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 0204 	and.w	r2, r3, #4
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	; 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_TransmitReceive+0x26>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e1fb      	b.n	8003048 <HAL_SPI_TransmitReceive+0x41e>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c58:	f7fe fac4 	bl	80011e4 <HAL_GetTick>
 8002c5c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c64:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002c6c:	887b      	ldrh	r3, [r7, #2]
 8002c6e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002c70:	887b      	ldrh	r3, [r7, #2]
 8002c72:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c74:	7efb      	ldrb	r3, [r7, #27]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d00e      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x6e>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c80:	d106      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d102      	bne.n	8002c90 <HAL_SPI_TransmitReceive+0x66>
 8002c8a:	7efb      	ldrb	r3, [r7, #27]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d003      	beq.n	8002c98 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002c96:	e1cd      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d005      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x80>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <HAL_SPI_TransmitReceive+0x80>
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d103      	bne.n	8002cb2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002cb0:	e1c0      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d003      	beq.n	8002cc6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2205      	movs	r2, #5
 8002cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	887a      	ldrh	r2, [r7, #2]
 8002cd6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	887a      	ldrh	r2, [r7, #2]
 8002cde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	887a      	ldrh	r2, [r7, #2]
 8002cec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	887a      	ldrh	r2, [r7, #2]
 8002cf2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d08:	d802      	bhi.n	8002d10 <HAL_SPI_TransmitReceive+0xe6>
 8002d0a:	8a3b      	ldrh	r3, [r7, #16]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d908      	bls.n	8002d22 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	e007      	b.n	8002d32 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d30:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3c:	2b40      	cmp	r3, #64	; 0x40
 8002d3e:	d007      	beq.n	8002d50 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d58:	d97c      	bls.n	8002e54 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d002      	beq.n	8002d68 <HAL_SPI_TransmitReceive+0x13e>
 8002d62:	8a7b      	ldrh	r3, [r7, #18]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d169      	bne.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d6c:	881a      	ldrh	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d78:	1c9a      	adds	r2, r3, #2
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d8c:	e056      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d11b      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x1aa>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d016      	beq.n	8002dd4 <HAL_SPI_TransmitReceive+0x1aa>
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d113      	bne.n	8002dd4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d11c      	bne.n	8002e1c <HAL_SPI_TransmitReceive+0x1f2>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d016      	beq.n	8002e1c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	b292      	uxth	r2, r2
 8002dfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	1c9a      	adds	r2, r3, #2
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e1c:	f7fe f9e2 	bl	80011e4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d807      	bhi.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
 8002e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e32:	d003      	beq.n	8002e3c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e3a:	e0fb      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1a3      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x164>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d19d      	bne.n	8002d8e <HAL_SPI_TransmitReceive+0x164>
 8002e52:	e0df      	b.n	8003014 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_SPI_TransmitReceive+0x23a>
 8002e5c:	8a7b      	ldrh	r3, [r7, #18]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80cb 	bne.w	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d912      	bls.n	8002e94 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e72:	881a      	ldrh	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7e:	1c9a      	adds	r2, r3, #2
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b02      	subs	r3, #2
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e92:	e0b2      	b.n	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	7812      	ldrb	r2, [r2, #0]
 8002ea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea6:	1c5a      	adds	r2, r3, #1
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eba:	e09e      	b.n	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d134      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x30a>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d02f      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x30a>
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d12c      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d912      	bls.n	8002f0a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	881a      	ldrh	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	1c9a      	adds	r2, r3, #2
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b02      	subs	r3, #2
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f08:	e012      	b.n	8002f30 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	330c      	adds	r3, #12
 8002f14:	7812      	ldrb	r2, [r2, #0]
 8002f16:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d148      	bne.n	8002fd4 <HAL_SPI_TransmitReceive+0x3aa>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d042      	beq.n	8002fd4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d923      	bls.n	8002fa2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68da      	ldr	r2, [r3, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	b292      	uxth	r2, r2
 8002f66:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	1c9a      	adds	r2, r3, #2
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b02      	subs	r3, #2
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d81f      	bhi.n	8002fd0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f9e:	605a      	str	r2, [r3, #4]
 8002fa0:	e016      	b.n	8002fd0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f103 020c 	add.w	r2, r3, #12
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	7812      	ldrb	r2, [r2, #0]
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	1c5a      	adds	r2, r3, #1
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002fd4:	f7fe f906 	bl	80011e4 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d803      	bhi.n	8002fec <HAL_SPI_TransmitReceive+0x3c2>
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fea:	d102      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x3c8>
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002ff8:	e01c      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f af5b 	bne.w	8002ebc <HAL_SPI_TransmitReceive+0x292>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	f47f af54 	bne.w	8002ebc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f937 	bl	800328c <SPI_EndRxTxTransaction>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d006      	beq.n	8003032 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2220      	movs	r2, #32
 800302e:	661a      	str	r2, [r3, #96]	; 0x60
 8003030:	e000      	b.n	8003034 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003044:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003060:	f7fe f8c0 	bl	80011e4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003070:	f7fe f8b8 	bl	80011e4 <HAL_GetTick>
 8003074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003076:	4b39      	ldr	r3, [pc, #228]	; (800315c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	e054      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d050      	beq.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003090:	f7fe f8a8 	bl	80011e4 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d902      	bls.n	80030a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d13d      	bne.n	8003122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030be:	d111      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	d004      	beq.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d107      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d10f      	bne.n	800310e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e017      	b.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3b01      	subs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d19b      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000000 	.word	0x20000000

08003160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003172:	f7fe f837 	bl	80011e4 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003182:	f7fe f82f 	bl	80011e4 <HAL_GetTick>
 8003186:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	0d1b      	lsrs	r3, r3, #20
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031a8:	e060      	b.n	800326c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031b0:	d107      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d050      	beq.n	800326c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ca:	f7fe f80b 	bl	80011e4 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d902      	bls.n	80031e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13d      	bne.n	800325c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f8:	d111      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d004      	beq.n	800320e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d107      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003226:	d10f      	bne.n	8003248 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e010      	b.n	800327e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3b01      	subs	r3, #1
 800326a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d196      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000000 	.word	0x20000000

0800328c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ff5b 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e027      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fec0 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e014      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff34 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e000      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e049      	b.n	80033be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d106      	bne.n	8003344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7fd fdc4 	bl	8000ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f000 fac2 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d001      	beq.n	80033e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e033      	b.n	8003448 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_TIM_Base_Start+0x8c>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_TIM_Base_Start+0x3e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fa:	d004      	beq.n	8003406 <HAL_TIM_Base_Start+0x3e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_TIM_Base_Start+0x90>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d115      	bne.n	8003432 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <HAL_TIM_Base_Start+0x94>)
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b06      	cmp	r3, #6
 8003416:	d015      	beq.n	8003444 <HAL_TIM_Base_Start+0x7c>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d011      	beq.n	8003444 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	e008      	b.n	8003444 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e000      	b.n	8003446 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003444:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003446:	2300      	movs	r3, #0
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40014000 	.word	0x40014000
 800345c:	00010007 	.word	0x00010007

08003460 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e049      	b.n	8003506 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f841 	bl	800350e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3304      	adds	r3, #4
 800349c:	4619      	mov	r1, r3
 800349e:	4610      	mov	r0, r2
 80034a0:	f000 fa1e 	bl	80038e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800353e:	2302      	movs	r3, #2
 8003540:	e0ff      	b.n	8003742 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b14      	cmp	r3, #20
 800354e:	f200 80f0 	bhi.w	8003732 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003552:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003558:	080035ad 	.word	0x080035ad
 800355c:	08003733 	.word	0x08003733
 8003560:	08003733 	.word	0x08003733
 8003564:	08003733 	.word	0x08003733
 8003568:	080035ed 	.word	0x080035ed
 800356c:	08003733 	.word	0x08003733
 8003570:	08003733 	.word	0x08003733
 8003574:	08003733 	.word	0x08003733
 8003578:	0800362f 	.word	0x0800362f
 800357c:	08003733 	.word	0x08003733
 8003580:	08003733 	.word	0x08003733
 8003584:	08003733 	.word	0x08003733
 8003588:	0800366f 	.word	0x0800366f
 800358c:	08003733 	.word	0x08003733
 8003590:	08003733 	.word	0x08003733
 8003594:	08003733 	.word	0x08003733
 8003598:	080036b1 	.word	0x080036b1
 800359c:	08003733 	.word	0x08003733
 80035a0:	08003733 	.word	0x08003733
 80035a4:	08003733 	.word	0x08003733
 80035a8:	080036f1 	.word	0x080036f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f9f8 	bl	80039a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691a      	ldr	r2, [r3, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	619a      	str	r2, [r3, #24]
      break;
 80035ea:	e0a5      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f000 fa54 	bl	8003aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699a      	ldr	r2, [r3, #24]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003616:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6999      	ldr	r1, [r3, #24]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	021a      	lsls	r2, r3, #8
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	619a      	str	r2, [r3, #24]
      break;
 800362c:	e084      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 faad 	bl	8003b94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f042 0208 	orr.w	r2, r2, #8
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0204 	bic.w	r2, r2, #4
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	61da      	str	r2, [r3, #28]
      break;
 800366c:	e064      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68b9      	ldr	r1, [r7, #8]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 fb05 	bl	8003c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	69da      	ldr	r2, [r3, #28]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003688:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003698:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	69d9      	ldr	r1, [r3, #28]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	021a      	lsls	r2, r3, #8
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	61da      	str	r2, [r3, #28]
      break;
 80036ae:	e043      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fb42 	bl	8003d40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0208 	orr.w	r2, r2, #8
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0204 	bic.w	r2, r2, #4
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80036ee:	e023      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 fb7a 	bl	8003df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800370a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800371a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	021a      	lsls	r2, r3, #8
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003730:	e002      	b.n	8003738 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	75fb      	strb	r3, [r7, #23]
      break;
 8003736:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003740:	7dfb      	ldrb	r3, [r7, #23]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop

0800374c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_TIM_ConfigClockSource+0x1c>
 8003764:	2302      	movs	r3, #2
 8003766:	e0b6      	b.n	80038d6 <HAL_TIM_ConfigClockSource+0x18a>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003792:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a4:	d03e      	beq.n	8003824 <HAL_TIM_ConfigClockSource+0xd8>
 80037a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037aa:	f200 8087 	bhi.w	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	f000 8086 	beq.w	80038c2 <HAL_TIM_ConfigClockSource+0x176>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	d87f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037bc:	2b70      	cmp	r3, #112	; 0x70
 80037be:	d01a      	beq.n	80037f6 <HAL_TIM_ConfigClockSource+0xaa>
 80037c0:	2b70      	cmp	r3, #112	; 0x70
 80037c2:	d87b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037c4:	2b60      	cmp	r3, #96	; 0x60
 80037c6:	d050      	beq.n	800386a <HAL_TIM_ConfigClockSource+0x11e>
 80037c8:	2b60      	cmp	r3, #96	; 0x60
 80037ca:	d877      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037cc:	2b50      	cmp	r3, #80	; 0x50
 80037ce:	d03c      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xfe>
 80037d0:	2b50      	cmp	r3, #80	; 0x50
 80037d2:	d873      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037d4:	2b40      	cmp	r3, #64	; 0x40
 80037d6:	d058      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x13e>
 80037d8:	2b40      	cmp	r3, #64	; 0x40
 80037da:	d86f      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037dc:	2b30      	cmp	r3, #48	; 0x30
 80037de:	d064      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037e0:	2b30      	cmp	r3, #48	; 0x30
 80037e2:	d86b      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d060      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d867      	bhi.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05c      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d05a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x15e>
 80037f4:	e062      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6899      	ldr	r1, [r3, #8]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f000 fbc7 	bl	8003f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003818:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68ba      	ldr	r2, [r7, #8]
 8003820:	609a      	str	r2, [r3, #8]
      break;
 8003822:	e04f      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6818      	ldr	r0, [r3, #0]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f000 fbb0 	bl	8003f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e03c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6859      	ldr	r1, [r3, #4]
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	461a      	mov	r2, r3
 8003858:	f000 fb24 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2150      	movs	r1, #80	; 0x50
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fb7d 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003868:	e02c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6818      	ldr	r0, [r3, #0]
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6859      	ldr	r1, [r3, #4]
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	461a      	mov	r2, r3
 8003878:	f000 fb43 	bl	8003f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2160      	movs	r1, #96	; 0x60
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fb6d 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 8003888:	e01c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fb04 	bl	8003ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2140      	movs	r1, #64	; 0x40
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fb5d 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80038a8:	e00c      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4619      	mov	r1, r3
 80038b4:	4610      	mov	r0, r2
 80038b6:	f000 fb54 	bl	8003f62 <TIM_ITRx_SetConfig>
      break;
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e000      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80038c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a2a      	ldr	r2, [pc, #168]	; (800399c <TIM_Base_SetConfig+0xbc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d003      	beq.n	8003900 <TIM_Base_SetConfig+0x20>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fe:	d108      	bne.n	8003912 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a21      	ldr	r2, [pc, #132]	; (800399c <TIM_Base_SetConfig+0xbc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00b      	beq.n	8003932 <TIM_Base_SetConfig+0x52>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003920:	d007      	beq.n	8003932 <TIM_Base_SetConfig+0x52>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1e      	ldr	r2, [pc, #120]	; (80039a0 <TIM_Base_SetConfig+0xc0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d003      	beq.n	8003932 <TIM_Base_SetConfig+0x52>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <TIM_Base_SetConfig+0xc4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d108      	bne.n	8003944 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	4313      	orrs	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	4313      	orrs	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0c      	ldr	r2, [pc, #48]	; (800399c <TIM_Base_SetConfig+0xbc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0xa0>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a0b      	ldr	r2, [pc, #44]	; (80039a0 <TIM_Base_SetConfig+0xc0>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0xa0>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0a      	ldr	r2, [pc, #40]	; (80039a4 <TIM_Base_SetConfig+0xc4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]
}
 800398e:	bf00      	nop
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40014000 	.word	0x40014000
 80039a4:	40014400 	.word	0x40014400

080039a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	f023 0201 	bic.w	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0303 	bic.w	r3, r3, #3
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f023 0302 	bic.w	r3, r3, #2
 80039f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a24      	ldr	r2, [pc, #144]	; (8003a94 <TIM_OC1_SetConfig+0xec>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d007      	beq.n	8003a18 <TIM_OC1_SetConfig+0x70>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a23      	ldr	r2, [pc, #140]	; (8003a98 <TIM_OC1_SetConfig+0xf0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d003      	beq.n	8003a18 <TIM_OC1_SetConfig+0x70>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <TIM_OC1_SetConfig+0xf4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d10c      	bne.n	8003a32 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	f023 0308 	bic.w	r3, r3, #8
 8003a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f023 0304 	bic.w	r3, r3, #4
 8003a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a17      	ldr	r2, [pc, #92]	; (8003a94 <TIM_OC1_SetConfig+0xec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d007      	beq.n	8003a4a <TIM_OC1_SetConfig+0xa2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a16      	ldr	r2, [pc, #88]	; (8003a98 <TIM_OC1_SetConfig+0xf0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC1_SetConfig+0xa2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a15      	ldr	r2, [pc, #84]	; (8003a9c <TIM_OC1_SetConfig+0xf4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d111      	bne.n	8003a6e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	621a      	str	r2, [r3, #32]
}
 8003a88:	bf00      	nop
 8003a8a:	371c      	adds	r7, #28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400

08003aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f023 0210 	bic.w	r2, r3, #16
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	021b      	lsls	r3, r3, #8
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0320 	bic.w	r3, r3, #32
 8003aee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	4a22      	ldr	r2, [pc, #136]	; (8003b88 <TIM_OC2_SetConfig+0xe8>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d10d      	bne.n	8003b20 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <TIM_OC2_SetConfig+0xe8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d007      	beq.n	8003b38 <TIM_OC2_SetConfig+0x98>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <TIM_OC2_SetConfig+0xec>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d003      	beq.n	8003b38 <TIM_OC2_SetConfig+0x98>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <TIM_OC2_SetConfig+0xf0>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d113      	bne.n	8003b60 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	621a      	str	r2, [r3, #32]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400

08003b94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM_OC3_SetConfig+0xe4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10d      	bne.n	8003c12 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <TIM_OC3_SetConfig+0xe4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d007      	beq.n	8003c2a <TIM_OC3_SetConfig+0x96>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <TIM_OC3_SetConfig+0xe8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d003      	beq.n	8003c2a <TIM_OC3_SetConfig+0x96>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a16      	ldr	r2, [pc, #88]	; (8003c80 <TIM_OC3_SetConfig+0xec>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d113      	bne.n	8003c52 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	011b      	lsls	r3, r3, #4
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	621a      	str	r2, [r3, #32]
}
 8003c6c:	bf00      	nop
 8003c6e:	371c      	adds	r7, #28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40012c00 	.word	0x40012c00
 8003c7c:	40014000 	.word	0x40014000
 8003c80:	40014400 	.word	0x40014400

08003c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	021b      	lsls	r3, r3, #8
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	031b      	lsls	r3, r3, #12
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <TIM_OC4_SetConfig+0xb0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_OC4_SetConfig+0x74>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <TIM_OC4_SetConfig+0xb4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC4_SetConfig+0x74>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <TIM_OC4_SetConfig+0xb8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d109      	bne.n	8003d0c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685a      	ldr	r2, [r3, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	621a      	str	r2, [r3, #32]
}
 8003d26:	bf00      	nop
 8003d28:	371c      	adds	r7, #28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40012c00 	.word	0x40012c00
 8003d38:	40014000 	.word	0x40014000
 8003d3c:	40014400 	.word	0x40014400

08003d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	041b      	lsls	r3, r3, #16
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <TIM_OC5_SetConfig+0xa4>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d007      	beq.n	8003daa <TIM_OC5_SetConfig+0x6a>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <TIM_OC5_SetConfig+0xa8>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d003      	beq.n	8003daa <TIM_OC5_SetConfig+0x6a>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a11      	ldr	r2, [pc, #68]	; (8003dec <TIM_OC5_SetConfig+0xac>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d109      	bne.n	8003dbe <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40014000 	.word	0x40014000
 8003dec:	40014400 	.word	0x40014400

08003df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	051b      	lsls	r3, r3, #20
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <TIM_OC6_SetConfig+0xa8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_OC6_SetConfig+0x6c>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a13      	ldr	r2, [pc, #76]	; (8003e9c <TIM_OC6_SetConfig+0xac>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_OC6_SetConfig+0x6c>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <TIM_OC6_SetConfig+0xb0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d109      	bne.n	8003e70 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	029b      	lsls	r3, r3, #10
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	621a      	str	r2, [r3, #32]
}
 8003e8a:	bf00      	nop
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40012c00 	.word	0x40012c00
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400

08003ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	f023 0201 	bic.w	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f023 030a 	bic.w	r3, r3, #10
 8003ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ee2:	697a      	ldr	r2, [r7, #20]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b087      	sub	sp, #28
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	60b9      	str	r1, [r7, #8]
 8003f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	f023 0210 	bic.w	r2, r3, #16
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	031b      	lsls	r3, r3, #12
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f62:	b480      	push	{r7}
 8003f64:	b085      	sub	sp, #20
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	f043 0307 	orr.w	r3, r3, #7
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	609a      	str	r2, [r3, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	021a      	lsls	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	609a      	str	r2, [r3, #8]
}
 8003fcc:	bf00      	nop
 8003fce:	371c      	adds	r7, #28
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e04f      	b.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d108      	bne.n	800402c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004020:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004032:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4313      	orrs	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a14      	ldr	r2, [pc, #80]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004058:	d004      	beq.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a10      	ldr	r2, [pc, #64]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d10c      	bne.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800406a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40014000 	.word	0x40014000

080040a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e040      	b.n	8004138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc ff98 	bl	8000ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2224      	movs	r2, #36	; 0x24
 80040d0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8c0 	bl	8004268 <UART_SetConfig>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e022      	b.n	8004138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fb0e 	bl	800471c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 fb95 	bl	8004860 <UART_CheckIdleState>
 8004136:	4603      	mov	r3, r0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	603b      	str	r3, [r7, #0]
 800414c:	4613      	mov	r3, r2
 800414e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004154:	2b20      	cmp	r3, #32
 8004156:	f040 8082 	bne.w	800425e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <HAL_UART_Transmit+0x26>
 8004160:	88fb      	ldrh	r3, [r7, #6]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e07a      	b.n	8004260 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_UART_Transmit+0x38>
 8004174:	2302      	movs	r3, #2
 8004176:	e073      	b.n	8004260 <HAL_UART_Transmit+0x120>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2200      	movs	r2, #0
 8004184:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2221      	movs	r2, #33	; 0x21
 800418c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800418e:	f7fd f829 	bl	80011e4 <HAL_GetTick>
 8004192:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	88fa      	ldrh	r2, [r7, #6]
 8004198:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ac:	d108      	bne.n	80041c0 <HAL_UART_Transmit+0x80>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d104      	bne.n	80041c0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
 80041be:	e003      	b.n	80041c8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80041d0:	e02d      	b.n	800422e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2200      	movs	r2, #0
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 fb88 	bl	80048f2 <UART_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e039      	b.n	8004260 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	881a      	ldrh	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fe:	b292      	uxth	r2, r2
 8004200:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	3302      	adds	r3, #2
 8004206:	61bb      	str	r3, [r7, #24]
 8004208:	e008      	b.n	800421c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	781a      	ldrb	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	b292      	uxth	r2, r2
 8004214:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	3301      	adds	r3, #1
 800421a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1cb      	bne.n	80041d2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2200      	movs	r2, #0
 8004242:	2140      	movs	r1, #64	; 0x40
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fb54 	bl	80048f2 <UART_WaitOnFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e005      	b.n	8004260 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e000      	b.n	8004260 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800425e:	2302      	movs	r3, #2
  }
}
 8004260:	4618      	mov	r0, r3
 8004262:	3720      	adds	r7, #32
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800426c:	b08a      	sub	sp, #40	; 0x28
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	431a      	orrs	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	4313      	orrs	r3, r2
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	4b9e      	ldr	r3, [pc, #632]	; (8004510 <UART_SetConfig+0x2a8>)
 8004298:	4013      	ands	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	6812      	ldr	r2, [r2, #0]
 800429e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	68da      	ldr	r2, [r3, #12]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	430a      	orrs	r2, r1
 80042b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a93      	ldr	r2, [pc, #588]	; (8004514 <UART_SetConfig+0x2ac>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d004      	beq.n	80042d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d0:	4313      	orrs	r3, r2
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a8a      	ldr	r2, [pc, #552]	; (8004518 <UART_SetConfig+0x2b0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d126      	bne.n	8004340 <UART_SetConfig+0xd8>
 80042f2:	4b8a      	ldr	r3, [pc, #552]	; (800451c <UART_SetConfig+0x2b4>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	2b03      	cmp	r3, #3
 80042fe:	d81b      	bhi.n	8004338 <UART_SetConfig+0xd0>
 8004300:	a201      	add	r2, pc, #4	; (adr r2, 8004308 <UART_SetConfig+0xa0>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	08004319 	.word	0x08004319
 800430c:	08004329 	.word	0x08004329
 8004310:	08004321 	.word	0x08004321
 8004314:	08004331 	.word	0x08004331
 8004318:	2301      	movs	r3, #1
 800431a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800431e:	e0ab      	b.n	8004478 <UART_SetConfig+0x210>
 8004320:	2302      	movs	r3, #2
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e0a7      	b.n	8004478 <UART_SetConfig+0x210>
 8004328:	2304      	movs	r3, #4
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e0a3      	b.n	8004478 <UART_SetConfig+0x210>
 8004330:	2308      	movs	r3, #8
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e09f      	b.n	8004478 <UART_SetConfig+0x210>
 8004338:	2310      	movs	r3, #16
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e09b      	b.n	8004478 <UART_SetConfig+0x210>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a76      	ldr	r2, [pc, #472]	; (8004520 <UART_SetConfig+0x2b8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d138      	bne.n	80043bc <UART_SetConfig+0x154>
 800434a:	4b74      	ldr	r3, [pc, #464]	; (800451c <UART_SetConfig+0x2b4>)
 800434c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d82d      	bhi.n	80043b4 <UART_SetConfig+0x14c>
 8004358:	a201      	add	r2, pc, #4	; (adr r2, 8004360 <UART_SetConfig+0xf8>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004395 	.word	0x08004395
 8004364:	080043b5 	.word	0x080043b5
 8004368:	080043b5 	.word	0x080043b5
 800436c:	080043b5 	.word	0x080043b5
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043b5 	.word	0x080043b5
 8004378:	080043b5 	.word	0x080043b5
 800437c:	080043b5 	.word	0x080043b5
 8004380:	0800439d 	.word	0x0800439d
 8004384:	080043b5 	.word	0x080043b5
 8004388:	080043b5 	.word	0x080043b5
 800438c:	080043b5 	.word	0x080043b5
 8004390:	080043ad 	.word	0x080043ad
 8004394:	2300      	movs	r3, #0
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439a:	e06d      	b.n	8004478 <UART_SetConfig+0x210>
 800439c:	2302      	movs	r3, #2
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e069      	b.n	8004478 <UART_SetConfig+0x210>
 80043a4:	2304      	movs	r3, #4
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e065      	b.n	8004478 <UART_SetConfig+0x210>
 80043ac:	2308      	movs	r3, #8
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e061      	b.n	8004478 <UART_SetConfig+0x210>
 80043b4:	2310      	movs	r3, #16
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e05d      	b.n	8004478 <UART_SetConfig+0x210>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a58      	ldr	r2, [pc, #352]	; (8004524 <UART_SetConfig+0x2bc>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d125      	bne.n	8004412 <UART_SetConfig+0x1aa>
 80043c6:	4b55      	ldr	r3, [pc, #340]	; (800451c <UART_SetConfig+0x2b4>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d016      	beq.n	8004402 <UART_SetConfig+0x19a>
 80043d4:	2b30      	cmp	r3, #48	; 0x30
 80043d6:	d818      	bhi.n	800440a <UART_SetConfig+0x1a2>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d00a      	beq.n	80043f2 <UART_SetConfig+0x18a>
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d814      	bhi.n	800440a <UART_SetConfig+0x1a2>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <UART_SetConfig+0x182>
 80043e4:	2b10      	cmp	r3, #16
 80043e6:	d008      	beq.n	80043fa <UART_SetConfig+0x192>
 80043e8:	e00f      	b.n	800440a <UART_SetConfig+0x1a2>
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f0:	e042      	b.n	8004478 <UART_SetConfig+0x210>
 80043f2:	2302      	movs	r3, #2
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e03e      	b.n	8004478 <UART_SetConfig+0x210>
 80043fa:	2304      	movs	r3, #4
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	e03a      	b.n	8004478 <UART_SetConfig+0x210>
 8004402:	2308      	movs	r3, #8
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004408:	e036      	b.n	8004478 <UART_SetConfig+0x210>
 800440a:	2310      	movs	r3, #16
 800440c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004410:	e032      	b.n	8004478 <UART_SetConfig+0x210>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a3f      	ldr	r2, [pc, #252]	; (8004514 <UART_SetConfig+0x2ac>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d12a      	bne.n	8004472 <UART_SetConfig+0x20a>
 800441c:	4b3f      	ldr	r3, [pc, #252]	; (800451c <UART_SetConfig+0x2b4>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004426:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800442a:	d01a      	beq.n	8004462 <UART_SetConfig+0x1fa>
 800442c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004430:	d81b      	bhi.n	800446a <UART_SetConfig+0x202>
 8004432:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004436:	d00c      	beq.n	8004452 <UART_SetConfig+0x1ea>
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443c:	d815      	bhi.n	800446a <UART_SetConfig+0x202>
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <UART_SetConfig+0x1e2>
 8004442:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004446:	d008      	beq.n	800445a <UART_SetConfig+0x1f2>
 8004448:	e00f      	b.n	800446a <UART_SetConfig+0x202>
 800444a:	2300      	movs	r3, #0
 800444c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004450:	e012      	b.n	8004478 <UART_SetConfig+0x210>
 8004452:	2302      	movs	r3, #2
 8004454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004458:	e00e      	b.n	8004478 <UART_SetConfig+0x210>
 800445a:	2304      	movs	r3, #4
 800445c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004460:	e00a      	b.n	8004478 <UART_SetConfig+0x210>
 8004462:	2308      	movs	r3, #8
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004468:	e006      	b.n	8004478 <UART_SetConfig+0x210>
 800446a:	2310      	movs	r3, #16
 800446c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004470:	e002      	b.n	8004478 <UART_SetConfig+0x210>
 8004472:	2310      	movs	r3, #16
 8004474:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a25      	ldr	r2, [pc, #148]	; (8004514 <UART_SetConfig+0x2ac>)
 800447e:	4293      	cmp	r3, r2
 8004480:	f040 808a 	bne.w	8004598 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004484:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004488:	2b08      	cmp	r3, #8
 800448a:	d824      	bhi.n	80044d6 <UART_SetConfig+0x26e>
 800448c:	a201      	add	r2, pc, #4	; (adr r2, 8004494 <UART_SetConfig+0x22c>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044b9 	.word	0x080044b9
 8004498:	080044d7 	.word	0x080044d7
 800449c:	080044c1 	.word	0x080044c1
 80044a0:	080044d7 	.word	0x080044d7
 80044a4:	080044c7 	.word	0x080044c7
 80044a8:	080044d7 	.word	0x080044d7
 80044ac:	080044d7 	.word	0x080044d7
 80044b0:	080044d7 	.word	0x080044d7
 80044b4:	080044cf 	.word	0x080044cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b8:	f7fd ff4c 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80044bc:	61f8      	str	r0, [r7, #28]
        break;
 80044be:	e010      	b.n	80044e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <UART_SetConfig+0x2c0>)
 80044c2:	61fb      	str	r3, [r7, #28]
        break;
 80044c4:	e00d      	b.n	80044e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c6:	f7fd fead 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80044ca:	61f8      	str	r0, [r7, #28]
        break;
 80044cc:	e009      	b.n	80044e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d2:	61fb      	str	r3, [r7, #28]
        break;
 80044d4:	e005      	b.n	80044e2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8109 	beq.w	80046fc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	4413      	add	r3, r2
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d305      	bcc.n	8004506 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	429a      	cmp	r2, r3
 8004504:	d912      	bls.n	800452c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800450c:	e0f6      	b.n	80046fc <UART_SetConfig+0x494>
 800450e:	bf00      	nop
 8004510:	efff69f3 	.word	0xefff69f3
 8004514:	40008000 	.word	0x40008000
 8004518:	40013800 	.word	0x40013800
 800451c:	40021000 	.word	0x40021000
 8004520:	40004400 	.word	0x40004400
 8004524:	40004800 	.word	0x40004800
 8004528:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2200      	movs	r2, #0
 8004530:	461c      	mov	r4, r3
 8004532:	4615      	mov	r5, r2
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	022b      	lsls	r3, r5, #8
 800453e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004542:	0222      	lsls	r2, r4, #8
 8004544:	68f9      	ldr	r1, [r7, #12]
 8004546:	6849      	ldr	r1, [r1, #4]
 8004548:	0849      	lsrs	r1, r1, #1
 800454a:	2000      	movs	r0, #0
 800454c:	4688      	mov	r8, r1
 800454e:	4681      	mov	r9, r0
 8004550:	eb12 0a08 	adds.w	sl, r2, r8
 8004554:	eb43 0b09 	adc.w	fp, r3, r9
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	603b      	str	r3, [r7, #0]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004566:	4650      	mov	r0, sl
 8004568:	4659      	mov	r1, fp
 800456a:	f7fb fe89 	bl	8000280 <__aeabi_uldivmod>
 800456e:	4602      	mov	r2, r0
 8004570:	460b      	mov	r3, r1
 8004572:	4613      	mov	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800457c:	d308      	bcc.n	8004590 <UART_SetConfig+0x328>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004584:	d204      	bcs.n	8004590 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	60da      	str	r2, [r3, #12]
 800458e:	e0b5      	b.n	80046fc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004596:	e0b1      	b.n	80046fc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	d15d      	bne.n	800465e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80045a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d827      	bhi.n	80045fa <UART_SetConfig+0x392>
 80045aa:	a201      	add	r2, pc, #4	; (adr r2, 80045b0 <UART_SetConfig+0x348>)
 80045ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b0:	080045d5 	.word	0x080045d5
 80045b4:	080045dd 	.word	0x080045dd
 80045b8:	080045e5 	.word	0x080045e5
 80045bc:	080045fb 	.word	0x080045fb
 80045c0:	080045eb 	.word	0x080045eb
 80045c4:	080045fb 	.word	0x080045fb
 80045c8:	080045fb 	.word	0x080045fb
 80045cc:	080045fb 	.word	0x080045fb
 80045d0:	080045f3 	.word	0x080045f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d4:	f7fd febe 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 80045d8:	61f8      	str	r0, [r7, #28]
        break;
 80045da:	e014      	b.n	8004606 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fd fed0 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 80045e0:	61f8      	str	r0, [r7, #28]
        break;
 80045e2:	e010      	b.n	8004606 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045e4:	4b4c      	ldr	r3, [pc, #304]	; (8004718 <UART_SetConfig+0x4b0>)
 80045e6:	61fb      	str	r3, [r7, #28]
        break;
 80045e8:	e00d      	b.n	8004606 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ea:	f7fd fe1b 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80045ee:	61f8      	str	r0, [r7, #28]
        break;
 80045f0:	e009      	b.n	8004606 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f6:	61fb      	str	r3, [r7, #28]
        break;
 80045f8:	e005      	b.n	8004606 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d077      	beq.n	80046fc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	005a      	lsls	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	085b      	lsrs	r3, r3, #1
 8004616:	441a      	add	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004620:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004622:	69bb      	ldr	r3, [r7, #24]
 8004624:	2b0f      	cmp	r3, #15
 8004626:	d916      	bls.n	8004656 <UART_SetConfig+0x3ee>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800462e:	d212      	bcs.n	8004656 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f023 030f 	bic.w	r3, r3, #15
 8004638:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	b29b      	uxth	r3, r3
 8004640:	f003 0307 	and.w	r3, r3, #7
 8004644:	b29a      	uxth	r2, r3
 8004646:	8afb      	ldrh	r3, [r7, #22]
 8004648:	4313      	orrs	r3, r2
 800464a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	8afa      	ldrh	r2, [r7, #22]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e052      	b.n	80046fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800465c:	e04e      	b.n	80046fc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800465e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004662:	2b08      	cmp	r3, #8
 8004664:	d827      	bhi.n	80046b6 <UART_SetConfig+0x44e>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x404>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	08004691 	.word	0x08004691
 8004670:	08004699 	.word	0x08004699
 8004674:	080046a1 	.word	0x080046a1
 8004678:	080046b7 	.word	0x080046b7
 800467c:	080046a7 	.word	0x080046a7
 8004680:	080046b7 	.word	0x080046b7
 8004684:	080046b7 	.word	0x080046b7
 8004688:	080046b7 	.word	0x080046b7
 800468c:	080046af 	.word	0x080046af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fd fe60 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
 8004694:	61f8      	str	r0, [r7, #28]
        break;
 8004696:	e014      	b.n	80046c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004698:	f7fd fe72 	bl	8002380 <HAL_RCC_GetPCLK2Freq>
 800469c:	61f8      	str	r0, [r7, #28]
        break;
 800469e:	e010      	b.n	80046c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a0:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <UART_SetConfig+0x4b0>)
 80046a2:	61fb      	str	r3, [r7, #28]
        break;
 80046a4:	e00d      	b.n	80046c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a6:	f7fd fdbd 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80046aa:	61f8      	str	r0, [r7, #28]
        break;
 80046ac:	e009      	b.n	80046c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b2:	61fb      	str	r3, [r7, #28]
        break;
 80046b4:	e005      	b.n	80046c2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046c0:	bf00      	nop
    }

    if (pclk != 0U)
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d019      	beq.n	80046fc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	085a      	lsrs	r2, r3, #1
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	441a      	add	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	2b0f      	cmp	r3, #15
 80046e0:	d909      	bls.n	80046f6 <UART_SetConfig+0x48e>
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046e8:	d205      	bcs.n	80046f6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	60da      	str	r2, [r3, #12]
 80046f4:	e002      	b.n	80046fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004708:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	; 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004716:	bf00      	nop
 8004718:	00f42400 	.word	0x00f42400

0800471c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d00a      	beq.n	8004746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00a      	beq.n	800478a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00a      	beq.n	80047ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d01a      	beq.n	8004832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800481a:	d10a      	bne.n	8004832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	430a      	orrs	r2, r1
 8004830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	430a      	orrs	r2, r1
 8004852:	605a      	str	r2, [r3, #4]
  }
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b086      	sub	sp, #24
 8004864:	af02      	add	r7, sp, #8
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004870:	f7fc fcb8 	bl	80011e4 <HAL_GetTick>
 8004874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b08      	cmp	r3, #8
 8004882:	d10e      	bne.n	80048a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f82d 	bl	80048f2 <UART_WaitOnFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e023      	b.n	80048ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d10e      	bne.n	80048ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f817 	bl	80048f2 <UART_WaitOnFlagUntilTimeout>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e00d      	b.n	80048ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2220      	movs	r2, #32
 80048d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b09c      	sub	sp, #112	; 0x70
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004902:	e0a5      	b.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	f000 80a1 	beq.w	8004a50 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800490e:	f7fc fc69 	bl	80011e4 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800491a:	429a      	cmp	r2, r3
 800491c:	d302      	bcc.n	8004924 <UART_WaitOnFlagUntilTimeout+0x32>
 800491e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004920:	2b00      	cmp	r3, #0
 8004922:	d13e      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004938:	667b      	str	r3, [r7, #100]	; 0x64
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	461a      	mov	r2, r3
 8004940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004944:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e6      	bne.n	8004924 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	663b      	str	r3, [r7, #96]	; 0x60
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3308      	adds	r3, #8
 8004974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004976:	64ba      	str	r2, [r7, #72]	; 0x48
 8004978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800497c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e5      	bne.n	8004956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e067      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0304 	and.w	r3, r3, #4
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d04f      	beq.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049be:	d147      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	e853 3f00 	ldrex	r3, [r3]
 80049d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049f0:	e841 2300 	strex	r3, r2, [r1]
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1e6      	bne.n	80049ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	3308      	adds	r3, #8
 8004a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f023 0301 	bic.w	r3, r3, #1
 8004a12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3308      	adds	r3, #8
 8004a1a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a1c:	623a      	str	r2, [r7, #32]
 8004a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	69f9      	ldr	r1, [r7, #28]
 8004a22:	6a3a      	ldr	r2, [r7, #32]
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e5      	bne.n	80049fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e010      	b.n	8004a72 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	69da      	ldr	r2, [r3, #28]
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	bf0c      	ite	eq
 8004a60:	2301      	moveq	r3, #1
 8004a62:	2300      	movne	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	461a      	mov	r2, r3
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	f43f af4a 	beq.w	8004904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3770      	adds	r7, #112	; 0x70
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b082      	sub	sp, #8
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	807b      	strh	r3, [r7, #2]
 8004a86:	4613      	mov	r3, r2
 8004a88:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8004a8a:	787a      	ldrb	r2, [r7, #1]
 8004a8c:	887b      	ldrh	r3, [r7, #2]
 8004a8e:	4619      	mov	r1, r3
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7fc fe37 	bl	8001704 <HAL_GPIO_WritePin>
}
 8004a96:	bf00      	nop
 8004a98:	3708      	adds	r7, #8
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b088      	sub	sp, #32
 8004aa2:	af02      	add	r7, sp, #8
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	460b      	mov	r3, r1
 8004aac:	72fb      	strb	r3, [r7, #11]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 8004ab2:	893b      	ldrh	r3, [r7, #8]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ffde 	bl	8004a7a <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8004abe:	200a      	movs	r0, #10
 8004ac0:	f000 f8d2 	bl	8004c68 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 8004ac4:	f107 0217 	add.w	r2, r7, #23
 8004ac8:	f107 010b 	add.w	r1, r7, #11
 8004acc:	230a      	movs	r3, #10
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f7fe f8a9 	bl	8002c2a <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8004ad8:	200a      	movs	r0, #10
 8004ada:	f000 f8c5 	bl	8004c68 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8004ade:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004ae2:	893b      	ldrh	r3, [r7, #8]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff ffc7 	bl	8004a7a <setCSLine>

  return data;
 8004aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3718      	adds	r7, #24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b08c      	sub	sp, #48	; 0x30
 8004afa:	af02      	add	r7, sp, #8
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	4611      	mov	r1, r2
 8004b02:	461a      	mov	r2, r3
 8004b04:	460b      	mov	r3, r1
 8004b06:	80fb      	strh	r3, [r7, #6]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	9301      	str	r3, [sp, #4]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	4613      	mov	r3, r2
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f7ff ffbe 	bl	8004a9e <spiWriteRead>
 8004b22:	4603      	mov	r3, r0
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8004b2a:	200a      	movs	r0, #10
 8004b2c:	f000 f89c 	bl	8004c68 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 8004b30:	88fa      	ldrh	r2, [r7, #6]
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	2301      	movs	r3, #1
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ffac 	bl	8004a9e <spiWriteRead>
 8004b46:	4603      	mov	r3, r0
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 8004b50:	2300      	movs	r3, #0
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	e010      	b.n	8004b78 <getPositionSPI+0x82>
 8004b56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	fa42 f303 	asr.w	r3, r2, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	b2d9      	uxtb	r1, r3
 8004b66:	f107 0210 	add.w	r2, r7, #16
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	460a      	mov	r2, r1
 8004b70:	701a      	strb	r2, [r3, #0]
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	3301      	adds	r3, #1
 8004b76:	623b      	str	r3, [r7, #32]
 8004b78:	6a3b      	ldr	r3, [r7, #32]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	ddeb      	ble.n	8004b56 <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8004b7e:	7ffb      	ldrb	r3, [r7, #31]
 8004b80:	4619      	mov	r1, r3
 8004b82:	7f7a      	ldrb	r2, [r7, #29]
 8004b84:	7efb      	ldrb	r3, [r7, #27]
 8004b86:	4053      	eors	r3, r2
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	7e7b      	ldrb	r3, [r7, #25]
 8004b8c:	4053      	eors	r3, r2
 8004b8e:	b2da      	uxtb	r2, r3
 8004b90:	7dfb      	ldrb	r3, [r7, #23]
 8004b92:	4053      	eors	r3, r2
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	7d7b      	ldrb	r3, [r7, #21]
 8004b98:	4053      	eors	r3, r2
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	4053      	eors	r3, r2
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	7c7b      	ldrb	r3, [r7, #17]
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	4299      	cmp	r1, r3
 8004bb0:	d11e      	bne.n	8004bf0 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 8004bb2:	7fbb      	ldrb	r3, [r7, #30]
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	7f3a      	ldrb	r2, [r7, #28]
 8004bb8:	7ebb      	ldrb	r3, [r7, #26]
 8004bba:	4053      	eors	r3, r2
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	7e3b      	ldrb	r3, [r7, #24]
 8004bc0:	4053      	eors	r3, r2
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	7dbb      	ldrb	r3, [r7, #22]
 8004bc6:	4053      	eors	r3, r2
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	7d3b      	ldrb	r3, [r7, #20]
 8004bcc:	4053      	eors	r3, r2
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	7cbb      	ldrb	r3, [r7, #18]
 8004bd2:	4053      	eors	r3, r2
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	7c3b      	ldrb	r3, [r7, #16]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	4299      	cmp	r1, r3
 8004be4:	d104      	bne.n	8004bf0 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 8004be6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004be8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004bec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bee:	e002      	b.n	8004bf6 <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8004bf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 8004bf6:	797b      	ldrb	r3, [r7, #5]
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	d107      	bne.n	8004c0c <getPositionSPI+0x116>
 8004bfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d002      	beq.n	8004c0c <getPositionSPI+0x116>
 8004c06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8004c0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3728      	adds	r7, #40	; 0x28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <resetAMT22>:
//  delay(timer, 250);
  delay_us_AMT22(250);
}

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b086      	sub	sp, #24
 8004c1a:	af02      	add	r7, sp, #8
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 8004c26:	88fa      	ldrh	r2, [r7, #6]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	2100      	movs	r1, #0
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f7ff ff31 	bl	8004a9e <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f000 f813 	bl	8004c68 <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	9301      	str	r3, [sp, #4]
 8004c48:	2301      	movs	r3, #1
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	2160      	movs	r1, #96	; 0x60
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff ff23 	bl	8004a9e <spiWriteRead>

//  delay(timer, 250);
  delay_us_AMT22(250);
 8004c58:	20fa      	movs	r0, #250	; 0xfa
 8004c5a:	f000 f805 	bl	8004c68 <delay_us_AMT22>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	4603      	mov	r3, r0
 8004c70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <delay_us_AMT22+0x30>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 8004c7a:	bf00      	nop
 8004c7c:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <delay_us_AMT22+0x30>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3f9      	bcc.n	8004c7c <delay_us_AMT22+0x14>
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	200001bc 	.word	0x200001bc

08004c9c <__errno>:
 8004c9c:	4b01      	ldr	r3, [pc, #4]	; (8004ca4 <__errno+0x8>)
 8004c9e:	6818      	ldr	r0, [r3, #0]
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c

08004ca8 <__libc_init_array>:
 8004ca8:	b570      	push	{r4, r5, r6, lr}
 8004caa:	4d0d      	ldr	r5, [pc, #52]	; (8004ce0 <__libc_init_array+0x38>)
 8004cac:	4c0d      	ldr	r4, [pc, #52]	; (8004ce4 <__libc_init_array+0x3c>)
 8004cae:	1b64      	subs	r4, r4, r5
 8004cb0:	10a4      	asrs	r4, r4, #2
 8004cb2:	2600      	movs	r6, #0
 8004cb4:	42a6      	cmp	r6, r4
 8004cb6:	d109      	bne.n	8004ccc <__libc_init_array+0x24>
 8004cb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ce8 <__libc_init_array+0x40>)
 8004cba:	4c0c      	ldr	r4, [pc, #48]	; (8004cec <__libc_init_array+0x44>)
 8004cbc:	f001 f998 	bl	8005ff0 <_init>
 8004cc0:	1b64      	subs	r4, r4, r5
 8004cc2:	10a4      	asrs	r4, r4, #2
 8004cc4:	2600      	movs	r6, #0
 8004cc6:	42a6      	cmp	r6, r4
 8004cc8:	d105      	bne.n	8004cd6 <__libc_init_array+0x2e>
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cd0:	4798      	blx	r3
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7ee      	b.n	8004cb4 <__libc_init_array+0xc>
 8004cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cda:	4798      	blx	r3
 8004cdc:	3601      	adds	r6, #1
 8004cde:	e7f2      	b.n	8004cc6 <__libc_init_array+0x1e>
 8004ce0:	080067a4 	.word	0x080067a4
 8004ce4:	080067a4 	.word	0x080067a4
 8004ce8:	080067a4 	.word	0x080067a4
 8004cec:	080067a8 	.word	0x080067a8

08004cf0 <memset>:
 8004cf0:	4402      	add	r2, r0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d100      	bne.n	8004cfa <memset+0xa>
 8004cf8:	4770      	bx	lr
 8004cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8004cfe:	e7f9      	b.n	8004cf4 <memset+0x4>

08004d00 <_free_r>:
 8004d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d02:	2900      	cmp	r1, #0
 8004d04:	d044      	beq.n	8004d90 <_free_r+0x90>
 8004d06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d0a:	9001      	str	r0, [sp, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f1a1 0404 	sub.w	r4, r1, #4
 8004d12:	bfb8      	it	lt
 8004d14:	18e4      	addlt	r4, r4, r3
 8004d16:	f000 fd97 	bl	8005848 <__malloc_lock>
 8004d1a:	4a1e      	ldr	r2, [pc, #120]	; (8004d94 <_free_r+0x94>)
 8004d1c:	9801      	ldr	r0, [sp, #4]
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	b933      	cbnz	r3, 8004d30 <_free_r+0x30>
 8004d22:	6063      	str	r3, [r4, #4]
 8004d24:	6014      	str	r4, [r2, #0]
 8004d26:	b003      	add	sp, #12
 8004d28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d2c:	f000 bd92 	b.w	8005854 <__malloc_unlock>
 8004d30:	42a3      	cmp	r3, r4
 8004d32:	d908      	bls.n	8004d46 <_free_r+0x46>
 8004d34:	6825      	ldr	r5, [r4, #0]
 8004d36:	1961      	adds	r1, r4, r5
 8004d38:	428b      	cmp	r3, r1
 8004d3a:	bf01      	itttt	eq
 8004d3c:	6819      	ldreq	r1, [r3, #0]
 8004d3e:	685b      	ldreq	r3, [r3, #4]
 8004d40:	1949      	addeq	r1, r1, r5
 8004d42:	6021      	streq	r1, [r4, #0]
 8004d44:	e7ed      	b.n	8004d22 <_free_r+0x22>
 8004d46:	461a      	mov	r2, r3
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b10b      	cbz	r3, 8004d50 <_free_r+0x50>
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	d9fa      	bls.n	8004d46 <_free_r+0x46>
 8004d50:	6811      	ldr	r1, [r2, #0]
 8004d52:	1855      	adds	r5, r2, r1
 8004d54:	42a5      	cmp	r5, r4
 8004d56:	d10b      	bne.n	8004d70 <_free_r+0x70>
 8004d58:	6824      	ldr	r4, [r4, #0]
 8004d5a:	4421      	add	r1, r4
 8004d5c:	1854      	adds	r4, r2, r1
 8004d5e:	42a3      	cmp	r3, r4
 8004d60:	6011      	str	r1, [r2, #0]
 8004d62:	d1e0      	bne.n	8004d26 <_free_r+0x26>
 8004d64:	681c      	ldr	r4, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	6053      	str	r3, [r2, #4]
 8004d6a:	4421      	add	r1, r4
 8004d6c:	6011      	str	r1, [r2, #0]
 8004d6e:	e7da      	b.n	8004d26 <_free_r+0x26>
 8004d70:	d902      	bls.n	8004d78 <_free_r+0x78>
 8004d72:	230c      	movs	r3, #12
 8004d74:	6003      	str	r3, [r0, #0]
 8004d76:	e7d6      	b.n	8004d26 <_free_r+0x26>
 8004d78:	6825      	ldr	r5, [r4, #0]
 8004d7a:	1961      	adds	r1, r4, r5
 8004d7c:	428b      	cmp	r3, r1
 8004d7e:	bf04      	itt	eq
 8004d80:	6819      	ldreq	r1, [r3, #0]
 8004d82:	685b      	ldreq	r3, [r3, #4]
 8004d84:	6063      	str	r3, [r4, #4]
 8004d86:	bf04      	itt	eq
 8004d88:	1949      	addeq	r1, r1, r5
 8004d8a:	6021      	streq	r1, [r4, #0]
 8004d8c:	6054      	str	r4, [r2, #4]
 8004d8e:	e7ca      	b.n	8004d26 <_free_r+0x26>
 8004d90:	b003      	add	sp, #12
 8004d92:	bd30      	pop	{r4, r5, pc}
 8004d94:	200002dc 	.word	0x200002dc

08004d98 <sbrk_aligned>:
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	4e0e      	ldr	r6, [pc, #56]	; (8004dd4 <sbrk_aligned+0x3c>)
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	6831      	ldr	r1, [r6, #0]
 8004da0:	4605      	mov	r5, r0
 8004da2:	b911      	cbnz	r1, 8004daa <sbrk_aligned+0x12>
 8004da4:	f000 f92e 	bl	8005004 <_sbrk_r>
 8004da8:	6030      	str	r0, [r6, #0]
 8004daa:	4621      	mov	r1, r4
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 f929 	bl	8005004 <_sbrk_r>
 8004db2:	1c43      	adds	r3, r0, #1
 8004db4:	d00a      	beq.n	8004dcc <sbrk_aligned+0x34>
 8004db6:	1cc4      	adds	r4, r0, #3
 8004db8:	f024 0403 	bic.w	r4, r4, #3
 8004dbc:	42a0      	cmp	r0, r4
 8004dbe:	d007      	beq.n	8004dd0 <sbrk_aligned+0x38>
 8004dc0:	1a21      	subs	r1, r4, r0
 8004dc2:	4628      	mov	r0, r5
 8004dc4:	f000 f91e 	bl	8005004 <_sbrk_r>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	d101      	bne.n	8004dd0 <sbrk_aligned+0x38>
 8004dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	bd70      	pop	{r4, r5, r6, pc}
 8004dd4:	200002e0 	.word	0x200002e0

08004dd8 <_malloc_r>:
 8004dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ddc:	1ccd      	adds	r5, r1, #3
 8004dde:	f025 0503 	bic.w	r5, r5, #3
 8004de2:	3508      	adds	r5, #8
 8004de4:	2d0c      	cmp	r5, #12
 8004de6:	bf38      	it	cc
 8004de8:	250c      	movcc	r5, #12
 8004dea:	2d00      	cmp	r5, #0
 8004dec:	4607      	mov	r7, r0
 8004dee:	db01      	blt.n	8004df4 <_malloc_r+0x1c>
 8004df0:	42a9      	cmp	r1, r5
 8004df2:	d905      	bls.n	8004e00 <_malloc_r+0x28>
 8004df4:	230c      	movs	r3, #12
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	2600      	movs	r6, #0
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e00:	4e2e      	ldr	r6, [pc, #184]	; (8004ebc <_malloc_r+0xe4>)
 8004e02:	f000 fd21 	bl	8005848 <__malloc_lock>
 8004e06:	6833      	ldr	r3, [r6, #0]
 8004e08:	461c      	mov	r4, r3
 8004e0a:	bb34      	cbnz	r4, 8004e5a <_malloc_r+0x82>
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	4638      	mov	r0, r7
 8004e10:	f7ff ffc2 	bl	8004d98 <sbrk_aligned>
 8004e14:	1c43      	adds	r3, r0, #1
 8004e16:	4604      	mov	r4, r0
 8004e18:	d14d      	bne.n	8004eb6 <_malloc_r+0xde>
 8004e1a:	6834      	ldr	r4, [r6, #0]
 8004e1c:	4626      	mov	r6, r4
 8004e1e:	2e00      	cmp	r6, #0
 8004e20:	d140      	bne.n	8004ea4 <_malloc_r+0xcc>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	4631      	mov	r1, r6
 8004e26:	4638      	mov	r0, r7
 8004e28:	eb04 0803 	add.w	r8, r4, r3
 8004e2c:	f000 f8ea 	bl	8005004 <_sbrk_r>
 8004e30:	4580      	cmp	r8, r0
 8004e32:	d13a      	bne.n	8004eaa <_malloc_r+0xd2>
 8004e34:	6821      	ldr	r1, [r4, #0]
 8004e36:	3503      	adds	r5, #3
 8004e38:	1a6d      	subs	r5, r5, r1
 8004e3a:	f025 0503 	bic.w	r5, r5, #3
 8004e3e:	3508      	adds	r5, #8
 8004e40:	2d0c      	cmp	r5, #12
 8004e42:	bf38      	it	cc
 8004e44:	250c      	movcc	r5, #12
 8004e46:	4629      	mov	r1, r5
 8004e48:	4638      	mov	r0, r7
 8004e4a:	f7ff ffa5 	bl	8004d98 <sbrk_aligned>
 8004e4e:	3001      	adds	r0, #1
 8004e50:	d02b      	beq.n	8004eaa <_malloc_r+0xd2>
 8004e52:	6823      	ldr	r3, [r4, #0]
 8004e54:	442b      	add	r3, r5
 8004e56:	6023      	str	r3, [r4, #0]
 8004e58:	e00e      	b.n	8004e78 <_malloc_r+0xa0>
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	1b52      	subs	r2, r2, r5
 8004e5e:	d41e      	bmi.n	8004e9e <_malloc_r+0xc6>
 8004e60:	2a0b      	cmp	r2, #11
 8004e62:	d916      	bls.n	8004e92 <_malloc_r+0xba>
 8004e64:	1961      	adds	r1, r4, r5
 8004e66:	42a3      	cmp	r3, r4
 8004e68:	6025      	str	r5, [r4, #0]
 8004e6a:	bf18      	it	ne
 8004e6c:	6059      	strne	r1, [r3, #4]
 8004e6e:	6863      	ldr	r3, [r4, #4]
 8004e70:	bf08      	it	eq
 8004e72:	6031      	streq	r1, [r6, #0]
 8004e74:	5162      	str	r2, [r4, r5]
 8004e76:	604b      	str	r3, [r1, #4]
 8004e78:	4638      	mov	r0, r7
 8004e7a:	f104 060b 	add.w	r6, r4, #11
 8004e7e:	f000 fce9 	bl	8005854 <__malloc_unlock>
 8004e82:	f026 0607 	bic.w	r6, r6, #7
 8004e86:	1d23      	adds	r3, r4, #4
 8004e88:	1af2      	subs	r2, r6, r3
 8004e8a:	d0b6      	beq.n	8004dfa <_malloc_r+0x22>
 8004e8c:	1b9b      	subs	r3, r3, r6
 8004e8e:	50a3      	str	r3, [r4, r2]
 8004e90:	e7b3      	b.n	8004dfa <_malloc_r+0x22>
 8004e92:	6862      	ldr	r2, [r4, #4]
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	bf0c      	ite	eq
 8004e98:	6032      	streq	r2, [r6, #0]
 8004e9a:	605a      	strne	r2, [r3, #4]
 8004e9c:	e7ec      	b.n	8004e78 <_malloc_r+0xa0>
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	6864      	ldr	r4, [r4, #4]
 8004ea2:	e7b2      	b.n	8004e0a <_malloc_r+0x32>
 8004ea4:	4634      	mov	r4, r6
 8004ea6:	6876      	ldr	r6, [r6, #4]
 8004ea8:	e7b9      	b.n	8004e1e <_malloc_r+0x46>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	603b      	str	r3, [r7, #0]
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f000 fcd0 	bl	8005854 <__malloc_unlock>
 8004eb4:	e7a1      	b.n	8004dfa <_malloc_r+0x22>
 8004eb6:	6025      	str	r5, [r4, #0]
 8004eb8:	e7de      	b.n	8004e78 <_malloc_r+0xa0>
 8004eba:	bf00      	nop
 8004ebc:	200002dc 	.word	0x200002dc

08004ec0 <_perror_r>:
 8004ec0:	6983      	ldr	r3, [r0, #24]
 8004ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec4:	68c4      	ldr	r4, [r0, #12]
 8004ec6:	4605      	mov	r5, r0
 8004ec8:	460e      	mov	r6, r1
 8004eca:	b90b      	cbnz	r3, 8004ed0 <_perror_r+0x10>
 8004ecc:	f000 fc1c 	bl	8005708 <__sinit>
 8004ed0:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <_perror_r+0x120>)
 8004ed2:	429c      	cmp	r4, r3
 8004ed4:	d132      	bne.n	8004f3c <_perror_r+0x7c>
 8004ed6:	686c      	ldr	r4, [r5, #4]
 8004ed8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004eda:	07d8      	lsls	r0, r3, #31
 8004edc:	d405      	bmi.n	8004eea <_perror_r+0x2a>
 8004ede:	89a3      	ldrh	r3, [r4, #12]
 8004ee0:	0599      	lsls	r1, r3, #22
 8004ee2:	d402      	bmi.n	8004eea <_perror_r+0x2a>
 8004ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ee6:	f000 fcad 	bl	8005844 <__retarget_lock_acquire_recursive>
 8004eea:	4621      	mov	r1, r4
 8004eec:	4628      	mov	r0, r5
 8004eee:	f000 fb39 	bl	8005564 <_fflush_r>
 8004ef2:	bb6e      	cbnz	r6, 8004f50 <_perror_r+0x90>
 8004ef4:	6829      	ldr	r1, [r5, #0]
 8004ef6:	ab01      	add	r3, sp, #4
 8004ef8:	2201      	movs	r2, #1
 8004efa:	4628      	mov	r0, r5
 8004efc:	f000 f892 	bl	8005024 <_strerror_r>
 8004f00:	4607      	mov	r7, r0
 8004f02:	2800      	cmp	r0, #0
 8004f04:	d14f      	bne.n	8004fa6 <_perror_r+0xe6>
 8004f06:	4837      	ldr	r0, [pc, #220]	; (8004fe4 <_perror_r+0x124>)
 8004f08:	4f36      	ldr	r7, [pc, #216]	; (8004fe4 <_perror_r+0x124>)
 8004f0a:	f7fb f961 	bl	80001d0 <strlen>
 8004f0e:	4606      	mov	r6, r0
 8004f10:	b156      	cbz	r6, 8004f28 <_perror_r+0x68>
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 fb62 	bl	80055dc <fileno>
 8004f18:	4633      	mov	r3, r6
 8004f1a:	4601      	mov	r1, r0
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 fa88 	bl	8005434 <_write_r>
 8004f24:	2800      	cmp	r0, #0
 8004f26:	da51      	bge.n	8004fcc <_perror_r+0x10c>
 8004f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f2c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f32:	07d2      	lsls	r2, r2, #31
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	d54c      	bpl.n	8004fd2 <_perror_r+0x112>
 8004f38:	b003      	add	sp, #12
 8004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <_perror_r+0x128>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d101      	bne.n	8004f46 <_perror_r+0x86>
 8004f42:	68ac      	ldr	r4, [r5, #8]
 8004f44:	e7c8      	b.n	8004ed8 <_perror_r+0x18>
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <_perror_r+0x12c>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	bf08      	it	eq
 8004f4c:	68ec      	ldreq	r4, [r5, #12]
 8004f4e:	e7c3      	b.n	8004ed8 <_perror_r+0x18>
 8004f50:	7833      	ldrb	r3, [r6, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ce      	beq.n	8004ef4 <_perror_r+0x34>
 8004f56:	4630      	mov	r0, r6
 8004f58:	f7fb f93a 	bl	80001d0 <strlen>
 8004f5c:	4607      	mov	r7, r0
 8004f5e:	b157      	cbz	r7, 8004f76 <_perror_r+0xb6>
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 fb3b 	bl	80055dc <fileno>
 8004f66:	463b      	mov	r3, r7
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4632      	mov	r2, r6
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f000 fa61 	bl	8005434 <_write_r>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	da14      	bge.n	8004fa0 <_perror_r+0xe0>
 8004f76:	481e      	ldr	r0, [pc, #120]	; (8004ff0 <_perror_r+0x130>)
 8004f78:	4f1d      	ldr	r7, [pc, #116]	; (8004ff0 <_perror_r+0x130>)
 8004f7a:	f7fb f929 	bl	80001d0 <strlen>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	2e00      	cmp	r6, #0
 8004f82:	d0b7      	beq.n	8004ef4 <_perror_r+0x34>
 8004f84:	4620      	mov	r0, r4
 8004f86:	f000 fb29 	bl	80055dc <fileno>
 8004f8a:	4633      	mov	r3, r6
 8004f8c:	4601      	mov	r1, r0
 8004f8e:	463a      	mov	r2, r7
 8004f90:	4628      	mov	r0, r5
 8004f92:	f000 fa4f 	bl	8005434 <_write_r>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	dbac      	blt.n	8004ef4 <_perror_r+0x34>
 8004f9a:	1a36      	subs	r6, r6, r0
 8004f9c:	4407      	add	r7, r0
 8004f9e:	e7ef      	b.n	8004f80 <_perror_r+0xc0>
 8004fa0:	1a3f      	subs	r7, r7, r0
 8004fa2:	4406      	add	r6, r0
 8004fa4:	e7db      	b.n	8004f5e <_perror_r+0x9e>
 8004fa6:	f7fb f913 	bl	80001d0 <strlen>
 8004faa:	4606      	mov	r6, r0
 8004fac:	2e00      	cmp	r6, #0
 8004fae:	d0aa      	beq.n	8004f06 <_perror_r+0x46>
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	f000 fb13 	bl	80055dc <fileno>
 8004fb6:	4633      	mov	r3, r6
 8004fb8:	4601      	mov	r1, r0
 8004fba:	463a      	mov	r2, r7
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f000 fa39 	bl	8005434 <_write_r>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	db9f      	blt.n	8004f06 <_perror_r+0x46>
 8004fc6:	1a36      	subs	r6, r6, r0
 8004fc8:	4407      	add	r7, r0
 8004fca:	e7ef      	b.n	8004fac <_perror_r+0xec>
 8004fcc:	1a36      	subs	r6, r6, r0
 8004fce:	4407      	add	r7, r0
 8004fd0:	e79e      	b.n	8004f10 <_perror_r+0x50>
 8004fd2:	059b      	lsls	r3, r3, #22
 8004fd4:	d4b0      	bmi.n	8004f38 <_perror_r+0x78>
 8004fd6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fd8:	f000 fc35 	bl	8005846 <__retarget_lock_release_recursive>
 8004fdc:	e7ac      	b.n	8004f38 <_perror_r+0x78>
 8004fde:	bf00      	nop
 8004fe0:	08006728 	.word	0x08006728
 8004fe4:	0800606f 	.word	0x0800606f
 8004fe8:	08006748 	.word	0x08006748
 8004fec:	08006708 	.word	0x08006708
 8004ff0:	0800606c 	.word	0x0800606c

08004ff4 <perror>:
 8004ff4:	4b02      	ldr	r3, [pc, #8]	; (8005000 <perror+0xc>)
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	f7ff bf61 	b.w	8004ec0 <_perror_r>
 8004ffe:	bf00      	nop
 8005000:	2000000c 	.word	0x2000000c

08005004 <_sbrk_r>:
 8005004:	b538      	push	{r3, r4, r5, lr}
 8005006:	4d06      	ldr	r5, [pc, #24]	; (8005020 <_sbrk_r+0x1c>)
 8005008:	2300      	movs	r3, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fb fe4a 	bl	8000ca8 <_sbrk>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_sbrk_r+0x1a>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_sbrk_r+0x1a>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	200002e8 	.word	0x200002e8

08005024 <_strerror_r>:
 8005024:	b510      	push	{r4, lr}
 8005026:	4604      	mov	r4, r0
 8005028:	4608      	mov	r0, r1
 800502a:	4611      	mov	r1, r2
 800502c:	288e      	cmp	r0, #142	; 0x8e
 800502e:	f200 8130 	bhi.w	8005292 <_strerror_r+0x26e>
 8005032:	e8df f010 	tbh	[pc, r0, lsl #1]
 8005036:	0139      	.short	0x0139
 8005038:	0092008f 	.word	0x0092008f
 800503c:	00960094 	.word	0x00960094
 8005040:	009a0098 	.word	0x009a0098
 8005044:	009e009c 	.word	0x009e009c
 8005048:	00a400a2 	.word	0x00a400a2
 800504c:	00aa00a8 	.word	0x00aa00a8
 8005050:	00ae00ac 	.word	0x00ae00ac
 8005054:	00b0012e 	.word	0x00b0012e
 8005058:	00b400b2 	.word	0x00b400b2
 800505c:	00b800b6 	.word	0x00b800b6
 8005060:	00c000be 	.word	0x00c000be
 8005064:	00c800c6 	.word	0x00c800c6
 8005068:	00cc00ca 	.word	0x00cc00ca
 800506c:	00d200ce 	.word	0x00d200ce
 8005070:	00d800d6 	.word	0x00d800d6
 8005074:	00dc00da 	.word	0x00dc00da
 8005078:	00e000de 	.word	0x00e000de
 800507c:	00e400e2 	.word	0x00e400e2
 8005080:	012e012e 	.word	0x012e012e
 8005084:	012e012e 	.word	0x012e012e
 8005088:	012e012e 	.word	0x012e012e
 800508c:	012e012e 	.word	0x012e012e
 8005090:	00ec00e8 	.word	0x00ec00e8
 8005094:	012e012e 	.word	0x012e012e
 8005098:	012e012e 	.word	0x012e012e
 800509c:	012e012e 	.word	0x012e012e
 80050a0:	012e012e 	.word	0x012e012e
 80050a4:	012e012e 	.word	0x012e012e
 80050a8:	012e012e 	.word	0x012e012e
 80050ac:	00ee012e 	.word	0x00ee012e
 80050b0:	00f00108 	.word	0x00f00108
 80050b4:	012e00f2 	.word	0x012e00f2
 80050b8:	012e012e 	.word	0x012e012e
 80050bc:	012e00f4 	.word	0x012e00f4
 80050c0:	012e012e 	.word	0x012e012e
 80050c4:	012e00f6 	.word	0x012e00f6
 80050c8:	00fa012e 	.word	0x00fa012e
 80050cc:	012e012e 	.word	0x012e012e
 80050d0:	012e00fc 	.word	0x012e00fc
 80050d4:	012e012e 	.word	0x012e012e
 80050d8:	012e012e 	.word	0x012e012e
 80050dc:	012e012e 	.word	0x012e012e
 80050e0:	012e012e 	.word	0x012e012e
 80050e4:	00fe012e 	.word	0x00fe012e
 80050e8:	0100012e 	.word	0x0100012e
 80050ec:	01040102 	.word	0x01040102
 80050f0:	012e012e 	.word	0x012e012e
 80050f4:	012e0126 	.word	0x012e0126
 80050f8:	012e012e 	.word	0x012e012e
 80050fc:	012e012e 	.word	0x012e012e
 8005100:	012e012e 	.word	0x012e012e
 8005104:	0114012e 	.word	0x0114012e
 8005108:	010a0106 	.word	0x010a0106
 800510c:	010e010c 	.word	0x010e010c
 8005110:	012e0110 	.word	0x012e0110
 8005114:	01160112 	.word	0x01160112
 8005118:	00ea011a 	.word	0x00ea011a
 800511c:	012c00c2 	.word	0x012c00c2
 8005120:	00d000ba 	.word	0x00d000ba
 8005124:	00a000bc 	.word	0x00a000bc
 8005128:	012a00a6 	.word	0x012a00a6
 800512c:	012e00f8 	.word	0x012e00f8
 8005130:	00c40118 	.word	0x00c40118
 8005134:	011c011e 	.word	0x011c011e
 8005138:	012e012e 	.word	0x012e012e
 800513c:	012e012e 	.word	0x012e012e
 8005140:	00d4012e 	.word	0x00d4012e
 8005144:	012e012e 	.word	0x012e012e
 8005148:	00e6012e 	.word	0x00e6012e
 800514c:	01200128 	.word	0x01200128
 8005150:	01240122 	.word	0x01240122
 8005154:	4b55      	ldr	r3, [pc, #340]	; (80052ac <_strerror_r+0x288>)
 8005156:	4618      	mov	r0, r3
 8005158:	bd10      	pop	{r4, pc}
 800515a:	4b55      	ldr	r3, [pc, #340]	; (80052b0 <_strerror_r+0x28c>)
 800515c:	e7fb      	b.n	8005156 <_strerror_r+0x132>
 800515e:	4b55      	ldr	r3, [pc, #340]	; (80052b4 <_strerror_r+0x290>)
 8005160:	e7f9      	b.n	8005156 <_strerror_r+0x132>
 8005162:	4b55      	ldr	r3, [pc, #340]	; (80052b8 <_strerror_r+0x294>)
 8005164:	e7f7      	b.n	8005156 <_strerror_r+0x132>
 8005166:	4b55      	ldr	r3, [pc, #340]	; (80052bc <_strerror_r+0x298>)
 8005168:	e7f5      	b.n	8005156 <_strerror_r+0x132>
 800516a:	4b55      	ldr	r3, [pc, #340]	; (80052c0 <_strerror_r+0x29c>)
 800516c:	e7f3      	b.n	8005156 <_strerror_r+0x132>
 800516e:	4b55      	ldr	r3, [pc, #340]	; (80052c4 <_strerror_r+0x2a0>)
 8005170:	e7f1      	b.n	8005156 <_strerror_r+0x132>
 8005172:	4b55      	ldr	r3, [pc, #340]	; (80052c8 <_strerror_r+0x2a4>)
 8005174:	e7ef      	b.n	8005156 <_strerror_r+0x132>
 8005176:	4b55      	ldr	r3, [pc, #340]	; (80052cc <_strerror_r+0x2a8>)
 8005178:	e7ed      	b.n	8005156 <_strerror_r+0x132>
 800517a:	4b55      	ldr	r3, [pc, #340]	; (80052d0 <_strerror_r+0x2ac>)
 800517c:	e7eb      	b.n	8005156 <_strerror_r+0x132>
 800517e:	4b55      	ldr	r3, [pc, #340]	; (80052d4 <_strerror_r+0x2b0>)
 8005180:	e7e9      	b.n	8005156 <_strerror_r+0x132>
 8005182:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <_strerror_r+0x2b4>)
 8005184:	e7e7      	b.n	8005156 <_strerror_r+0x132>
 8005186:	4b55      	ldr	r3, [pc, #340]	; (80052dc <_strerror_r+0x2b8>)
 8005188:	e7e5      	b.n	8005156 <_strerror_r+0x132>
 800518a:	4b55      	ldr	r3, [pc, #340]	; (80052e0 <_strerror_r+0x2bc>)
 800518c:	e7e3      	b.n	8005156 <_strerror_r+0x132>
 800518e:	4b55      	ldr	r3, [pc, #340]	; (80052e4 <_strerror_r+0x2c0>)
 8005190:	e7e1      	b.n	8005156 <_strerror_r+0x132>
 8005192:	4b55      	ldr	r3, [pc, #340]	; (80052e8 <_strerror_r+0x2c4>)
 8005194:	e7df      	b.n	8005156 <_strerror_r+0x132>
 8005196:	4b55      	ldr	r3, [pc, #340]	; (80052ec <_strerror_r+0x2c8>)
 8005198:	e7dd      	b.n	8005156 <_strerror_r+0x132>
 800519a:	4b55      	ldr	r3, [pc, #340]	; (80052f0 <_strerror_r+0x2cc>)
 800519c:	e7db      	b.n	8005156 <_strerror_r+0x132>
 800519e:	4b55      	ldr	r3, [pc, #340]	; (80052f4 <_strerror_r+0x2d0>)
 80051a0:	e7d9      	b.n	8005156 <_strerror_r+0x132>
 80051a2:	4b55      	ldr	r3, [pc, #340]	; (80052f8 <_strerror_r+0x2d4>)
 80051a4:	e7d7      	b.n	8005156 <_strerror_r+0x132>
 80051a6:	4b55      	ldr	r3, [pc, #340]	; (80052fc <_strerror_r+0x2d8>)
 80051a8:	e7d5      	b.n	8005156 <_strerror_r+0x132>
 80051aa:	4b55      	ldr	r3, [pc, #340]	; (8005300 <_strerror_r+0x2dc>)
 80051ac:	e7d3      	b.n	8005156 <_strerror_r+0x132>
 80051ae:	4b55      	ldr	r3, [pc, #340]	; (8005304 <_strerror_r+0x2e0>)
 80051b0:	e7d1      	b.n	8005156 <_strerror_r+0x132>
 80051b2:	4b55      	ldr	r3, [pc, #340]	; (8005308 <_strerror_r+0x2e4>)
 80051b4:	e7cf      	b.n	8005156 <_strerror_r+0x132>
 80051b6:	4b55      	ldr	r3, [pc, #340]	; (800530c <_strerror_r+0x2e8>)
 80051b8:	e7cd      	b.n	8005156 <_strerror_r+0x132>
 80051ba:	4b55      	ldr	r3, [pc, #340]	; (8005310 <_strerror_r+0x2ec>)
 80051bc:	e7cb      	b.n	8005156 <_strerror_r+0x132>
 80051be:	4b55      	ldr	r3, [pc, #340]	; (8005314 <_strerror_r+0x2f0>)
 80051c0:	e7c9      	b.n	8005156 <_strerror_r+0x132>
 80051c2:	4b55      	ldr	r3, [pc, #340]	; (8005318 <_strerror_r+0x2f4>)
 80051c4:	e7c7      	b.n	8005156 <_strerror_r+0x132>
 80051c6:	4b55      	ldr	r3, [pc, #340]	; (800531c <_strerror_r+0x2f8>)
 80051c8:	e7c5      	b.n	8005156 <_strerror_r+0x132>
 80051ca:	4b55      	ldr	r3, [pc, #340]	; (8005320 <_strerror_r+0x2fc>)
 80051cc:	e7c3      	b.n	8005156 <_strerror_r+0x132>
 80051ce:	4b55      	ldr	r3, [pc, #340]	; (8005324 <_strerror_r+0x300>)
 80051d0:	e7c1      	b.n	8005156 <_strerror_r+0x132>
 80051d2:	4b55      	ldr	r3, [pc, #340]	; (8005328 <_strerror_r+0x304>)
 80051d4:	e7bf      	b.n	8005156 <_strerror_r+0x132>
 80051d6:	4b55      	ldr	r3, [pc, #340]	; (800532c <_strerror_r+0x308>)
 80051d8:	e7bd      	b.n	8005156 <_strerror_r+0x132>
 80051da:	4b55      	ldr	r3, [pc, #340]	; (8005330 <_strerror_r+0x30c>)
 80051dc:	e7bb      	b.n	8005156 <_strerror_r+0x132>
 80051de:	4b55      	ldr	r3, [pc, #340]	; (8005334 <_strerror_r+0x310>)
 80051e0:	e7b9      	b.n	8005156 <_strerror_r+0x132>
 80051e2:	4b55      	ldr	r3, [pc, #340]	; (8005338 <_strerror_r+0x314>)
 80051e4:	e7b7      	b.n	8005156 <_strerror_r+0x132>
 80051e6:	4b55      	ldr	r3, [pc, #340]	; (800533c <_strerror_r+0x318>)
 80051e8:	e7b5      	b.n	8005156 <_strerror_r+0x132>
 80051ea:	4b55      	ldr	r3, [pc, #340]	; (8005340 <_strerror_r+0x31c>)
 80051ec:	e7b3      	b.n	8005156 <_strerror_r+0x132>
 80051ee:	4b55      	ldr	r3, [pc, #340]	; (8005344 <_strerror_r+0x320>)
 80051f0:	e7b1      	b.n	8005156 <_strerror_r+0x132>
 80051f2:	4b55      	ldr	r3, [pc, #340]	; (8005348 <_strerror_r+0x324>)
 80051f4:	e7af      	b.n	8005156 <_strerror_r+0x132>
 80051f6:	4b55      	ldr	r3, [pc, #340]	; (800534c <_strerror_r+0x328>)
 80051f8:	e7ad      	b.n	8005156 <_strerror_r+0x132>
 80051fa:	4b55      	ldr	r3, [pc, #340]	; (8005350 <_strerror_r+0x32c>)
 80051fc:	e7ab      	b.n	8005156 <_strerror_r+0x132>
 80051fe:	4b55      	ldr	r3, [pc, #340]	; (8005354 <_strerror_r+0x330>)
 8005200:	e7a9      	b.n	8005156 <_strerror_r+0x132>
 8005202:	4b55      	ldr	r3, [pc, #340]	; (8005358 <_strerror_r+0x334>)
 8005204:	e7a7      	b.n	8005156 <_strerror_r+0x132>
 8005206:	4b55      	ldr	r3, [pc, #340]	; (800535c <_strerror_r+0x338>)
 8005208:	e7a5      	b.n	8005156 <_strerror_r+0x132>
 800520a:	4b55      	ldr	r3, [pc, #340]	; (8005360 <_strerror_r+0x33c>)
 800520c:	e7a3      	b.n	8005156 <_strerror_r+0x132>
 800520e:	4b55      	ldr	r3, [pc, #340]	; (8005364 <_strerror_r+0x340>)
 8005210:	e7a1      	b.n	8005156 <_strerror_r+0x132>
 8005212:	4b55      	ldr	r3, [pc, #340]	; (8005368 <_strerror_r+0x344>)
 8005214:	e79f      	b.n	8005156 <_strerror_r+0x132>
 8005216:	4b55      	ldr	r3, [pc, #340]	; (800536c <_strerror_r+0x348>)
 8005218:	e79d      	b.n	8005156 <_strerror_r+0x132>
 800521a:	4b55      	ldr	r3, [pc, #340]	; (8005370 <_strerror_r+0x34c>)
 800521c:	e79b      	b.n	8005156 <_strerror_r+0x132>
 800521e:	4b55      	ldr	r3, [pc, #340]	; (8005374 <_strerror_r+0x350>)
 8005220:	e799      	b.n	8005156 <_strerror_r+0x132>
 8005222:	4b55      	ldr	r3, [pc, #340]	; (8005378 <_strerror_r+0x354>)
 8005224:	e797      	b.n	8005156 <_strerror_r+0x132>
 8005226:	4b55      	ldr	r3, [pc, #340]	; (800537c <_strerror_r+0x358>)
 8005228:	e795      	b.n	8005156 <_strerror_r+0x132>
 800522a:	4b55      	ldr	r3, [pc, #340]	; (8005380 <_strerror_r+0x35c>)
 800522c:	e793      	b.n	8005156 <_strerror_r+0x132>
 800522e:	4b55      	ldr	r3, [pc, #340]	; (8005384 <_strerror_r+0x360>)
 8005230:	e791      	b.n	8005156 <_strerror_r+0x132>
 8005232:	4b55      	ldr	r3, [pc, #340]	; (8005388 <_strerror_r+0x364>)
 8005234:	e78f      	b.n	8005156 <_strerror_r+0x132>
 8005236:	4b55      	ldr	r3, [pc, #340]	; (800538c <_strerror_r+0x368>)
 8005238:	e78d      	b.n	8005156 <_strerror_r+0x132>
 800523a:	4b55      	ldr	r3, [pc, #340]	; (8005390 <_strerror_r+0x36c>)
 800523c:	e78b      	b.n	8005156 <_strerror_r+0x132>
 800523e:	4b55      	ldr	r3, [pc, #340]	; (8005394 <_strerror_r+0x370>)
 8005240:	e789      	b.n	8005156 <_strerror_r+0x132>
 8005242:	4b55      	ldr	r3, [pc, #340]	; (8005398 <_strerror_r+0x374>)
 8005244:	e787      	b.n	8005156 <_strerror_r+0x132>
 8005246:	4b55      	ldr	r3, [pc, #340]	; (800539c <_strerror_r+0x378>)
 8005248:	e785      	b.n	8005156 <_strerror_r+0x132>
 800524a:	4b55      	ldr	r3, [pc, #340]	; (80053a0 <_strerror_r+0x37c>)
 800524c:	e783      	b.n	8005156 <_strerror_r+0x132>
 800524e:	4b55      	ldr	r3, [pc, #340]	; (80053a4 <_strerror_r+0x380>)
 8005250:	e781      	b.n	8005156 <_strerror_r+0x132>
 8005252:	4b55      	ldr	r3, [pc, #340]	; (80053a8 <_strerror_r+0x384>)
 8005254:	e77f      	b.n	8005156 <_strerror_r+0x132>
 8005256:	4b55      	ldr	r3, [pc, #340]	; (80053ac <_strerror_r+0x388>)
 8005258:	e77d      	b.n	8005156 <_strerror_r+0x132>
 800525a:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <_strerror_r+0x38c>)
 800525c:	e77b      	b.n	8005156 <_strerror_r+0x132>
 800525e:	4b55      	ldr	r3, [pc, #340]	; (80053b4 <_strerror_r+0x390>)
 8005260:	e779      	b.n	8005156 <_strerror_r+0x132>
 8005262:	4b55      	ldr	r3, [pc, #340]	; (80053b8 <_strerror_r+0x394>)
 8005264:	e777      	b.n	8005156 <_strerror_r+0x132>
 8005266:	4b55      	ldr	r3, [pc, #340]	; (80053bc <_strerror_r+0x398>)
 8005268:	e775      	b.n	8005156 <_strerror_r+0x132>
 800526a:	4b55      	ldr	r3, [pc, #340]	; (80053c0 <_strerror_r+0x39c>)
 800526c:	e773      	b.n	8005156 <_strerror_r+0x132>
 800526e:	4b55      	ldr	r3, [pc, #340]	; (80053c4 <_strerror_r+0x3a0>)
 8005270:	e771      	b.n	8005156 <_strerror_r+0x132>
 8005272:	4b55      	ldr	r3, [pc, #340]	; (80053c8 <_strerror_r+0x3a4>)
 8005274:	e76f      	b.n	8005156 <_strerror_r+0x132>
 8005276:	4b55      	ldr	r3, [pc, #340]	; (80053cc <_strerror_r+0x3a8>)
 8005278:	e76d      	b.n	8005156 <_strerror_r+0x132>
 800527a:	4b55      	ldr	r3, [pc, #340]	; (80053d0 <_strerror_r+0x3ac>)
 800527c:	e76b      	b.n	8005156 <_strerror_r+0x132>
 800527e:	4b55      	ldr	r3, [pc, #340]	; (80053d4 <_strerror_r+0x3b0>)
 8005280:	e769      	b.n	8005156 <_strerror_r+0x132>
 8005282:	4b55      	ldr	r3, [pc, #340]	; (80053d8 <_strerror_r+0x3b4>)
 8005284:	e767      	b.n	8005156 <_strerror_r+0x132>
 8005286:	4b55      	ldr	r3, [pc, #340]	; (80053dc <_strerror_r+0x3b8>)
 8005288:	e765      	b.n	8005156 <_strerror_r+0x132>
 800528a:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <_strerror_r+0x3bc>)
 800528c:	e763      	b.n	8005156 <_strerror_r+0x132>
 800528e:	4b55      	ldr	r3, [pc, #340]	; (80053e4 <_strerror_r+0x3c0>)
 8005290:	e761      	b.n	8005156 <_strerror_r+0x132>
 8005292:	2b00      	cmp	r3, #0
 8005294:	bf14      	ite	ne
 8005296:	461a      	movne	r2, r3
 8005298:	4622      	moveq	r2, r4
 800529a:	f000 f8a9 	bl	80053f0 <_user_strerror>
 800529e:	4b52      	ldr	r3, [pc, #328]	; (80053e8 <_strerror_r+0x3c4>)
 80052a0:	2800      	cmp	r0, #0
 80052a2:	bf18      	it	ne
 80052a4:	4603      	movne	r3, r0
 80052a6:	e756      	b.n	8005156 <_strerror_r+0x132>
 80052a8:	4b50      	ldr	r3, [pc, #320]	; (80053ec <_strerror_r+0x3c8>)
 80052aa:	e754      	b.n	8005156 <_strerror_r+0x132>
 80052ac:	08006071 	.word	0x08006071
 80052b0:	0800607b 	.word	0x0800607b
 80052b4:	08006095 	.word	0x08006095
 80052b8:	080060a5 	.word	0x080060a5
 80052bc:	080060bd 	.word	0x080060bd
 80052c0:	080060c7 	.word	0x080060c7
 80052c4:	080060e1 	.word	0x080060e1
 80052c8:	080060f3 	.word	0x080060f3
 80052cc:	08006105 	.word	0x08006105
 80052d0:	0800611e 	.word	0x0800611e
 80052d4:	0800612e 	.word	0x0800612e
 80052d8:	0800613a 	.word	0x0800613a
 80052dc:	08006157 	.word	0x08006157
 80052e0:	08006169 	.word	0x08006169
 80052e4:	0800617a 	.word	0x0800617a
 80052e8:	0800618c 	.word	0x0800618c
 80052ec:	08006198 	.word	0x08006198
 80052f0:	080061b0 	.word	0x080061b0
 80052f4:	080061bc 	.word	0x080061bc
 80052f8:	080061ce 	.word	0x080061ce
 80052fc:	080061dd 	.word	0x080061dd
 8005300:	080061ed 	.word	0x080061ed
 8005304:	080061fa 	.word	0x080061fa
 8005308:	08006219 	.word	0x08006219
 800530c:	08006228 	.word	0x08006228
 8005310:	08006239 	.word	0x08006239
 8005314:	0800625d 	.word	0x0800625d
 8005318:	0800627b 	.word	0x0800627b
 800531c:	08006299 	.word	0x08006299
 8005320:	080062b9 	.word	0x080062b9
 8005324:	080062d0 	.word	0x080062d0
 8005328:	080062df 	.word	0x080062df
 800532c:	080062ee 	.word	0x080062ee
 8005330:	08006302 	.word	0x08006302
 8005334:	0800631a 	.word	0x0800631a
 8005338:	08006328 	.word	0x08006328
 800533c:	08006335 	.word	0x08006335
 8005340:	0800634b 	.word	0x0800634b
 8005344:	0800635a 	.word	0x0800635a
 8005348:	08006366 	.word	0x08006366
 800534c:	08006395 	.word	0x08006395
 8005350:	080063a6 	.word	0x080063a6
 8005354:	080063c1 	.word	0x080063c1
 8005358:	080063d4 	.word	0x080063d4
 800535c:	080063ea 	.word	0x080063ea
 8005360:	080063f3 	.word	0x080063f3
 8005364:	0800640a 	.word	0x0800640a
 8005368:	08006412 	.word	0x08006412
 800536c:	0800641f 	.word	0x0800641f
 8005370:	08006434 	.word	0x08006434
 8005374:	08006448 	.word	0x08006448
 8005378:	08006460 	.word	0x08006460
 800537c:	0800646f 	.word	0x0800646f
 8005380:	08006480 	.word	0x08006480
 8005384:	08006493 	.word	0x08006493
 8005388:	0800649f 	.word	0x0800649f
 800538c:	080064b8 	.word	0x080064b8
 8005390:	080064cc 	.word	0x080064cc
 8005394:	080064e7 	.word	0x080064e7
 8005398:	080064ff 	.word	0x080064ff
 800539c:	08006519 	.word	0x08006519
 80053a0:	08006521 	.word	0x08006521
 80053a4:	08006551 	.word	0x08006551
 80053a8:	08006570 	.word	0x08006570
 80053ac:	0800658f 	.word	0x0800658f
 80053b0:	080065a6 	.word	0x080065a6
 80053b4:	080065b9 	.word	0x080065b9
 80053b8:	080065d2 	.word	0x080065d2
 80053bc:	080065e9 	.word	0x080065e9
 80053c0:	080065ff 	.word	0x080065ff
 80053c4:	08006620 	.word	0x08006620
 80053c8:	08006638 	.word	0x08006638
 80053cc:	08006654 	.word	0x08006654
 80053d0:	08006667 	.word	0x08006667
 80053d4:	0800667d 	.word	0x0800667d
 80053d8:	08006691 	.word	0x08006691
 80053dc:	080066b3 	.word	0x080066b3
 80053e0:	080066d9 	.word	0x080066d9
 80053e4:	080066ea 	.word	0x080066ea
 80053e8:	08006070 	.word	0x08006070
 80053ec:	080066ff 	.word	0x080066ff

080053f0 <_user_strerror>:
 80053f0:	2000      	movs	r0, #0
 80053f2:	4770      	bx	lr

080053f4 <_vsiprintf_r>:
 80053f4:	b500      	push	{lr}
 80053f6:	b09b      	sub	sp, #108	; 0x6c
 80053f8:	9100      	str	r1, [sp, #0]
 80053fa:	9104      	str	r1, [sp, #16]
 80053fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005400:	9105      	str	r1, [sp, #20]
 8005402:	9102      	str	r1, [sp, #8]
 8005404:	4905      	ldr	r1, [pc, #20]	; (800541c <_vsiprintf_r+0x28>)
 8005406:	9103      	str	r1, [sp, #12]
 8005408:	4669      	mov	r1, sp
 800540a:	f000 fa85 	bl	8005918 <_svfiprintf_r>
 800540e:	9b00      	ldr	r3, [sp, #0]
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	b01b      	add	sp, #108	; 0x6c
 8005416:	f85d fb04 	ldr.w	pc, [sp], #4
 800541a:	bf00      	nop
 800541c:	ffff0208 	.word	0xffff0208

08005420 <vsiprintf>:
 8005420:	4613      	mov	r3, r2
 8005422:	460a      	mov	r2, r1
 8005424:	4601      	mov	r1, r0
 8005426:	4802      	ldr	r0, [pc, #8]	; (8005430 <vsiprintf+0x10>)
 8005428:	6800      	ldr	r0, [r0, #0]
 800542a:	f7ff bfe3 	b.w	80053f4 <_vsiprintf_r>
 800542e:	bf00      	nop
 8005430:	2000000c 	.word	0x2000000c

08005434 <_write_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	; (8005454 <_write_r+0x20>)
 8005438:	4604      	mov	r4, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fb fbfb 	bl	8000c3e <_write>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_write_r+0x1e>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_write_r+0x1e>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200002e8 	.word	0x200002e8

08005458 <__sflush_r>:
 8005458:	898a      	ldrh	r2, [r1, #12]
 800545a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545e:	4605      	mov	r5, r0
 8005460:	0710      	lsls	r0, r2, #28
 8005462:	460c      	mov	r4, r1
 8005464:	d458      	bmi.n	8005518 <__sflush_r+0xc0>
 8005466:	684b      	ldr	r3, [r1, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	dc05      	bgt.n	8005478 <__sflush_r+0x20>
 800546c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	dc02      	bgt.n	8005478 <__sflush_r+0x20>
 8005472:	2000      	movs	r0, #0
 8005474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005478:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800547a:	2e00      	cmp	r6, #0
 800547c:	d0f9      	beq.n	8005472 <__sflush_r+0x1a>
 800547e:	2300      	movs	r3, #0
 8005480:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005484:	682f      	ldr	r7, [r5, #0]
 8005486:	602b      	str	r3, [r5, #0]
 8005488:	d032      	beq.n	80054f0 <__sflush_r+0x98>
 800548a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800548c:	89a3      	ldrh	r3, [r4, #12]
 800548e:	075a      	lsls	r2, r3, #29
 8005490:	d505      	bpl.n	800549e <__sflush_r+0x46>
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	1ac0      	subs	r0, r0, r3
 8005496:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005498:	b10b      	cbz	r3, 800549e <__sflush_r+0x46>
 800549a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800549c:	1ac0      	subs	r0, r0, r3
 800549e:	2300      	movs	r3, #0
 80054a0:	4602      	mov	r2, r0
 80054a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054a4:	6a21      	ldr	r1, [r4, #32]
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b0      	blx	r6
 80054aa:	1c43      	adds	r3, r0, #1
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	d106      	bne.n	80054be <__sflush_r+0x66>
 80054b0:	6829      	ldr	r1, [r5, #0]
 80054b2:	291d      	cmp	r1, #29
 80054b4:	d82c      	bhi.n	8005510 <__sflush_r+0xb8>
 80054b6:	4a2a      	ldr	r2, [pc, #168]	; (8005560 <__sflush_r+0x108>)
 80054b8:	40ca      	lsrs	r2, r1
 80054ba:	07d6      	lsls	r6, r2, #31
 80054bc:	d528      	bpl.n	8005510 <__sflush_r+0xb8>
 80054be:	2200      	movs	r2, #0
 80054c0:	6062      	str	r2, [r4, #4]
 80054c2:	04d9      	lsls	r1, r3, #19
 80054c4:	6922      	ldr	r2, [r4, #16]
 80054c6:	6022      	str	r2, [r4, #0]
 80054c8:	d504      	bpl.n	80054d4 <__sflush_r+0x7c>
 80054ca:	1c42      	adds	r2, r0, #1
 80054cc:	d101      	bne.n	80054d2 <__sflush_r+0x7a>
 80054ce:	682b      	ldr	r3, [r5, #0]
 80054d0:	b903      	cbnz	r3, 80054d4 <__sflush_r+0x7c>
 80054d2:	6560      	str	r0, [r4, #84]	; 0x54
 80054d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054d6:	602f      	str	r7, [r5, #0]
 80054d8:	2900      	cmp	r1, #0
 80054da:	d0ca      	beq.n	8005472 <__sflush_r+0x1a>
 80054dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80054e0:	4299      	cmp	r1, r3
 80054e2:	d002      	beq.n	80054ea <__sflush_r+0x92>
 80054e4:	4628      	mov	r0, r5
 80054e6:	f7ff fc0b 	bl	8004d00 <_free_r>
 80054ea:	2000      	movs	r0, #0
 80054ec:	6360      	str	r0, [r4, #52]	; 0x34
 80054ee:	e7c1      	b.n	8005474 <__sflush_r+0x1c>
 80054f0:	6a21      	ldr	r1, [r4, #32]
 80054f2:	2301      	movs	r3, #1
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b0      	blx	r6
 80054f8:	1c41      	adds	r1, r0, #1
 80054fa:	d1c7      	bne.n	800548c <__sflush_r+0x34>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d0c4      	beq.n	800548c <__sflush_r+0x34>
 8005502:	2b1d      	cmp	r3, #29
 8005504:	d001      	beq.n	800550a <__sflush_r+0xb2>
 8005506:	2b16      	cmp	r3, #22
 8005508:	d101      	bne.n	800550e <__sflush_r+0xb6>
 800550a:	602f      	str	r7, [r5, #0]
 800550c:	e7b1      	b.n	8005472 <__sflush_r+0x1a>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005514:	81a3      	strh	r3, [r4, #12]
 8005516:	e7ad      	b.n	8005474 <__sflush_r+0x1c>
 8005518:	690f      	ldr	r7, [r1, #16]
 800551a:	2f00      	cmp	r7, #0
 800551c:	d0a9      	beq.n	8005472 <__sflush_r+0x1a>
 800551e:	0793      	lsls	r3, r2, #30
 8005520:	680e      	ldr	r6, [r1, #0]
 8005522:	bf08      	it	eq
 8005524:	694b      	ldreq	r3, [r1, #20]
 8005526:	600f      	str	r7, [r1, #0]
 8005528:	bf18      	it	ne
 800552a:	2300      	movne	r3, #0
 800552c:	eba6 0807 	sub.w	r8, r6, r7
 8005530:	608b      	str	r3, [r1, #8]
 8005532:	f1b8 0f00 	cmp.w	r8, #0
 8005536:	dd9c      	ble.n	8005472 <__sflush_r+0x1a>
 8005538:	6a21      	ldr	r1, [r4, #32]
 800553a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800553c:	4643      	mov	r3, r8
 800553e:	463a      	mov	r2, r7
 8005540:	4628      	mov	r0, r5
 8005542:	47b0      	blx	r6
 8005544:	2800      	cmp	r0, #0
 8005546:	dc06      	bgt.n	8005556 <__sflush_r+0xfe>
 8005548:	89a3      	ldrh	r3, [r4, #12]
 800554a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554e:	81a3      	strh	r3, [r4, #12]
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	e78e      	b.n	8005474 <__sflush_r+0x1c>
 8005556:	4407      	add	r7, r0
 8005558:	eba8 0800 	sub.w	r8, r8, r0
 800555c:	e7e9      	b.n	8005532 <__sflush_r+0xda>
 800555e:	bf00      	nop
 8005560:	20400001 	.word	0x20400001

08005564 <_fflush_r>:
 8005564:	b538      	push	{r3, r4, r5, lr}
 8005566:	690b      	ldr	r3, [r1, #16]
 8005568:	4605      	mov	r5, r0
 800556a:	460c      	mov	r4, r1
 800556c:	b913      	cbnz	r3, 8005574 <_fflush_r+0x10>
 800556e:	2500      	movs	r5, #0
 8005570:	4628      	mov	r0, r5
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	b118      	cbz	r0, 800557e <_fflush_r+0x1a>
 8005576:	6983      	ldr	r3, [r0, #24]
 8005578:	b90b      	cbnz	r3, 800557e <_fflush_r+0x1a>
 800557a:	f000 f8c5 	bl	8005708 <__sinit>
 800557e:	4b14      	ldr	r3, [pc, #80]	; (80055d0 <_fflush_r+0x6c>)
 8005580:	429c      	cmp	r4, r3
 8005582:	d11b      	bne.n	80055bc <_fflush_r+0x58>
 8005584:	686c      	ldr	r4, [r5, #4]
 8005586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0ef      	beq.n	800556e <_fflush_r+0xa>
 800558e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005590:	07d0      	lsls	r0, r2, #31
 8005592:	d404      	bmi.n	800559e <_fflush_r+0x3a>
 8005594:	0599      	lsls	r1, r3, #22
 8005596:	d402      	bmi.n	800559e <_fflush_r+0x3a>
 8005598:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800559a:	f000 f953 	bl	8005844 <__retarget_lock_acquire_recursive>
 800559e:	4628      	mov	r0, r5
 80055a0:	4621      	mov	r1, r4
 80055a2:	f7ff ff59 	bl	8005458 <__sflush_r>
 80055a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055a8:	07da      	lsls	r2, r3, #31
 80055aa:	4605      	mov	r5, r0
 80055ac:	d4e0      	bmi.n	8005570 <_fflush_r+0xc>
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	059b      	lsls	r3, r3, #22
 80055b2:	d4dd      	bmi.n	8005570 <_fflush_r+0xc>
 80055b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055b6:	f000 f946 	bl	8005846 <__retarget_lock_release_recursive>
 80055ba:	e7d9      	b.n	8005570 <_fflush_r+0xc>
 80055bc:	4b05      	ldr	r3, [pc, #20]	; (80055d4 <_fflush_r+0x70>)
 80055be:	429c      	cmp	r4, r3
 80055c0:	d101      	bne.n	80055c6 <_fflush_r+0x62>
 80055c2:	68ac      	ldr	r4, [r5, #8]
 80055c4:	e7df      	b.n	8005586 <_fflush_r+0x22>
 80055c6:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <_fflush_r+0x74>)
 80055c8:	429c      	cmp	r4, r3
 80055ca:	bf08      	it	eq
 80055cc:	68ec      	ldreq	r4, [r5, #12]
 80055ce:	e7da      	b.n	8005586 <_fflush_r+0x22>
 80055d0:	08006728 	.word	0x08006728
 80055d4:	08006748 	.word	0x08006748
 80055d8:	08006708 	.word	0x08006708

080055dc <fileno>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	4e1a      	ldr	r6, [pc, #104]	; (8005648 <fileno+0x6c>)
 80055e0:	6835      	ldr	r5, [r6, #0]
 80055e2:	4604      	mov	r4, r0
 80055e4:	b125      	cbz	r5, 80055f0 <fileno+0x14>
 80055e6:	69ab      	ldr	r3, [r5, #24]
 80055e8:	b913      	cbnz	r3, 80055f0 <fileno+0x14>
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 f88c 	bl	8005708 <__sinit>
 80055f0:	4b16      	ldr	r3, [pc, #88]	; (800564c <fileno+0x70>)
 80055f2:	429c      	cmp	r4, r3
 80055f4:	d118      	bne.n	8005628 <fileno+0x4c>
 80055f6:	686c      	ldr	r4, [r5, #4]
 80055f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055fa:	07d8      	lsls	r0, r3, #31
 80055fc:	d405      	bmi.n	800560a <fileno+0x2e>
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	0599      	lsls	r1, r3, #22
 8005602:	d402      	bmi.n	800560a <fileno+0x2e>
 8005604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005606:	f000 f91d 	bl	8005844 <__retarget_lock_acquire_recursive>
 800560a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560e:	b1ab      	cbz	r3, 800563c <fileno+0x60>
 8005610:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8005614:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005616:	07d2      	lsls	r2, r2, #31
 8005618:	d404      	bmi.n	8005624 <fileno+0x48>
 800561a:	059b      	lsls	r3, r3, #22
 800561c:	d402      	bmi.n	8005624 <fileno+0x48>
 800561e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005620:	f000 f911 	bl	8005846 <__retarget_lock_release_recursive>
 8005624:	4628      	mov	r0, r5
 8005626:	bd70      	pop	{r4, r5, r6, pc}
 8005628:	4b09      	ldr	r3, [pc, #36]	; (8005650 <fileno+0x74>)
 800562a:	429c      	cmp	r4, r3
 800562c:	d101      	bne.n	8005632 <fileno+0x56>
 800562e:	68ac      	ldr	r4, [r5, #8]
 8005630:	e7e2      	b.n	80055f8 <fileno+0x1c>
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <fileno+0x78>)
 8005634:	429c      	cmp	r4, r3
 8005636:	bf08      	it	eq
 8005638:	68ec      	ldreq	r4, [r5, #12]
 800563a:	e7dd      	b.n	80055f8 <fileno+0x1c>
 800563c:	6832      	ldr	r2, [r6, #0]
 800563e:	2109      	movs	r1, #9
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	f04f 35ff 	mov.w	r5, #4294967295
 8005646:	e7e5      	b.n	8005614 <fileno+0x38>
 8005648:	2000000c 	.word	0x2000000c
 800564c:	08006728 	.word	0x08006728
 8005650:	08006748 	.word	0x08006748
 8005654:	08006708 	.word	0x08006708

08005658 <std>:
 8005658:	2300      	movs	r3, #0
 800565a:	b510      	push	{r4, lr}
 800565c:	4604      	mov	r4, r0
 800565e:	e9c0 3300 	strd	r3, r3, [r0]
 8005662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005666:	6083      	str	r3, [r0, #8]
 8005668:	8181      	strh	r1, [r0, #12]
 800566a:	6643      	str	r3, [r0, #100]	; 0x64
 800566c:	81c2      	strh	r2, [r0, #14]
 800566e:	6183      	str	r3, [r0, #24]
 8005670:	4619      	mov	r1, r3
 8005672:	2208      	movs	r2, #8
 8005674:	305c      	adds	r0, #92	; 0x5c
 8005676:	f7ff fb3b 	bl	8004cf0 <memset>
 800567a:	4b05      	ldr	r3, [pc, #20]	; (8005690 <std+0x38>)
 800567c:	6263      	str	r3, [r4, #36]	; 0x24
 800567e:	4b05      	ldr	r3, [pc, #20]	; (8005694 <std+0x3c>)
 8005680:	62a3      	str	r3, [r4, #40]	; 0x28
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <std+0x40>)
 8005684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005686:	4b05      	ldr	r3, [pc, #20]	; (800569c <std+0x44>)
 8005688:	6224      	str	r4, [r4, #32]
 800568a:	6323      	str	r3, [r4, #48]	; 0x30
 800568c:	bd10      	pop	{r4, pc}
 800568e:	bf00      	nop
 8005690:	08005e41 	.word	0x08005e41
 8005694:	08005e63 	.word	0x08005e63
 8005698:	08005e9b 	.word	0x08005e9b
 800569c:	08005ebf 	.word	0x08005ebf

080056a0 <_cleanup_r>:
 80056a0:	4901      	ldr	r1, [pc, #4]	; (80056a8 <_cleanup_r+0x8>)
 80056a2:	f000 b8af 	b.w	8005804 <_fwalk_reent>
 80056a6:	bf00      	nop
 80056a8:	08005565 	.word	0x08005565

080056ac <__sfmoreglue>:
 80056ac:	b570      	push	{r4, r5, r6, lr}
 80056ae:	2268      	movs	r2, #104	; 0x68
 80056b0:	1e4d      	subs	r5, r1, #1
 80056b2:	4355      	muls	r5, r2
 80056b4:	460e      	mov	r6, r1
 80056b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056ba:	f7ff fb8d 	bl	8004dd8 <_malloc_r>
 80056be:	4604      	mov	r4, r0
 80056c0:	b140      	cbz	r0, 80056d4 <__sfmoreglue+0x28>
 80056c2:	2100      	movs	r1, #0
 80056c4:	e9c0 1600 	strd	r1, r6, [r0]
 80056c8:	300c      	adds	r0, #12
 80056ca:	60a0      	str	r0, [r4, #8]
 80056cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056d0:	f7ff fb0e 	bl	8004cf0 <memset>
 80056d4:	4620      	mov	r0, r4
 80056d6:	bd70      	pop	{r4, r5, r6, pc}

080056d8 <__sfp_lock_acquire>:
 80056d8:	4801      	ldr	r0, [pc, #4]	; (80056e0 <__sfp_lock_acquire+0x8>)
 80056da:	f000 b8b3 	b.w	8005844 <__retarget_lock_acquire_recursive>
 80056de:	bf00      	nop
 80056e0:	200002e5 	.word	0x200002e5

080056e4 <__sfp_lock_release>:
 80056e4:	4801      	ldr	r0, [pc, #4]	; (80056ec <__sfp_lock_release+0x8>)
 80056e6:	f000 b8ae 	b.w	8005846 <__retarget_lock_release_recursive>
 80056ea:	bf00      	nop
 80056ec:	200002e5 	.word	0x200002e5

080056f0 <__sinit_lock_acquire>:
 80056f0:	4801      	ldr	r0, [pc, #4]	; (80056f8 <__sinit_lock_acquire+0x8>)
 80056f2:	f000 b8a7 	b.w	8005844 <__retarget_lock_acquire_recursive>
 80056f6:	bf00      	nop
 80056f8:	200002e6 	.word	0x200002e6

080056fc <__sinit_lock_release>:
 80056fc:	4801      	ldr	r0, [pc, #4]	; (8005704 <__sinit_lock_release+0x8>)
 80056fe:	f000 b8a2 	b.w	8005846 <__retarget_lock_release_recursive>
 8005702:	bf00      	nop
 8005704:	200002e6 	.word	0x200002e6

08005708 <__sinit>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4604      	mov	r4, r0
 800570c:	f7ff fff0 	bl	80056f0 <__sinit_lock_acquire>
 8005710:	69a3      	ldr	r3, [r4, #24]
 8005712:	b11b      	cbz	r3, 800571c <__sinit+0x14>
 8005714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005718:	f7ff bff0 	b.w	80056fc <__sinit_lock_release>
 800571c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005720:	6523      	str	r3, [r4, #80]	; 0x50
 8005722:	4b13      	ldr	r3, [pc, #76]	; (8005770 <__sinit+0x68>)
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <__sinit+0x6c>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	62a2      	str	r2, [r4, #40]	; 0x28
 800572a:	42a3      	cmp	r3, r4
 800572c:	bf04      	itt	eq
 800572e:	2301      	moveq	r3, #1
 8005730:	61a3      	streq	r3, [r4, #24]
 8005732:	4620      	mov	r0, r4
 8005734:	f000 f820 	bl	8005778 <__sfp>
 8005738:	6060      	str	r0, [r4, #4]
 800573a:	4620      	mov	r0, r4
 800573c:	f000 f81c 	bl	8005778 <__sfp>
 8005740:	60a0      	str	r0, [r4, #8]
 8005742:	4620      	mov	r0, r4
 8005744:	f000 f818 	bl	8005778 <__sfp>
 8005748:	2200      	movs	r2, #0
 800574a:	60e0      	str	r0, [r4, #12]
 800574c:	2104      	movs	r1, #4
 800574e:	6860      	ldr	r0, [r4, #4]
 8005750:	f7ff ff82 	bl	8005658 <std>
 8005754:	68a0      	ldr	r0, [r4, #8]
 8005756:	2201      	movs	r2, #1
 8005758:	2109      	movs	r1, #9
 800575a:	f7ff ff7d 	bl	8005658 <std>
 800575e:	68e0      	ldr	r0, [r4, #12]
 8005760:	2202      	movs	r2, #2
 8005762:	2112      	movs	r1, #18
 8005764:	f7ff ff78 	bl	8005658 <std>
 8005768:	2301      	movs	r3, #1
 800576a:	61a3      	str	r3, [r4, #24]
 800576c:	e7d2      	b.n	8005714 <__sinit+0xc>
 800576e:	bf00      	nop
 8005770:	08006068 	.word	0x08006068
 8005774:	080056a1 	.word	0x080056a1

08005778 <__sfp>:
 8005778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577a:	4607      	mov	r7, r0
 800577c:	f7ff ffac 	bl	80056d8 <__sfp_lock_acquire>
 8005780:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <__sfp+0x84>)
 8005782:	681e      	ldr	r6, [r3, #0]
 8005784:	69b3      	ldr	r3, [r6, #24]
 8005786:	b913      	cbnz	r3, 800578e <__sfp+0x16>
 8005788:	4630      	mov	r0, r6
 800578a:	f7ff ffbd 	bl	8005708 <__sinit>
 800578e:	3648      	adds	r6, #72	; 0x48
 8005790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005794:	3b01      	subs	r3, #1
 8005796:	d503      	bpl.n	80057a0 <__sfp+0x28>
 8005798:	6833      	ldr	r3, [r6, #0]
 800579a:	b30b      	cbz	r3, 80057e0 <__sfp+0x68>
 800579c:	6836      	ldr	r6, [r6, #0]
 800579e:	e7f7      	b.n	8005790 <__sfp+0x18>
 80057a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057a4:	b9d5      	cbnz	r5, 80057dc <__sfp+0x64>
 80057a6:	4b16      	ldr	r3, [pc, #88]	; (8005800 <__sfp+0x88>)
 80057a8:	60e3      	str	r3, [r4, #12]
 80057aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057ae:	6665      	str	r5, [r4, #100]	; 0x64
 80057b0:	f000 f847 	bl	8005842 <__retarget_lock_init_recursive>
 80057b4:	f7ff ff96 	bl	80056e4 <__sfp_lock_release>
 80057b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057c0:	6025      	str	r5, [r4, #0]
 80057c2:	61a5      	str	r5, [r4, #24]
 80057c4:	2208      	movs	r2, #8
 80057c6:	4629      	mov	r1, r5
 80057c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057cc:	f7ff fa90 	bl	8004cf0 <memset>
 80057d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057d8:	4620      	mov	r0, r4
 80057da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057dc:	3468      	adds	r4, #104	; 0x68
 80057de:	e7d9      	b.n	8005794 <__sfp+0x1c>
 80057e0:	2104      	movs	r1, #4
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff ff62 	bl	80056ac <__sfmoreglue>
 80057e8:	4604      	mov	r4, r0
 80057ea:	6030      	str	r0, [r6, #0]
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d1d5      	bne.n	800579c <__sfp+0x24>
 80057f0:	f7ff ff78 	bl	80056e4 <__sfp_lock_release>
 80057f4:	230c      	movs	r3, #12
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	e7ee      	b.n	80057d8 <__sfp+0x60>
 80057fa:	bf00      	nop
 80057fc:	08006068 	.word	0x08006068
 8005800:	ffff0001 	.word	0xffff0001

08005804 <_fwalk_reent>:
 8005804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005808:	4606      	mov	r6, r0
 800580a:	4688      	mov	r8, r1
 800580c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005810:	2700      	movs	r7, #0
 8005812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005816:	f1b9 0901 	subs.w	r9, r9, #1
 800581a:	d505      	bpl.n	8005828 <_fwalk_reent+0x24>
 800581c:	6824      	ldr	r4, [r4, #0]
 800581e:	2c00      	cmp	r4, #0
 8005820:	d1f7      	bne.n	8005812 <_fwalk_reent+0xe>
 8005822:	4638      	mov	r0, r7
 8005824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005828:	89ab      	ldrh	r3, [r5, #12]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d907      	bls.n	800583e <_fwalk_reent+0x3a>
 800582e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005832:	3301      	adds	r3, #1
 8005834:	d003      	beq.n	800583e <_fwalk_reent+0x3a>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	47c0      	blx	r8
 800583c:	4307      	orrs	r7, r0
 800583e:	3568      	adds	r5, #104	; 0x68
 8005840:	e7e9      	b.n	8005816 <_fwalk_reent+0x12>

08005842 <__retarget_lock_init_recursive>:
 8005842:	4770      	bx	lr

08005844 <__retarget_lock_acquire_recursive>:
 8005844:	4770      	bx	lr

08005846 <__retarget_lock_release_recursive>:
 8005846:	4770      	bx	lr

08005848 <__malloc_lock>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__malloc_lock+0x8>)
 800584a:	f7ff bffb 	b.w	8005844 <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	200002e4 	.word	0x200002e4

08005854 <__malloc_unlock>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__malloc_unlock+0x8>)
 8005856:	f7ff bff6 	b.w	8005846 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	200002e4 	.word	0x200002e4

08005860 <__ssputs_r>:
 8005860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005864:	688e      	ldr	r6, [r1, #8]
 8005866:	429e      	cmp	r6, r3
 8005868:	4682      	mov	sl, r0
 800586a:	460c      	mov	r4, r1
 800586c:	4690      	mov	r8, r2
 800586e:	461f      	mov	r7, r3
 8005870:	d838      	bhi.n	80058e4 <__ssputs_r+0x84>
 8005872:	898a      	ldrh	r2, [r1, #12]
 8005874:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005878:	d032      	beq.n	80058e0 <__ssputs_r+0x80>
 800587a:	6825      	ldr	r5, [r4, #0]
 800587c:	6909      	ldr	r1, [r1, #16]
 800587e:	eba5 0901 	sub.w	r9, r5, r1
 8005882:	6965      	ldr	r5, [r4, #20]
 8005884:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005888:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800588c:	3301      	adds	r3, #1
 800588e:	444b      	add	r3, r9
 8005890:	106d      	asrs	r5, r5, #1
 8005892:	429d      	cmp	r5, r3
 8005894:	bf38      	it	cc
 8005896:	461d      	movcc	r5, r3
 8005898:	0553      	lsls	r3, r2, #21
 800589a:	d531      	bpl.n	8005900 <__ssputs_r+0xa0>
 800589c:	4629      	mov	r1, r5
 800589e:	f7ff fa9b 	bl	8004dd8 <_malloc_r>
 80058a2:	4606      	mov	r6, r0
 80058a4:	b950      	cbnz	r0, 80058bc <__ssputs_r+0x5c>
 80058a6:	230c      	movs	r3, #12
 80058a8:	f8ca 3000 	str.w	r3, [sl]
 80058ac:	89a3      	ldrh	r3, [r4, #12]
 80058ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b2:	81a3      	strh	r3, [r4, #12]
 80058b4:	f04f 30ff 	mov.w	r0, #4294967295
 80058b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058bc:	6921      	ldr	r1, [r4, #16]
 80058be:	464a      	mov	r2, r9
 80058c0:	f000 fb24 	bl	8005f0c <memcpy>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	6126      	str	r6, [r4, #16]
 80058d2:	6165      	str	r5, [r4, #20]
 80058d4:	444e      	add	r6, r9
 80058d6:	eba5 0509 	sub.w	r5, r5, r9
 80058da:	6026      	str	r6, [r4, #0]
 80058dc:	60a5      	str	r5, [r4, #8]
 80058de:	463e      	mov	r6, r7
 80058e0:	42be      	cmp	r6, r7
 80058e2:	d900      	bls.n	80058e6 <__ssputs_r+0x86>
 80058e4:	463e      	mov	r6, r7
 80058e6:	6820      	ldr	r0, [r4, #0]
 80058e8:	4632      	mov	r2, r6
 80058ea:	4641      	mov	r1, r8
 80058ec:	f000 fb1c 	bl	8005f28 <memmove>
 80058f0:	68a3      	ldr	r3, [r4, #8]
 80058f2:	1b9b      	subs	r3, r3, r6
 80058f4:	60a3      	str	r3, [r4, #8]
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	4433      	add	r3, r6
 80058fa:	6023      	str	r3, [r4, #0]
 80058fc:	2000      	movs	r0, #0
 80058fe:	e7db      	b.n	80058b8 <__ssputs_r+0x58>
 8005900:	462a      	mov	r2, r5
 8005902:	f000 fb2b 	bl	8005f5c <_realloc_r>
 8005906:	4606      	mov	r6, r0
 8005908:	2800      	cmp	r0, #0
 800590a:	d1e1      	bne.n	80058d0 <__ssputs_r+0x70>
 800590c:	6921      	ldr	r1, [r4, #16]
 800590e:	4650      	mov	r0, sl
 8005910:	f7ff f9f6 	bl	8004d00 <_free_r>
 8005914:	e7c7      	b.n	80058a6 <__ssputs_r+0x46>
	...

08005918 <_svfiprintf_r>:
 8005918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591c:	4698      	mov	r8, r3
 800591e:	898b      	ldrh	r3, [r1, #12]
 8005920:	061b      	lsls	r3, r3, #24
 8005922:	b09d      	sub	sp, #116	; 0x74
 8005924:	4607      	mov	r7, r0
 8005926:	460d      	mov	r5, r1
 8005928:	4614      	mov	r4, r2
 800592a:	d50e      	bpl.n	800594a <_svfiprintf_r+0x32>
 800592c:	690b      	ldr	r3, [r1, #16]
 800592e:	b963      	cbnz	r3, 800594a <_svfiprintf_r+0x32>
 8005930:	2140      	movs	r1, #64	; 0x40
 8005932:	f7ff fa51 	bl	8004dd8 <_malloc_r>
 8005936:	6028      	str	r0, [r5, #0]
 8005938:	6128      	str	r0, [r5, #16]
 800593a:	b920      	cbnz	r0, 8005946 <_svfiprintf_r+0x2e>
 800593c:	230c      	movs	r3, #12
 800593e:	603b      	str	r3, [r7, #0]
 8005940:	f04f 30ff 	mov.w	r0, #4294967295
 8005944:	e0d1      	b.n	8005aea <_svfiprintf_r+0x1d2>
 8005946:	2340      	movs	r3, #64	; 0x40
 8005948:	616b      	str	r3, [r5, #20]
 800594a:	2300      	movs	r3, #0
 800594c:	9309      	str	r3, [sp, #36]	; 0x24
 800594e:	2320      	movs	r3, #32
 8005950:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005954:	f8cd 800c 	str.w	r8, [sp, #12]
 8005958:	2330      	movs	r3, #48	; 0x30
 800595a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b04 <_svfiprintf_r+0x1ec>
 800595e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005962:	f04f 0901 	mov.w	r9, #1
 8005966:	4623      	mov	r3, r4
 8005968:	469a      	mov	sl, r3
 800596a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800596e:	b10a      	cbz	r2, 8005974 <_svfiprintf_r+0x5c>
 8005970:	2a25      	cmp	r2, #37	; 0x25
 8005972:	d1f9      	bne.n	8005968 <_svfiprintf_r+0x50>
 8005974:	ebba 0b04 	subs.w	fp, sl, r4
 8005978:	d00b      	beq.n	8005992 <_svfiprintf_r+0x7a>
 800597a:	465b      	mov	r3, fp
 800597c:	4622      	mov	r2, r4
 800597e:	4629      	mov	r1, r5
 8005980:	4638      	mov	r0, r7
 8005982:	f7ff ff6d 	bl	8005860 <__ssputs_r>
 8005986:	3001      	adds	r0, #1
 8005988:	f000 80aa 	beq.w	8005ae0 <_svfiprintf_r+0x1c8>
 800598c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800598e:	445a      	add	r2, fp
 8005990:	9209      	str	r2, [sp, #36]	; 0x24
 8005992:	f89a 3000 	ldrb.w	r3, [sl]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80a2 	beq.w	8005ae0 <_svfiprintf_r+0x1c8>
 800599c:	2300      	movs	r3, #0
 800599e:	f04f 32ff 	mov.w	r2, #4294967295
 80059a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059a6:	f10a 0a01 	add.w	sl, sl, #1
 80059aa:	9304      	str	r3, [sp, #16]
 80059ac:	9307      	str	r3, [sp, #28]
 80059ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059b2:	931a      	str	r3, [sp, #104]	; 0x68
 80059b4:	4654      	mov	r4, sl
 80059b6:	2205      	movs	r2, #5
 80059b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059bc:	4851      	ldr	r0, [pc, #324]	; (8005b04 <_svfiprintf_r+0x1ec>)
 80059be:	f7fa fc0f 	bl	80001e0 <memchr>
 80059c2:	9a04      	ldr	r2, [sp, #16]
 80059c4:	b9d8      	cbnz	r0, 80059fe <_svfiprintf_r+0xe6>
 80059c6:	06d0      	lsls	r0, r2, #27
 80059c8:	bf44      	itt	mi
 80059ca:	2320      	movmi	r3, #32
 80059cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059d0:	0711      	lsls	r1, r2, #28
 80059d2:	bf44      	itt	mi
 80059d4:	232b      	movmi	r3, #43	; 0x2b
 80059d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059da:	f89a 3000 	ldrb.w	r3, [sl]
 80059de:	2b2a      	cmp	r3, #42	; 0x2a
 80059e0:	d015      	beq.n	8005a0e <_svfiprintf_r+0xf6>
 80059e2:	9a07      	ldr	r2, [sp, #28]
 80059e4:	4654      	mov	r4, sl
 80059e6:	2000      	movs	r0, #0
 80059e8:	f04f 0c0a 	mov.w	ip, #10
 80059ec:	4621      	mov	r1, r4
 80059ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059f2:	3b30      	subs	r3, #48	; 0x30
 80059f4:	2b09      	cmp	r3, #9
 80059f6:	d94e      	bls.n	8005a96 <_svfiprintf_r+0x17e>
 80059f8:	b1b0      	cbz	r0, 8005a28 <_svfiprintf_r+0x110>
 80059fa:	9207      	str	r2, [sp, #28]
 80059fc:	e014      	b.n	8005a28 <_svfiprintf_r+0x110>
 80059fe:	eba0 0308 	sub.w	r3, r0, r8
 8005a02:	fa09 f303 	lsl.w	r3, r9, r3
 8005a06:	4313      	orrs	r3, r2
 8005a08:	9304      	str	r3, [sp, #16]
 8005a0a:	46a2      	mov	sl, r4
 8005a0c:	e7d2      	b.n	80059b4 <_svfiprintf_r+0x9c>
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	1d19      	adds	r1, r3, #4
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	9103      	str	r1, [sp, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	bfbb      	ittet	lt
 8005a1a:	425b      	neglt	r3, r3
 8005a1c:	f042 0202 	orrlt.w	r2, r2, #2
 8005a20:	9307      	strge	r3, [sp, #28]
 8005a22:	9307      	strlt	r3, [sp, #28]
 8005a24:	bfb8      	it	lt
 8005a26:	9204      	strlt	r2, [sp, #16]
 8005a28:	7823      	ldrb	r3, [r4, #0]
 8005a2a:	2b2e      	cmp	r3, #46	; 0x2e
 8005a2c:	d10c      	bne.n	8005a48 <_svfiprintf_r+0x130>
 8005a2e:	7863      	ldrb	r3, [r4, #1]
 8005a30:	2b2a      	cmp	r3, #42	; 0x2a
 8005a32:	d135      	bne.n	8005aa0 <_svfiprintf_r+0x188>
 8005a34:	9b03      	ldr	r3, [sp, #12]
 8005a36:	1d1a      	adds	r2, r3, #4
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	9203      	str	r2, [sp, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfb8      	it	lt
 8005a40:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a44:	3402      	adds	r4, #2
 8005a46:	9305      	str	r3, [sp, #20]
 8005a48:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b14 <_svfiprintf_r+0x1fc>
 8005a4c:	7821      	ldrb	r1, [r4, #0]
 8005a4e:	2203      	movs	r2, #3
 8005a50:	4650      	mov	r0, sl
 8005a52:	f7fa fbc5 	bl	80001e0 <memchr>
 8005a56:	b140      	cbz	r0, 8005a6a <_svfiprintf_r+0x152>
 8005a58:	2340      	movs	r3, #64	; 0x40
 8005a5a:	eba0 000a 	sub.w	r0, r0, sl
 8005a5e:	fa03 f000 	lsl.w	r0, r3, r0
 8005a62:	9b04      	ldr	r3, [sp, #16]
 8005a64:	4303      	orrs	r3, r0
 8005a66:	3401      	adds	r4, #1
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a6e:	4826      	ldr	r0, [pc, #152]	; (8005b08 <_svfiprintf_r+0x1f0>)
 8005a70:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a74:	2206      	movs	r2, #6
 8005a76:	f7fa fbb3 	bl	80001e0 <memchr>
 8005a7a:	2800      	cmp	r0, #0
 8005a7c:	d038      	beq.n	8005af0 <_svfiprintf_r+0x1d8>
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <_svfiprintf_r+0x1f4>)
 8005a80:	bb1b      	cbnz	r3, 8005aca <_svfiprintf_r+0x1b2>
 8005a82:	9b03      	ldr	r3, [sp, #12]
 8005a84:	3307      	adds	r3, #7
 8005a86:	f023 0307 	bic.w	r3, r3, #7
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a90:	4433      	add	r3, r6
 8005a92:	9309      	str	r3, [sp, #36]	; 0x24
 8005a94:	e767      	b.n	8005966 <_svfiprintf_r+0x4e>
 8005a96:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2001      	movs	r0, #1
 8005a9e:	e7a5      	b.n	80059ec <_svfiprintf_r+0xd4>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	3401      	adds	r4, #1
 8005aa4:	9305      	str	r3, [sp, #20]
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	f04f 0c0a 	mov.w	ip, #10
 8005aac:	4620      	mov	r0, r4
 8005aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ab2:	3a30      	subs	r2, #48	; 0x30
 8005ab4:	2a09      	cmp	r2, #9
 8005ab6:	d903      	bls.n	8005ac0 <_svfiprintf_r+0x1a8>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0c5      	beq.n	8005a48 <_svfiprintf_r+0x130>
 8005abc:	9105      	str	r1, [sp, #20]
 8005abe:	e7c3      	b.n	8005a48 <_svfiprintf_r+0x130>
 8005ac0:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e7f0      	b.n	8005aac <_svfiprintf_r+0x194>
 8005aca:	ab03      	add	r3, sp, #12
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	; (8005b10 <_svfiprintf_r+0x1f8>)
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f3af 8000 	nop.w
 8005ada:	1c42      	adds	r2, r0, #1
 8005adc:	4606      	mov	r6, r0
 8005ade:	d1d6      	bne.n	8005a8e <_svfiprintf_r+0x176>
 8005ae0:	89ab      	ldrh	r3, [r5, #12]
 8005ae2:	065b      	lsls	r3, r3, #25
 8005ae4:	f53f af2c 	bmi.w	8005940 <_svfiprintf_r+0x28>
 8005ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aea:	b01d      	add	sp, #116	; 0x74
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af0:	ab03      	add	r3, sp, #12
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	462a      	mov	r2, r5
 8005af6:	4b06      	ldr	r3, [pc, #24]	; (8005b10 <_svfiprintf_r+0x1f8>)
 8005af8:	a904      	add	r1, sp, #16
 8005afa:	4638      	mov	r0, r7
 8005afc:	f000 f87a 	bl	8005bf4 <_printf_i>
 8005b00:	e7eb      	b.n	8005ada <_svfiprintf_r+0x1c2>
 8005b02:	bf00      	nop
 8005b04:	08006768 	.word	0x08006768
 8005b08:	08006772 	.word	0x08006772
 8005b0c:	00000000 	.word	0x00000000
 8005b10:	08005861 	.word	0x08005861
 8005b14:	0800676e 	.word	0x0800676e

08005b18 <_printf_common>:
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	4699      	mov	r9, r3
 8005b20:	688a      	ldr	r2, [r1, #8]
 8005b22:	690b      	ldr	r3, [r1, #16]
 8005b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	bfb8      	it	lt
 8005b2c:	4613      	movlt	r3, r2
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b34:	4607      	mov	r7, r0
 8005b36:	460c      	mov	r4, r1
 8005b38:	b10a      	cbz	r2, 8005b3e <_printf_common+0x26>
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	6033      	str	r3, [r6, #0]
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	0699      	lsls	r1, r3, #26
 8005b42:	bf42      	ittt	mi
 8005b44:	6833      	ldrmi	r3, [r6, #0]
 8005b46:	3302      	addmi	r3, #2
 8005b48:	6033      	strmi	r3, [r6, #0]
 8005b4a:	6825      	ldr	r5, [r4, #0]
 8005b4c:	f015 0506 	ands.w	r5, r5, #6
 8005b50:	d106      	bne.n	8005b60 <_printf_common+0x48>
 8005b52:	f104 0a19 	add.w	sl, r4, #25
 8005b56:	68e3      	ldr	r3, [r4, #12]
 8005b58:	6832      	ldr	r2, [r6, #0]
 8005b5a:	1a9b      	subs	r3, r3, r2
 8005b5c:	42ab      	cmp	r3, r5
 8005b5e:	dc26      	bgt.n	8005bae <_printf_common+0x96>
 8005b60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b64:	1e13      	subs	r3, r2, #0
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	bf18      	it	ne
 8005b6a:	2301      	movne	r3, #1
 8005b6c:	0692      	lsls	r2, r2, #26
 8005b6e:	d42b      	bmi.n	8005bc8 <_printf_common+0xb0>
 8005b70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b74:	4649      	mov	r1, r9
 8005b76:	4638      	mov	r0, r7
 8005b78:	47c0      	blx	r8
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d01e      	beq.n	8005bbc <_printf_common+0xa4>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	68e5      	ldr	r5, [r4, #12]
 8005b82:	6832      	ldr	r2, [r6, #0]
 8005b84:	f003 0306 	and.w	r3, r3, #6
 8005b88:	2b04      	cmp	r3, #4
 8005b8a:	bf08      	it	eq
 8005b8c:	1aad      	subeq	r5, r5, r2
 8005b8e:	68a3      	ldr	r3, [r4, #8]
 8005b90:	6922      	ldr	r2, [r4, #16]
 8005b92:	bf0c      	ite	eq
 8005b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b98:	2500      	movne	r5, #0
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	bfc4      	itt	gt
 8005b9e:	1a9b      	subgt	r3, r3, r2
 8005ba0:	18ed      	addgt	r5, r5, r3
 8005ba2:	2600      	movs	r6, #0
 8005ba4:	341a      	adds	r4, #26
 8005ba6:	42b5      	cmp	r5, r6
 8005ba8:	d11a      	bne.n	8005be0 <_printf_common+0xc8>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e008      	b.n	8005bc0 <_printf_common+0xa8>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	4652      	mov	r2, sl
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	4638      	mov	r0, r7
 8005bb6:	47c0      	blx	r8
 8005bb8:	3001      	adds	r0, #1
 8005bba:	d103      	bne.n	8005bc4 <_printf_common+0xac>
 8005bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bc4:	3501      	adds	r5, #1
 8005bc6:	e7c6      	b.n	8005b56 <_printf_common+0x3e>
 8005bc8:	18e1      	adds	r1, r4, r3
 8005bca:	1c5a      	adds	r2, r3, #1
 8005bcc:	2030      	movs	r0, #48	; 0x30
 8005bce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bd2:	4422      	add	r2, r4
 8005bd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bdc:	3302      	adds	r3, #2
 8005bde:	e7c7      	b.n	8005b70 <_printf_common+0x58>
 8005be0:	2301      	movs	r3, #1
 8005be2:	4622      	mov	r2, r4
 8005be4:	4649      	mov	r1, r9
 8005be6:	4638      	mov	r0, r7
 8005be8:	47c0      	blx	r8
 8005bea:	3001      	adds	r0, #1
 8005bec:	d0e6      	beq.n	8005bbc <_printf_common+0xa4>
 8005bee:	3601      	adds	r6, #1
 8005bf0:	e7d9      	b.n	8005ba6 <_printf_common+0x8e>
	...

08005bf4 <_printf_i>:
 8005bf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bf8:	7e0f      	ldrb	r7, [r1, #24]
 8005bfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bfc:	2f78      	cmp	r7, #120	; 0x78
 8005bfe:	4691      	mov	r9, r2
 8005c00:	4680      	mov	r8, r0
 8005c02:	460c      	mov	r4, r1
 8005c04:	469a      	mov	sl, r3
 8005c06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c0a:	d807      	bhi.n	8005c1c <_printf_i+0x28>
 8005c0c:	2f62      	cmp	r7, #98	; 0x62
 8005c0e:	d80a      	bhi.n	8005c26 <_printf_i+0x32>
 8005c10:	2f00      	cmp	r7, #0
 8005c12:	f000 80d8 	beq.w	8005dc6 <_printf_i+0x1d2>
 8005c16:	2f58      	cmp	r7, #88	; 0x58
 8005c18:	f000 80a3 	beq.w	8005d62 <_printf_i+0x16e>
 8005c1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c24:	e03a      	b.n	8005c9c <_printf_i+0xa8>
 8005c26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c2a:	2b15      	cmp	r3, #21
 8005c2c:	d8f6      	bhi.n	8005c1c <_printf_i+0x28>
 8005c2e:	a101      	add	r1, pc, #4	; (adr r1, 8005c34 <_printf_i+0x40>)
 8005c30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c34:	08005c8d 	.word	0x08005c8d
 8005c38:	08005ca1 	.word	0x08005ca1
 8005c3c:	08005c1d 	.word	0x08005c1d
 8005c40:	08005c1d 	.word	0x08005c1d
 8005c44:	08005c1d 	.word	0x08005c1d
 8005c48:	08005c1d 	.word	0x08005c1d
 8005c4c:	08005ca1 	.word	0x08005ca1
 8005c50:	08005c1d 	.word	0x08005c1d
 8005c54:	08005c1d 	.word	0x08005c1d
 8005c58:	08005c1d 	.word	0x08005c1d
 8005c5c:	08005c1d 	.word	0x08005c1d
 8005c60:	08005dad 	.word	0x08005dad
 8005c64:	08005cd1 	.word	0x08005cd1
 8005c68:	08005d8f 	.word	0x08005d8f
 8005c6c:	08005c1d 	.word	0x08005c1d
 8005c70:	08005c1d 	.word	0x08005c1d
 8005c74:	08005dcf 	.word	0x08005dcf
 8005c78:	08005c1d 	.word	0x08005c1d
 8005c7c:	08005cd1 	.word	0x08005cd1
 8005c80:	08005c1d 	.word	0x08005c1d
 8005c84:	08005c1d 	.word	0x08005c1d
 8005c88:	08005d97 	.word	0x08005d97
 8005c8c:	682b      	ldr	r3, [r5, #0]
 8005c8e:	1d1a      	adds	r2, r3, #4
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	602a      	str	r2, [r5, #0]
 8005c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e0a3      	b.n	8005de8 <_printf_i+0x1f4>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	6829      	ldr	r1, [r5, #0]
 8005ca4:	0606      	lsls	r6, r0, #24
 8005ca6:	f101 0304 	add.w	r3, r1, #4
 8005caa:	d50a      	bpl.n	8005cc2 <_printf_i+0xce>
 8005cac:	680e      	ldr	r6, [r1, #0]
 8005cae:	602b      	str	r3, [r5, #0]
 8005cb0:	2e00      	cmp	r6, #0
 8005cb2:	da03      	bge.n	8005cbc <_printf_i+0xc8>
 8005cb4:	232d      	movs	r3, #45	; 0x2d
 8005cb6:	4276      	negs	r6, r6
 8005cb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cbc:	485e      	ldr	r0, [pc, #376]	; (8005e38 <_printf_i+0x244>)
 8005cbe:	230a      	movs	r3, #10
 8005cc0:	e019      	b.n	8005cf6 <_printf_i+0x102>
 8005cc2:	680e      	ldr	r6, [r1, #0]
 8005cc4:	602b      	str	r3, [r5, #0]
 8005cc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cca:	bf18      	it	ne
 8005ccc:	b236      	sxthne	r6, r6
 8005cce:	e7ef      	b.n	8005cb0 <_printf_i+0xbc>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	6820      	ldr	r0, [r4, #0]
 8005cd4:	1d19      	adds	r1, r3, #4
 8005cd6:	6029      	str	r1, [r5, #0]
 8005cd8:	0601      	lsls	r1, r0, #24
 8005cda:	d501      	bpl.n	8005ce0 <_printf_i+0xec>
 8005cdc:	681e      	ldr	r6, [r3, #0]
 8005cde:	e002      	b.n	8005ce6 <_printf_i+0xf2>
 8005ce0:	0646      	lsls	r6, r0, #25
 8005ce2:	d5fb      	bpl.n	8005cdc <_printf_i+0xe8>
 8005ce4:	881e      	ldrh	r6, [r3, #0]
 8005ce6:	4854      	ldr	r0, [pc, #336]	; (8005e38 <_printf_i+0x244>)
 8005ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cea:	bf0c      	ite	eq
 8005cec:	2308      	moveq	r3, #8
 8005cee:	230a      	movne	r3, #10
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cf6:	6865      	ldr	r5, [r4, #4]
 8005cf8:	60a5      	str	r5, [r4, #8]
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	bfa2      	ittt	ge
 8005cfe:	6821      	ldrge	r1, [r4, #0]
 8005d00:	f021 0104 	bicge.w	r1, r1, #4
 8005d04:	6021      	strge	r1, [r4, #0]
 8005d06:	b90e      	cbnz	r6, 8005d0c <_printf_i+0x118>
 8005d08:	2d00      	cmp	r5, #0
 8005d0a:	d04d      	beq.n	8005da8 <_printf_i+0x1b4>
 8005d0c:	4615      	mov	r5, r2
 8005d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d12:	fb03 6711 	mls	r7, r3, r1, r6
 8005d16:	5dc7      	ldrb	r7, [r0, r7]
 8005d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d1c:	4637      	mov	r7, r6
 8005d1e:	42bb      	cmp	r3, r7
 8005d20:	460e      	mov	r6, r1
 8005d22:	d9f4      	bls.n	8005d0e <_printf_i+0x11a>
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d10b      	bne.n	8005d40 <_printf_i+0x14c>
 8005d28:	6823      	ldr	r3, [r4, #0]
 8005d2a:	07de      	lsls	r6, r3, #31
 8005d2c:	d508      	bpl.n	8005d40 <_printf_i+0x14c>
 8005d2e:	6923      	ldr	r3, [r4, #16]
 8005d30:	6861      	ldr	r1, [r4, #4]
 8005d32:	4299      	cmp	r1, r3
 8005d34:	bfde      	ittt	le
 8005d36:	2330      	movle	r3, #48	; 0x30
 8005d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d3c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d40:	1b52      	subs	r2, r2, r5
 8005d42:	6122      	str	r2, [r4, #16]
 8005d44:	f8cd a000 	str.w	sl, [sp]
 8005d48:	464b      	mov	r3, r9
 8005d4a:	aa03      	add	r2, sp, #12
 8005d4c:	4621      	mov	r1, r4
 8005d4e:	4640      	mov	r0, r8
 8005d50:	f7ff fee2 	bl	8005b18 <_printf_common>
 8005d54:	3001      	adds	r0, #1
 8005d56:	d14c      	bne.n	8005df2 <_printf_i+0x1fe>
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	b004      	add	sp, #16
 8005d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d62:	4835      	ldr	r0, [pc, #212]	; (8005e38 <_printf_i+0x244>)
 8005d64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d68:	6829      	ldr	r1, [r5, #0]
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d70:	6029      	str	r1, [r5, #0]
 8005d72:	061d      	lsls	r5, r3, #24
 8005d74:	d514      	bpl.n	8005da0 <_printf_i+0x1ac>
 8005d76:	07df      	lsls	r7, r3, #31
 8005d78:	bf44      	itt	mi
 8005d7a:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7e:	6023      	strmi	r3, [r4, #0]
 8005d80:	b91e      	cbnz	r6, 8005d8a <_printf_i+0x196>
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f023 0320 	bic.w	r3, r3, #32
 8005d88:	6023      	str	r3, [r4, #0]
 8005d8a:	2310      	movs	r3, #16
 8005d8c:	e7b0      	b.n	8005cf0 <_printf_i+0xfc>
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	f043 0320 	orr.w	r3, r3, #32
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	2378      	movs	r3, #120	; 0x78
 8005d98:	4828      	ldr	r0, [pc, #160]	; (8005e3c <_printf_i+0x248>)
 8005d9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d9e:	e7e3      	b.n	8005d68 <_printf_i+0x174>
 8005da0:	0659      	lsls	r1, r3, #25
 8005da2:	bf48      	it	mi
 8005da4:	b2b6      	uxthmi	r6, r6
 8005da6:	e7e6      	b.n	8005d76 <_printf_i+0x182>
 8005da8:	4615      	mov	r5, r2
 8005daa:	e7bb      	b.n	8005d24 <_printf_i+0x130>
 8005dac:	682b      	ldr	r3, [r5, #0]
 8005dae:	6826      	ldr	r6, [r4, #0]
 8005db0:	6961      	ldr	r1, [r4, #20]
 8005db2:	1d18      	adds	r0, r3, #4
 8005db4:	6028      	str	r0, [r5, #0]
 8005db6:	0635      	lsls	r5, r6, #24
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	d501      	bpl.n	8005dc0 <_printf_i+0x1cc>
 8005dbc:	6019      	str	r1, [r3, #0]
 8005dbe:	e002      	b.n	8005dc6 <_printf_i+0x1d2>
 8005dc0:	0670      	lsls	r0, r6, #25
 8005dc2:	d5fb      	bpl.n	8005dbc <_printf_i+0x1c8>
 8005dc4:	8019      	strh	r1, [r3, #0]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6123      	str	r3, [r4, #16]
 8005dca:	4615      	mov	r5, r2
 8005dcc:	e7ba      	b.n	8005d44 <_printf_i+0x150>
 8005dce:	682b      	ldr	r3, [r5, #0]
 8005dd0:	1d1a      	adds	r2, r3, #4
 8005dd2:	602a      	str	r2, [r5, #0]
 8005dd4:	681d      	ldr	r5, [r3, #0]
 8005dd6:	6862      	ldr	r2, [r4, #4]
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7fa fa00 	bl	80001e0 <memchr>
 8005de0:	b108      	cbz	r0, 8005de6 <_printf_i+0x1f2>
 8005de2:	1b40      	subs	r0, r0, r5
 8005de4:	6060      	str	r0, [r4, #4]
 8005de6:	6863      	ldr	r3, [r4, #4]
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	2300      	movs	r3, #0
 8005dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df0:	e7a8      	b.n	8005d44 <_printf_i+0x150>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	462a      	mov	r2, r5
 8005df6:	4649      	mov	r1, r9
 8005df8:	4640      	mov	r0, r8
 8005dfa:	47d0      	blx	sl
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d0ab      	beq.n	8005d58 <_printf_i+0x164>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	079b      	lsls	r3, r3, #30
 8005e04:	d413      	bmi.n	8005e2e <_printf_i+0x23a>
 8005e06:	68e0      	ldr	r0, [r4, #12]
 8005e08:	9b03      	ldr	r3, [sp, #12]
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	bfb8      	it	lt
 8005e0e:	4618      	movlt	r0, r3
 8005e10:	e7a4      	b.n	8005d5c <_printf_i+0x168>
 8005e12:	2301      	movs	r3, #1
 8005e14:	4632      	mov	r2, r6
 8005e16:	4649      	mov	r1, r9
 8005e18:	4640      	mov	r0, r8
 8005e1a:	47d0      	blx	sl
 8005e1c:	3001      	adds	r0, #1
 8005e1e:	d09b      	beq.n	8005d58 <_printf_i+0x164>
 8005e20:	3501      	adds	r5, #1
 8005e22:	68e3      	ldr	r3, [r4, #12]
 8005e24:	9903      	ldr	r1, [sp, #12]
 8005e26:	1a5b      	subs	r3, r3, r1
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	dcf2      	bgt.n	8005e12 <_printf_i+0x21e>
 8005e2c:	e7eb      	b.n	8005e06 <_printf_i+0x212>
 8005e2e:	2500      	movs	r5, #0
 8005e30:	f104 0619 	add.w	r6, r4, #25
 8005e34:	e7f5      	b.n	8005e22 <_printf_i+0x22e>
 8005e36:	bf00      	nop
 8005e38:	08006779 	.word	0x08006779
 8005e3c:	0800678a 	.word	0x0800678a

08005e40 <__sread>:
 8005e40:	b510      	push	{r4, lr}
 8005e42:	460c      	mov	r4, r1
 8005e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e48:	f000 f8b8 	bl	8005fbc <_read_r>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	bfab      	itete	ge
 8005e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e52:	89a3      	ldrhlt	r3, [r4, #12]
 8005e54:	181b      	addge	r3, r3, r0
 8005e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e5a:	bfac      	ite	ge
 8005e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e5e:	81a3      	strhlt	r3, [r4, #12]
 8005e60:	bd10      	pop	{r4, pc}

08005e62 <__swrite>:
 8005e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e66:	461f      	mov	r7, r3
 8005e68:	898b      	ldrh	r3, [r1, #12]
 8005e6a:	05db      	lsls	r3, r3, #23
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	4616      	mov	r6, r2
 8005e72:	d505      	bpl.n	8005e80 <__swrite+0x1e>
 8005e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e78:	2302      	movs	r3, #2
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f000 f834 	bl	8005ee8 <_lseek_r>
 8005e80:	89a3      	ldrh	r3, [r4, #12]
 8005e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	463b      	mov	r3, r7
 8005e90:	4628      	mov	r0, r5
 8005e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e96:	f7ff bacd 	b.w	8005434 <_write_r>

08005e9a <__sseek>:
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ea2:	f000 f821 	bl	8005ee8 <_lseek_r>
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	89a3      	ldrh	r3, [r4, #12]
 8005eaa:	bf15      	itete	ne
 8005eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8005eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005eb6:	81a3      	strheq	r3, [r4, #12]
 8005eb8:	bf18      	it	ne
 8005eba:	81a3      	strhne	r3, [r4, #12]
 8005ebc:	bd10      	pop	{r4, pc}

08005ebe <__sclose>:
 8005ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec2:	f000 b801 	b.w	8005ec8 <_close_r>
	...

08005ec8 <_close_r>:
 8005ec8:	b538      	push	{r3, r4, r5, lr}
 8005eca:	4d06      	ldr	r5, [pc, #24]	; (8005ee4 <_close_r+0x1c>)
 8005ecc:	2300      	movs	r3, #0
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	f7fa fecf 	bl	8000c76 <_close>
 8005ed8:	1c43      	adds	r3, r0, #1
 8005eda:	d102      	bne.n	8005ee2 <_close_r+0x1a>
 8005edc:	682b      	ldr	r3, [r5, #0]
 8005ede:	b103      	cbz	r3, 8005ee2 <_close_r+0x1a>
 8005ee0:	6023      	str	r3, [r4, #0]
 8005ee2:	bd38      	pop	{r3, r4, r5, pc}
 8005ee4:	200002e8 	.word	0x200002e8

08005ee8 <_lseek_r>:
 8005ee8:	b538      	push	{r3, r4, r5, lr}
 8005eea:	4d07      	ldr	r5, [pc, #28]	; (8005f08 <_lseek_r+0x20>)
 8005eec:	4604      	mov	r4, r0
 8005eee:	4608      	mov	r0, r1
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f7fa fec9 	bl	8000c8e <_lseek>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <_lseek_r+0x1e>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b103      	cbz	r3, 8005f06 <_lseek_r+0x1e>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	200002e8 	.word	0x200002e8

08005f0c <memcpy>:
 8005f0c:	440a      	add	r2, r1
 8005f0e:	4291      	cmp	r1, r2
 8005f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f14:	d100      	bne.n	8005f18 <memcpy+0xc>
 8005f16:	4770      	bx	lr
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f22:	4291      	cmp	r1, r2
 8005f24:	d1f9      	bne.n	8005f1a <memcpy+0xe>
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <memmove>:
 8005f28:	4288      	cmp	r0, r1
 8005f2a:	b510      	push	{r4, lr}
 8005f2c:	eb01 0402 	add.w	r4, r1, r2
 8005f30:	d902      	bls.n	8005f38 <memmove+0x10>
 8005f32:	4284      	cmp	r4, r0
 8005f34:	4623      	mov	r3, r4
 8005f36:	d807      	bhi.n	8005f48 <memmove+0x20>
 8005f38:	1e43      	subs	r3, r0, #1
 8005f3a:	42a1      	cmp	r1, r4
 8005f3c:	d008      	beq.n	8005f50 <memmove+0x28>
 8005f3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f46:	e7f8      	b.n	8005f3a <memmove+0x12>
 8005f48:	4402      	add	r2, r0
 8005f4a:	4601      	mov	r1, r0
 8005f4c:	428a      	cmp	r2, r1
 8005f4e:	d100      	bne.n	8005f52 <memmove+0x2a>
 8005f50:	bd10      	pop	{r4, pc}
 8005f52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f5a:	e7f7      	b.n	8005f4c <memmove+0x24>

08005f5c <_realloc_r>:
 8005f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f60:	4680      	mov	r8, r0
 8005f62:	4614      	mov	r4, r2
 8005f64:	460e      	mov	r6, r1
 8005f66:	b921      	cbnz	r1, 8005f72 <_realloc_r+0x16>
 8005f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	4611      	mov	r1, r2
 8005f6e:	f7fe bf33 	b.w	8004dd8 <_malloc_r>
 8005f72:	b92a      	cbnz	r2, 8005f80 <_realloc_r+0x24>
 8005f74:	f7fe fec4 	bl	8004d00 <_free_r>
 8005f78:	4625      	mov	r5, r4
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f80:	f000 f82e 	bl	8005fe0 <_malloc_usable_size_r>
 8005f84:	4284      	cmp	r4, r0
 8005f86:	4607      	mov	r7, r0
 8005f88:	d802      	bhi.n	8005f90 <_realloc_r+0x34>
 8005f8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005f8e:	d812      	bhi.n	8005fb6 <_realloc_r+0x5a>
 8005f90:	4621      	mov	r1, r4
 8005f92:	4640      	mov	r0, r8
 8005f94:	f7fe ff20 	bl	8004dd8 <_malloc_r>
 8005f98:	4605      	mov	r5, r0
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d0ed      	beq.n	8005f7a <_realloc_r+0x1e>
 8005f9e:	42bc      	cmp	r4, r7
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	bf28      	it	cs
 8005fa6:	463a      	movcs	r2, r7
 8005fa8:	f7ff ffb0 	bl	8005f0c <memcpy>
 8005fac:	4631      	mov	r1, r6
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f7fe fea6 	bl	8004d00 <_free_r>
 8005fb4:	e7e1      	b.n	8005f7a <_realloc_r+0x1e>
 8005fb6:	4635      	mov	r5, r6
 8005fb8:	e7df      	b.n	8005f7a <_realloc_r+0x1e>
	...

08005fbc <_read_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4d07      	ldr	r5, [pc, #28]	; (8005fdc <_read_r+0x20>)
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	4608      	mov	r0, r1
 8005fc4:	4611      	mov	r1, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f7fa fe1a 	bl	8000c04 <_read>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_read_r+0x1e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_read_r+0x1e>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	200002e8 	.word	0x200002e8

08005fe0 <_malloc_usable_size_r>:
 8005fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fe4:	1f18      	subs	r0, r3, #4
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfbc      	itt	lt
 8005fea:	580b      	ldrlt	r3, [r1, r0]
 8005fec:	18c0      	addlt	r0, r0, r3
 8005fee:	4770      	bx	lr

08005ff0 <_init>:
 8005ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ff2:	bf00      	nop
 8005ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ff6:	bc08      	pop	{r3}
 8005ff8:	469e      	mov	lr, r3
 8005ffa:	4770      	bx	lr

08005ffc <_fini>:
 8005ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ffe:	bf00      	nop
 8006000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006002:	bc08      	pop	{r3}
 8006004:	469e      	mov	lr, r3
 8006006:	4770      	bx	lr
