
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dec  08005dec  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005df4  08005df4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005df4  08005df4  00015df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005df8  08005df8  00015df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  08005e6c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08005e6c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139f9  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002873  00000000  00000000  00033a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  00036310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  000374a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024899  00000000  00000000  00038518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001516e  00000000  00000000  0005cdb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daca9  00000000  00000000  00071f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014cbc8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005124  00000000  00000000  0014cc18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005628 	.word	0x08005628

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005628 	.word	0x08005628

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x130>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80005fa:	2200      	movs	r2, #0
 80005fc:	f248 21b0 	movw	r1, #33456	; 0x82b0
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f000 ffb6 	bl	8001574 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <MX_GPIO_Init+0x134>)
 800060e:	f000 ffb1 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_D8_GPIO_Port, SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4829      	ldr	r0, [pc, #164]	; (80006bc <MX_GPIO_Init+0x138>)
 8000618:	f000 ffac 	bl	8001574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <MX_GPIO_Init+0x134>)
 8000634:	f000 fe24 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000638:	f248 23b0 	movw	r3, #33456	; 0x82b0
 800063c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 fe14 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fe07 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0x134>)
 800068a:	f000 fdf9 	bl	8001280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_CS_D8_Pin;
 800068e:	2340      	movs	r3, #64	; 0x40
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_D8_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0x138>)
 80006a6:	f000 fdeb 	bl	8001280 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800
 80006bc:	48000400 	.word	0x48000400

080006c0 <print>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <print+0x2c>)
 80006da:	f003 f875 	bl	80037c8 <HAL_UART_Transmit>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000208 	.word	0x20000208

080006f0 <printf>:
int printf(const char* s, ...){
 80006f0:	b40f      	push	{r0, r1, r2, r3}
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b0c2      	sub	sp, #264	; 0x108
 80006f6:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80006f8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000704:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 8000706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800070a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800070e:	f107 0008 	add.w	r0, r7, #8
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000718:	f004 f8ae 	bl	8004878 <vsiprintf>
	perror(buffer);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fea3 	bl	800446c <perror>
	print(buffer);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffc8 	bl	80006c0 <print>
	va_end(args);
//	#endif
	return strlen(buffer);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd4b 	bl	80001d0 <strlen>
 800073a:	4603      	mov	r3, r0
}
 800073c:	4618      	mov	r0, r3
 800073e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000752:	f000 fc0f 	bl	8000f74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000756:	f000 f843 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075a:	f7ff ff13 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800075e:	f000 fb55 	bl	8000e0c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000762:	f000 f893 	bl	800088c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000766:	f000 f8cf 	bl	8000908 <MX_SPI2_Init>
  MX_SPI3_Init();
 800076a:	f000 f90b 	bl	8000984 <MX_SPI3_Init>
  MX_TIM1_Init();
 800076e:	f000 fad9 	bl	8000d24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 8000772:	2363      	movs	r3, #99	; 0x63
 8000774:	80fb      	strh	r3, [r7, #6]
  uint16_t encoderData_2 = 99;
 8000776:	2363      	movs	r3, #99	; 0x63
 8000778:	80bb      	strh	r3, [r7, #4]
  HAL_TIM_Base_Start(&htim1);
 800077a:	4812      	ldr	r0, [pc, #72]	; (80007c4 <main+0x78>)
 800077c:	f002 fd5c 	bl	8003238 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  encoderData_1 = getPositionSPI(&hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 8000780:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <main+0x78>)
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	230c      	movs	r3, #12
 8000786:	2280      	movs	r2, #128	; 0x80
 8000788:	490f      	ldr	r1, [pc, #60]	; (80007c8 <main+0x7c>)
 800078a:	4810      	ldr	r0, [pc, #64]	; (80007cc <main+0x80>)
 800078c:	f003 fcf7 	bl	800417e <getPositionSPI>
 8000790:	4603      	mov	r3, r0
 8000792:	80fb      	strh	r3, [r7, #6]
	  encoderData_2 = getPositionSPI(&hspi2, GPIOB, GPIO_PIN_6, 12, &htim1);
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <main+0x78>)
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	230c      	movs	r3, #12
 800079a:	2240      	movs	r2, #64	; 0x40
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <main+0x84>)
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0x88>)
 80007a0:	f003 fced 	bl	800417e <getPositionSPI>
 80007a4:	4603      	mov	r3, r0
 80007a6:	80bb      	strh	r3, [r7, #4]
//	  delay_us(10000);
//	  print("encoder gives \r\n");
	  printf("encoder 1 gives %d\r\n", encoderData_1);
 80007a8:	88fb      	ldrh	r3, [r7, #6]
 80007aa:	4619      	mov	r1, r3
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <main+0x8c>)
 80007ae:	f7ff ff9f 	bl	80006f0 <printf>
	  printf("encoder 2 gives %d\r\n", encoderData_2);
 80007b2:	88bb      	ldrh	r3, [r7, #4]
 80007b4:	4619      	mov	r1, r3
 80007b6:	4809      	ldr	r0, [pc, #36]	; (80007dc <main+0x90>)
 80007b8:	f7ff ff9a 	bl	80006f0 <printf>
//	  delay_us(65535);
	  HAL_Delay(100);
 80007bc:	2064      	movs	r0, #100	; 0x64
 80007be:	f000 fc55 	bl	800106c <HAL_Delay>
	  encoderData_1 = getPositionSPI(&hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 80007c2:	e7dd      	b.n	8000780 <main+0x34>
 80007c4:	200001bc 	.word	0x200001bc
 80007c8:	48000800 	.word	0x48000800
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	48000400 	.word	0x48000400
 80007d4:	200000f0 	.word	0x200000f0
 80007d8:	08005640 	.word	0x08005640
 80007dc:	08005658 	.word	0x08005658

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	; 0x58
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2244      	movs	r2, #68	; 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 fd9a 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000802:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000806:	f000 fedb 	bl	80015c0 <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 f837 	bl	8000882 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081e:	2310      	movs	r3, #16
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000822:	2302      	movs	r3, #2
 8000824:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800082e:	230a      	movs	r3, #10
 8000830:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000832:	2307      	movs	r3, #7
 8000834:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000836:	2302      	movs	r3, #2
 8000838:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083a:	2302      	movs	r3, #2
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4618      	mov	r0, r3
 8000844:	f000 ff12 	bl	800166c <HAL_RCC_OscConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800084e:	f000 f818 	bl	8000882 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000852:	230f      	movs	r3, #15
 8000854:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000856:	2303      	movs	r3, #3
 8000858:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2104      	movs	r1, #4
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fb12 	bl	8001e94 <HAL_RCC_ClockConfig>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000876:	f000 f804 	bl	8000882 <Error_Handler>
  }
}
 800087a:	bf00      	nop
 800087c:	3758      	adds	r7, #88	; 0x58
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000886:	b672      	cpsid	i
}
 8000888:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088a:	e7fe      	b.n	800088a <Error_Handler+0x8>

0800088c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000890:	4b1b      	ldr	r3, [pc, #108]	; (8000900 <MX_SPI1_Init+0x74>)
 8000892:	4a1c      	ldr	r2, [pc, #112]	; (8000904 <MX_SPI1_Init+0x78>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_SPI1_Init+0x74>)
 8000898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800089c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b18      	ldr	r3, [pc, #96]	; (8000900 <MX_SPI1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI1_Init+0x74>)
 80008a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI1_Init+0x74>)
 80008c2:	2220      	movs	r2, #32
 80008c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI1_Init+0x74>)
 80008da:	2207      	movs	r2, #7
 80008dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_SPI1_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI1_Init+0x74>)
 80008e6:	2208      	movs	r2, #8
 80008e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_SPI1_Init+0x74>)
 80008ec:	f002 f832 	bl	8002954 <HAL_SPI_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008f6:	f7ff ffc4 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	2000008c 	.word	0x2000008c
 8000904:	40013000 	.word	0x40013000

08000908 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_SPI2_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_SPI2_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_SPI2_Init+0x74>)
 8000914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_SPI2_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_SPI2_Init+0x74>)
 8000922:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_SPI2_Init+0x74>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_SPI2_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_SPI2_Init+0x74>)
 8000936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800093a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_SPI2_Init+0x74>)
 800093e:	2220      	movs	r2, #32
 8000940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_SPI2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <MX_SPI2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <MX_SPI2_Init+0x74>)
 8000950:	2200      	movs	r2, #0
 8000952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MX_SPI2_Init+0x74>)
 8000956:	2207      	movs	r2, #7
 8000958:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <MX_SPI2_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <MX_SPI2_Init+0x74>)
 8000962:	2208      	movs	r2, #8
 8000964:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_SPI2_Init+0x74>)
 8000968:	f001 fff4 	bl	8002954 <HAL_SPI_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000972:	f7ff ff86 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000f0 	.word	0x200000f0
 8000980:	40003800 	.word	0x40003800

08000984 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_SPI3_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <MX_SPI3_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_SPI3_Init+0x74>)
 8000990:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000994:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_SPI3_Init+0x74>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_SPI3_Init+0x74>)
 800099e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009a2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009b6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009d2:	2207      	movs	r2, #7
 80009d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009de:	2208      	movs	r2, #8
 80009e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_SPI3_Init+0x74>)
 80009e4:	f001 ffb6 	bl	8002954 <HAL_SPI_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f7ff ff48 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000154 	.word	0x20000154
 80009fc:	40003c00 	.word	0x40003c00

08000a00 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	; 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a47      	ldr	r2, [pc, #284]	; (8000b3c <HAL_SPI_MspInit+0x13c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d12a      	bne.n	8000a78 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a22:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	4a46      	ldr	r2, [pc, #280]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a2e:	4b44      	ldr	r3, [pc, #272]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	4b41      	ldr	r3, [pc, #260]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a40      	ldr	r2, [pc, #256]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b3e      	ldr	r3, [pc, #248]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000a52:	f641 0302 	movw	r3, #6146	; 0x1802
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a64:	2305      	movs	r3, #5
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f000 fc05 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a76:	e05c      	b.n	8000b32 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_SPI_MspInit+0x144>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d129      	bne.n	8000ad6 <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	4a2e      	ldr	r2, [pc, #184]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000aa0:	f043 0302 	orr.w	r3, r3, #2
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ab2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ac4:	2305      	movs	r3, #5
 8000ac6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000acc:	4619      	mov	r1, r3
 8000ace:	481e      	ldr	r0, [pc, #120]	; (8000b48 <HAL_SPI_MspInit+0x148>)
 8000ad0:	f000 fbd6 	bl	8001280 <HAL_GPIO_Init>
}
 8000ad4:	e02d      	b.n	8000b32 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <HAL_SPI_MspInit+0x14c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d128      	bne.n	8000b32 <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000ae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aea:	6593      	str	r3, [r2, #88]	; 0x58
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	4a10      	ldr	r2, [pc, #64]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b04:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_SPI_MspInit+0x140>)
 8000b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000b10:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b22:	2306      	movs	r3, #6
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <HAL_SPI_MspInit+0x150>)
 8000b2e:	f000 fba7 	bl	8001280 <HAL_GPIO_Init>
}
 8000b32:	bf00      	nop
 8000b34:	3738      	adds	r7, #56	; 0x38
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013000 	.word	0x40013000
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40003800 	.word	0x40003800
 8000b48:	48000400 	.word	0x48000400
 8000b4c:	40003c00 	.word	0x40003c00
 8000b50:	48000800 	.word	0x48000800

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_MspInit+0x44>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6613      	str	r3, [r2, #96]	; 0x60
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_MspInit+0x44>)
 8000b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a08      	ldr	r2, [pc, #32]	; (8000b98 <HAL_MspInit+0x44>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_MspInit+0x44>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be8:	f000 fa20 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	e00a      	b.n	8000c18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c02:	f3af 8000 	nop.w
 8000c06:	4601      	mov	r1, r0
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	60ba      	str	r2, [r7, #8]
 8000c0e:	b2ca      	uxtb	r2, r1
 8000c10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	3301      	adds	r3, #1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	697a      	ldr	r2, [r7, #20]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbf0      	blt.n	8000c02 <_read+0x12>
  }

  return len;
 8000c20:	687b      	ldr	r3, [r7, #4]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	60f8      	str	r0, [r7, #12]
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	e009      	b.n	8000c50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	1c5a      	adds	r2, r3, #1
 8000c40:	60ba      	str	r2, [r7, #8]
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4618      	mov	r0, r3
 8000c46:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf1      	blt.n	8000c3c <_write+0x12>
  }
  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_close>:

int _close(int file)
{
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c9c:	4a14      	ldr	r2, [pc, #80]	; (8000cf0 <_sbrk+0x5c>)
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <_sbrk+0x60>)
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d102      	bne.n	8000cb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb0:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <_sbrk+0x64>)
 8000cb2:	4a12      	ldr	r2, [pc, #72]	; (8000cfc <_sbrk+0x68>)
 8000cb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cb6:	4b10      	ldr	r3, [pc, #64]	; (8000cf8 <_sbrk+0x64>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d207      	bcs.n	8000cd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc4:	f003 fb06 	bl	80042d4 <__errno>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	220c      	movs	r2, #12
 8000ccc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	e009      	b.n	8000ce8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <_sbrk+0x64>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <_sbrk+0x64>)
 8000cdc:	681a      	ldr	r2, [r3, #0]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <_sbrk+0x64>)
 8000ce4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	3718      	adds	r7, #24
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20010000 	.word	0x20010000
 8000cf4:	00000400 	.word	0x00000400
 8000cf8:	200001b8 	.word	0x200001b8
 8000cfc:	200002a0 	.word	0x200002a0

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <SystemInit+0x20>)
 8000d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d0a:	4a05      	ldr	r2, [pc, #20]	; (8000d20 <SystemInit+0x20>)
 8000d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b088      	sub	sp, #32
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d42:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d44:	4a20      	ldr	r2, [pc, #128]	; (8000dc8 <MX_TIM1_Init+0xa4>)
 8000d46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d4a:	224f      	movs	r2, #79	; 0x4f
 8000d4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d70:	f002 fa0a 	bl	8003188 <HAL_TIM_Base_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d7a:	f7ff fd82 	bl	8000882 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480e      	ldr	r0, [pc, #56]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000d8c:	f002 faa0 	bl	80032d0 <HAL_TIM_ConfigClockSource>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d96:	f7ff fd74 	bl	8000882 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM1_Init+0xa0>)
 8000dac:	f002 fc58 	bl	8003660 <HAL_TIMEx_MasterConfigSynchronization>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000db6:	f7ff fd64 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	200001bc 	.word	0x200001bc
 8000dc8:	40012c00 	.word	0x40012c00

08000dcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_TIM_Base_MspInit+0x38>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10b      	bne.n	8000df6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a09      	ldr	r2, [pc, #36]	; (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000de4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b07      	ldr	r3, [pc, #28]	; (8000e08 <HAL_TIM_Base_MspInit+0x3c>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000df6:	bf00      	nop
 8000df8:	3714      	adds	r7, #20
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	40012c00 	.word	0x40012c00
 8000e08:	40021000 	.word	0x40021000

08000e0c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e10:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e12:	4a15      	ldr	r2, [pc, #84]	; (8000e68 <MX_USART2_UART_Init+0x5c>)
 8000e14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e16:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e32:	220c      	movs	r2, #12
 8000e34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_USART2_UART_Init+0x58>)
 8000e50:	f002 fc6c 	bl	800372c <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e5a:	f7ff fd12 	bl	8000882 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000208 	.word	0x20000208
 8000e68:	40004400 	.word	0x40004400

08000e6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0a2      	sub	sp, #136	; 0x88
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e84:	f107 0314 	add.w	r3, r7, #20
 8000e88:	2260      	movs	r2, #96	; 0x60
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fa4b 	bl	8004328 <memset>
  if(uartHandle->Instance==USART2)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_UART_MspInit+0xac>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d138      	bne.n	8000f0e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f001 fa17 	bl	80022dc <HAL_RCCEx_PeriphCLKConfig>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb4:	f7ff fce5 	bl	8000882 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb8:	4b18      	ldr	r3, [pc, #96]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000eba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebc:	4a17      	ldr	r2, [pc, #92]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed0:	4b12      	ldr	r3, [pc, #72]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed4:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <HAL_UART_MspInit+0xb0>)
 8000ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee0:	f003 0301 	and.w	r3, r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee8:	230c      	movs	r3, #12
 8000eea:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eec:	2302      	movs	r3, #2
 8000eee:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000efa:	2307      	movs	r3, #7
 8000efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000f04:	4619      	mov	r1, r3
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f000 f9b9 	bl	8001280 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3788      	adds	r7, #136	; 0x88
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	40021000 	.word	0x40021000

08000f20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff feec 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480c      	ldr	r0, [pc, #48]	; (8000f5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2a:	490d      	ldr	r1, [pc, #52]	; (8000f60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <LoopForever+0xe>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f40:	4c0a      	ldr	r4, [pc, #40]	; (8000f6c <LoopForever+0x16>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f003 f9c7 	bl	80042e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f52:	f7ff fbfb 	bl	800074c <main>

08000f56 <LoopForever>:

LoopForever:
    b LoopForever
 8000f56:	e7fe      	b.n	8000f56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f60:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f64:	08005dfc 	.word	0x08005dfc
  ldr r2, =_sbss
 8000f68:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f6c:	200002a0 	.word	0x200002a0

08000f70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f70:	e7fe      	b.n	8000f70 <ADC1_IRQHandler>
	...

08000f74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_Init+0x3c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_Init+0x3c>)
 8000f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f88:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f8a:	2003      	movs	r0, #3
 8000f8c:	f000 f944 	bl	8001218 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f90:	2000      	movs	r0, #0
 8000f92:	f000 f80f 	bl	8000fb4 <HAL_InitTick>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d002      	beq.n	8000fa2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	71fb      	strb	r3, [r7, #7]
 8000fa0:	e001      	b.n	8000fa6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fa2:	f7ff fdd7 	bl	8000b54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40022000 	.word	0x40022000

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fc0:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_InitTick+0x6c>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d023      	beq.n	8001010 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fc8:	4b16      	ldr	r3, [pc, #88]	; (8001024 <HAL_InitTick+0x70>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <HAL_InitTick+0x6c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f941 	bl	8001266 <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10f      	bne.n	800100a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b0f      	cmp	r3, #15
 8000fee:	d809      	bhi.n	8001004 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	6879      	ldr	r1, [r7, #4]
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f000 f919 	bl	800122e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <HAL_InitTick+0x74>)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e007      	b.n	8001014 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
 8001008:	e004      	b.n	8001014 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	e001      	b.n	8001014 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001014:	7bfb      	ldrb	r3, [r7, #15]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008
 8001024:	20000000 	.word	0x20000000
 8001028:	20000004 	.word	0x20000004

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000008 	.word	0x20000008
 8001050:	2000028c 	.word	0x2000028c

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000028c 	.word	0x2000028c

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Delay+0x44>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008

080010b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c4:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010d0:	4013      	ands	r3, r2
 80010d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e6:	4a04      	ldr	r2, [pc, #16]	; (80010f8 <__NVIC_SetPriorityGrouping+0x44>)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	60d3      	str	r3, [r2, #12]
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001100:	4b04      	ldr	r3, [pc, #16]	; (8001114 <__NVIC_GetPriorityGrouping+0x18>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	f003 0307 	and.w	r3, r3, #7
}
 800110a:	4618      	mov	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e4:	d301      	bcc.n	80011ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e6:	2301      	movs	r3, #1
 80011e8:	e00f      	b.n	800120a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ea:	4a0a      	ldr	r2, [pc, #40]	; (8001214 <SysTick_Config+0x40>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f2:	210f      	movs	r1, #15
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f7ff ff8e 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <SysTick_Config+0x40>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <SysTick_Config+0x40>)
 8001204:	2207      	movs	r2, #7
 8001206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	e000e010 	.word	0xe000e010

08001218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ff47 	bl	80010b4 <__NVIC_SetPriorityGrouping>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b086      	sub	sp, #24
 8001232:	af00      	add	r7, sp, #0
 8001234:	4603      	mov	r3, r0
 8001236:	60b9      	str	r1, [r7, #8]
 8001238:	607a      	str	r2, [r7, #4]
 800123a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff5c 	bl	80010fc <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff8e 	bl	800116c <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ffb0 	bl	80011d4 <SysTick_Config>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128e:	e154      	b.n	800153a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f000 8146 	beq.w	8001534 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 0303 	and.w	r3, r3, #3
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x40>
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 0201 	and.w	r2, r3, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0203 	and.w	r2, r3, #3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 80a0 	beq.w	8001534 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b58      	ldr	r3, [pc, #352]	; (8001558 <HAL_GPIO_Init+0x2d8>)
 80013f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f8:	4a57      	ldr	r2, [pc, #348]	; (8001558 <HAL_GPIO_Init+0x2d8>)
 80013fa:	f043 0301 	orr.w	r3, r3, #1
 80013fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001400:	4b55      	ldr	r3, [pc, #340]	; (8001558 <HAL_GPIO_Init+0x2d8>)
 8001402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800140c:	4a53      	ldr	r2, [pc, #332]	; (800155c <HAL_GPIO_Init+0x2dc>)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f003 0303 	and.w	r3, r3, #3
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	220f      	movs	r2, #15
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001436:	d019      	beq.n	800146c <HAL_GPIO_Init+0x1ec>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a49      	ldr	r2, [pc, #292]	; (8001560 <HAL_GPIO_Init+0x2e0>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d013      	beq.n	8001468 <HAL_GPIO_Init+0x1e8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a48      	ldr	r2, [pc, #288]	; (8001564 <HAL_GPIO_Init+0x2e4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d00d      	beq.n	8001464 <HAL_GPIO_Init+0x1e4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a47      	ldr	r2, [pc, #284]	; (8001568 <HAL_GPIO_Init+0x2e8>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d007      	beq.n	8001460 <HAL_GPIO_Init+0x1e0>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a46      	ldr	r2, [pc, #280]	; (800156c <HAL_GPIO_Init+0x2ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d101      	bne.n	800145c <HAL_GPIO_Init+0x1dc>
 8001458:	2304      	movs	r3, #4
 800145a:	e008      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 800145c:	2307      	movs	r3, #7
 800145e:	e006      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001460:	2303      	movs	r3, #3
 8001462:	e004      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001464:	2302      	movs	r3, #2
 8001466:	e002      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 8001468:	2301      	movs	r3, #1
 800146a:	e000      	b.n	800146e <HAL_GPIO_Init+0x1ee>
 800146c:	2300      	movs	r3, #0
 800146e:	697a      	ldr	r2, [r7, #20]
 8001470:	f002 0203 	and.w	r2, r2, #3
 8001474:	0092      	lsls	r2, r2, #2
 8001476:	4093      	lsls	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800147e:	4937      	ldr	r1, [pc, #220]	; (800155c <HAL_GPIO_Init+0x2dc>)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	089b      	lsrs	r3, r3, #2
 8001484:	3302      	adds	r3, #2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	43db      	mvns	r3, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4013      	ands	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014b0:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	43db      	mvns	r3, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4013      	ands	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014e0:	4b23      	ldr	r3, [pc, #140]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4013      	ands	r3, r2
 80014ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d003      	beq.n	8001504 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001504:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	43db      	mvns	r3, r3
 8001514:	693a      	ldr	r2, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	4313      	orrs	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_GPIO_Init+0x2f0>)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	3301      	adds	r3, #1
 8001538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	f47f aea3 	bne.w	8001290 <HAL_GPIO_Init+0x10>
  }
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	371c      	adds	r7, #28
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	40021000 	.word	0x40021000
 800155c:	40010000 	.word	0x40010000
 8001560:	48000400 	.word	0x48000400
 8001564:	48000800 	.word	0x48000800
 8001568:	48000c00 	.word	0x48000c00
 800156c:	48001000 	.word	0x48001000
 8001570:	40010400 	.word	0x40010400

08001574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	807b      	strh	r3, [r7, #2]
 8001580:	4613      	mov	r3, r2
 8001582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001584:	787b      	ldrb	r3, [r7, #1]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800158a:	887a      	ldrh	r2, [r7, #2]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001590:	e002      	b.n	8001598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001592:	887a      	ldrh	r2, [r7, #2]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <HAL_PWREx_GetVoltageRange+0x18>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40007000 	.word	0x40007000

080015c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ce:	d130      	bne.n	8001632 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015d0:	4b23      	ldr	r3, [pc, #140]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015dc:	d038      	beq.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015e6:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2232      	movs	r2, #50	; 0x32
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0c9b      	lsrs	r3, r3, #18
 8001600:	3301      	adds	r3, #1
 8001602:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001604:	e002      	b.n	800160c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3b01      	subs	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001618:	d102      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x60>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f2      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001622:	695b      	ldr	r3, [r3, #20]
 8001624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001628:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800162c:	d110      	bne.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e00f      	b.n	8001652 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800163a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800163e:	d007      	beq.n	8001650 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001640:	4b07      	ldr	r3, [pc, #28]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001648:	4a05      	ldr	r2, [pc, #20]	; (8001660 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800164e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40007000 	.word	0x40007000
 8001664:	20000000 	.word	0x20000000
 8001668:	431bde83 	.word	0x431bde83

0800166c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	f000 bc02 	b.w	8001e84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001680:	4b96      	ldr	r3, [pc, #600]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f003 030c 	and.w	r3, r3, #12
 8001688:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800168a:	4b94      	ldr	r3, [pc, #592]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f003 0303 	and.w	r3, r3, #3
 8001692:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80e4 	beq.w	800186a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d007      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4c>
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	f040 808b 	bne.w	80017c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	f040 8087 	bne.w	80017c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b8:	4b88      	ldr	r3, [pc, #544]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_OscConfig+0x64>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e3d9      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1a      	ldr	r2, [r3, #32]
 80016d4:	4b81      	ldr	r3, [pc, #516]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0308 	and.w	r3, r3, #8
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <HAL_RCC_OscConfig+0x7e>
 80016e0:	4b7e      	ldr	r3, [pc, #504]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016e8:	e005      	b.n	80016f6 <HAL_RCC_OscConfig+0x8a>
 80016ea:	4b7c      	ldr	r3, [pc, #496]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80016ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d223      	bcs.n	8001742 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fd8c 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e3ba      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170e:	4b73      	ldr	r3, [pc, #460]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a72      	ldr	r2, [pc, #456]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001714:	f043 0308 	orr.w	r3, r3, #8
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b70      	ldr	r3, [pc, #448]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	496d      	ldr	r1, [pc, #436]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172c:	4b6b      	ldr	r3, [pc, #428]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	4968      	ldr	r1, [pc, #416]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
 8001740:	e025      	b.n	800178e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001742:	4b66      	ldr	r3, [pc, #408]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a65      	ldr	r2, [pc, #404]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4960      	ldr	r1, [pc, #384]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001760:	4b5e      	ldr	r3, [pc, #376]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69db      	ldr	r3, [r3, #28]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	495b      	ldr	r1, [pc, #364]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001770:	4313      	orrs	r3, r2
 8001772:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4618      	mov	r0, r3
 8001780:	f000 fd4c 	bl	800221c <RCC_SetFlashLatencyFromMSIRange>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e37a      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800178e:	f000 fc81 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8001792:	4602      	mov	r2, r0
 8001794:	4b51      	ldr	r3, [pc, #324]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	091b      	lsrs	r3, r3, #4
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	4950      	ldr	r1, [pc, #320]	; (80018e0 <HAL_RCC_OscConfig+0x274>)
 80017a0:	5ccb      	ldrb	r3, [r1, r3]
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	fa22 f303 	lsr.w	r3, r2, r3
 80017aa:	4a4e      	ldr	r2, [pc, #312]	; (80018e4 <HAL_RCC_OscConfig+0x278>)
 80017ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ae:	4b4e      	ldr	r3, [pc, #312]	; (80018e8 <HAL_RCC_OscConfig+0x27c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fbfe 	bl	8000fb4 <HAL_InitTick>
 80017b8:	4603      	mov	r3, r0
 80017ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017bc:	7bfb      	ldrb	r3, [r7, #15]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d052      	beq.n	8001868 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	e35e      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d032      	beq.n	8001834 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017ce:	4b43      	ldr	r3, [pc, #268]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a42      	ldr	r2, [pc, #264]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017da:	f7ff fc3b 	bl	8001054 <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc37 	bl	8001054 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e347      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f4:	4b39      	ldr	r3, [pc, #228]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a35      	ldr	r2, [pc, #212]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b33      	ldr	r3, [pc, #204]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	4930      	ldr	r1, [pc, #192]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181e:	4b2f      	ldr	r3, [pc, #188]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	492b      	ldr	r1, [pc, #172]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
 8001832:	e01a      	b.n	800186a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001834:	4b29      	ldr	r3, [pc, #164]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a28      	ldr	r2, [pc, #160]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc08 	bl	8001054 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001848:	f7ff fc04 	bl	8001054 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b02      	cmp	r3, #2
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e314      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x1dc>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d073      	beq.n	800195e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	2b08      	cmp	r3, #8
 800187a:	d005      	beq.n	8001888 <HAL_RCC_OscConfig+0x21c>
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	2b0c      	cmp	r3, #12
 8001880:	d10e      	bne.n	80018a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d10b      	bne.n	80018a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d063      	beq.n	800195c <HAL_RCC_OscConfig+0x2f0>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d15f      	bne.n	800195c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e2f1      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d106      	bne.n	80018b8 <HAL_RCC_OscConfig+0x24c>
 80018aa:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80018b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e025      	b.n	8001904 <HAL_RCC_OscConfig+0x298>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c0:	d114      	bne.n	80018ec <HAL_RCC_OscConfig+0x280>
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a05      	ldr	r2, [pc, #20]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80018c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	4b03      	ldr	r3, [pc, #12]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a02      	ldr	r2, [pc, #8]	; (80018dc <HAL_RCC_OscConfig+0x270>)
 80018d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x298>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	08005670 	.word	0x08005670
 80018e4:	20000000 	.word	0x20000000
 80018e8:	20000004 	.word	0x20000004
 80018ec:	4ba0      	ldr	r3, [pc, #640]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a9f      	ldr	r2, [pc, #636]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4b9d      	ldr	r3, [pc, #628]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a9c      	ldr	r2, [pc, #624]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80018fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d013      	beq.n	8001934 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190c:	f7ff fba2 	bl	8001054 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001914:	f7ff fb9e 	bl	8001054 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b64      	cmp	r3, #100	; 0x64
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e2ae      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001926:	4b92      	ldr	r3, [pc, #584]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x2a8>
 8001932:	e014      	b.n	800195e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001934:	f7ff fb8e 	bl	8001054 <HAL_GetTick>
 8001938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fb8a 	bl	8001054 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e29a      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800194e:	4b88      	ldr	r3, [pc, #544]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x2d0>
 800195a:	e000      	b.n	800195e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800195c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d060      	beq.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d005      	beq.n	800197c <HAL_RCC_OscConfig+0x310>
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d119      	bne.n	80019aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d116      	bne.n	80019aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	4b7c      	ldr	r3, [pc, #496]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_OscConfig+0x328>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e277      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b76      	ldr	r3, [pc, #472]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	4973      	ldr	r1, [pc, #460]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a8:	e040      	b.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d023      	beq.n	80019fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019b2:	4b6f      	ldr	r3, [pc, #444]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a6e      	ldr	r2, [pc, #440]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fb49 	bl	8001054 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fb45 	bl	8001054 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e255      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019d8:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e4:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	495f      	ldr	r1, [pc, #380]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e018      	b.n	8001a2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a5c      	ldr	r2, [pc, #368]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fb25 	bl	8001054 <HAL_GetTick>
 8001a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fb21 	bl	8001054 <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e231      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a20:	4b53      	ldr	r3, [pc, #332]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d03c      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	695b      	ldr	r3, [r3, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01c      	beq.n	8001a7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a40:	4b4b      	ldr	r3, [pc, #300]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a46:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff fb00 	bl	8001054 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff fafc 	bl	8001054 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e20c      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a6a:	4b41      	ldr	r3, [pc, #260]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ef      	beq.n	8001a58 <HAL_RCC_OscConfig+0x3ec>
 8001a78:	e01b      	b.n	8001ab2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a7a:	4b3d      	ldr	r3, [pc, #244]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a80:	4a3b      	ldr	r2, [pc, #236]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001a82:	f023 0301 	bic.w	r3, r3, #1
 8001a86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f7ff fae3 	bl	8001054 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a92:	f7ff fadf 	bl	8001054 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e1ef      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aa4:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1ef      	bne.n	8001a92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 80a6 	beq.w	8001c0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ac4:	4b2a      	ldr	r3, [pc, #168]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10d      	bne.n	8001aec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad0:	4b27      	ldr	r3, [pc, #156]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ada:	6593      	str	r3, [r2, #88]	; 0x58
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae4:	60bb      	str	r3, [r7, #8]
 8001ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aec:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <HAL_RCC_OscConfig+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d118      	bne.n	8001b2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001af8:	4b1e      	ldr	r3, [pc, #120]	; (8001b74 <HAL_RCC_OscConfig+0x508>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a1d      	ldr	r2, [pc, #116]	; (8001b74 <HAL_RCC_OscConfig+0x508>)
 8001afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b04:	f7ff faa6 	bl	8001054 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0c:	f7ff faa2 	bl	8001054 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e1b2      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_RCC_OscConfig+0x508>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4d8>
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	4a0d      	ldr	r2, [pc, #52]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b42:	e029      	b.n	8001b98 <HAL_RCC_OscConfig+0x52c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d115      	bne.n	8001b78 <HAL_RCC_OscConfig+0x50c>
 8001b4c:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b52:	4a07      	ldr	r2, [pc, #28]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001b54:	f043 0304 	orr.w	r3, r3, #4
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b62:	4a03      	ldr	r2, [pc, #12]	; (8001b70 <HAL_RCC_OscConfig+0x504>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b6c:	e014      	b.n	8001b98 <HAL_RCC_OscConfig+0x52c>
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40007000 	.word	0x40007000
 8001b78:	4b9a      	ldr	r3, [pc, #616]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7e:	4a99      	ldr	r2, [pc, #612]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b88:	4b96      	ldr	r3, [pc, #600]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	4a95      	ldr	r2, [pc, #596]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d016      	beq.n	8001bce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fa58 	bl	8001054 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ba6:	e00a      	b.n	8001bbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fa54 	bl	8001054 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e162      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bbe:	4b89      	ldr	r3, [pc, #548]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0ed      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x53c>
 8001bcc:	e015      	b.n	8001bfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bce:	f7ff fa41 	bl	8001054 <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd6:	f7ff fa3d 	bl	8001054 <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e14b      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bec:	4b7d      	ldr	r3, [pc, #500]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ed      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b78      	ldr	r3, [pc, #480]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c04:	4a77      	ldr	r2, [pc, #476]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d03c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d01c      	beq.n	8001c5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c26:	4a6f      	ldr	r2, [pc, #444]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7ff fa10 	bl	8001054 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c38:	f7ff fa0c 	bl	8001054 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e11c      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c4a:	4b66      	ldr	r3, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ef      	beq.n	8001c38 <HAL_RCC_OscConfig+0x5cc>
 8001c58:	e01b      	b.n	8001c92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c5a:	4b62      	ldr	r3, [pc, #392]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c60:	4a60      	ldr	r2, [pc, #384]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6a:	f7ff f9f3 	bl	8001054 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c72:	f7ff f9ef 	bl	8001054 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e0ff      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c84:	4b57      	ldr	r3, [pc, #348]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1ef      	bne.n	8001c72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80f3 	beq.w	8001e82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	f040 80c9 	bne.w	8001e38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ca6:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d12c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d123      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d11b      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d113      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf6:	085b      	lsrs	r3, r3, #1
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d109      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	085b      	lsrs	r3, r3, #1
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d06b      	beq.n	8001dec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d062      	beq.n	8001de0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d1a:	4b32      	ldr	r3, [pc, #200]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0ac      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d36:	f7ff f98d 	bl	8001054 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3e:	f7ff f989 	bl	8001054 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e099      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <HAL_RCC_OscConfig+0x77c>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d6c:	3a01      	subs	r2, #1
 8001d6e:	0112      	lsls	r2, r2, #4
 8001d70:	4311      	orrs	r1, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d76:	0212      	lsls	r2, r2, #8
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d7e:	0852      	lsrs	r2, r2, #1
 8001d80:	3a01      	subs	r2, #1
 8001d82:	0552      	lsls	r2, r2, #21
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d8a:	0852      	lsrs	r2, r2, #1
 8001d8c:	3a01      	subs	r2, #1
 8001d8e:	0652      	lsls	r2, r2, #25
 8001d90:	4311      	orrs	r1, r2
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d96:	06d2      	lsls	r2, r2, #27
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	4912      	ldr	r1, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da0:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dac:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a0c      	ldr	r2, [pc, #48]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db8:	f7ff f94c 	bl	8001054 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f948 	bl	8001054 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e058      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <HAL_RCC_OscConfig+0x778>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dde:	e050      	b.n	8001e82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e04f      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
 8001de4:	40021000 	.word	0x40021000
 8001de8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d144      	bne.n	8001e82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df8:	4b24      	ldr	r3, [pc, #144]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a23      	ldr	r2, [pc, #140]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a20      	ldr	r2, [pc, #128]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e10:	f7ff f920 	bl	8001054 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7ff f91c 	bl	8001054 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e02c      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e2a:	4b18      	ldr	r3, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0x7ac>
 8001e36:	e024      	b.n	8001e82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b0c      	cmp	r3, #12
 8001e3c:	d01f      	beq.n	8001e7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7ff f903 	bl	8001054 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f8ff 	bl	8001054 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e00f      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	4905      	ldr	r1, [pc, #20]	; (8001e8c <HAL_RCC_OscConfig+0x820>)
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_RCC_OscConfig+0x824>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60cb      	str	r3, [r1, #12]
 8001e7c:	e001      	b.n	8001e82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	feeefffc 	.word	0xfeeefffc

08001e94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0e7      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b75      	ldr	r3, [pc, #468]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d910      	bls.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 0207 	bic.w	r2, r3, #7
 8001ebe:	4970      	ldr	r1, [pc, #448]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec6:	4b6e      	ldr	r3, [pc, #440]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	683a      	ldr	r2, [r7, #0]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d001      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cf      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b66      	ldr	r3, [pc, #408]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d908      	bls.n	8001f06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b63      	ldr	r3, [pc, #396]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4960      	ldr	r1, [pc, #384]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d04c      	beq.n	8001fac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b03      	cmp	r3, #3
 8001f18:	d107      	bne.n	8001f2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f1a:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d121      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0a6      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e09a      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f4a:	4b4e      	ldr	r3, [pc, #312]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e08e      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5a:	4b4a      	ldr	r3, [pc, #296]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e086      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4943      	ldr	r1, [pc, #268]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f7c:	f7ff f86a 	bl	8001054 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7ff f866 	bl	8001054 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e06e      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d010      	beq.n	8001fda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d208      	bcs.n	8001fda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	492b      	ldr	r1, [pc, #172]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fda:	4b29      	ldr	r3, [pc, #164]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d210      	bcs.n	800200a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	4923      	ldr	r1, [pc, #140]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <HAL_RCC_ClockConfig+0x1ec>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e036      	b.n	8002078 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	4918      	ldr	r1, [pc, #96]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	4313      	orrs	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4910      	ldr	r1, [pc, #64]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002048:	f000 f824 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 800204c:	4602      	mov	r2, r0
 800204e:	4b0d      	ldr	r3, [pc, #52]	; (8002084 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 030f 	and.w	r3, r3, #15
 8002058:	490b      	ldr	r1, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x1f4>)
 800205a:	5ccb      	ldrb	r3, [r1, r3]
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	4a09      	ldr	r2, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1f8>)
 8002066:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002068:	4b09      	ldr	r3, [pc, #36]	; (8002090 <HAL_RCC_ClockConfig+0x1fc>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe ffa1 	bl	8000fb4 <HAL_InitTick>
 8002072:	4603      	mov	r3, r0
 8002074:	72fb      	strb	r3, [r7, #11]

  return status;
 8002076:	7afb      	ldrb	r3, [r7, #11]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40022000 	.word	0x40022000
 8002084:	40021000 	.word	0x40021000
 8002088:	08005670 	.word	0x08005670
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b089      	sub	sp, #36	; 0x24
 8002098:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020a2:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ac:	4b3b      	ldr	r3, [pc, #236]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x34>
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d121      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d11e      	bne.n	8002106 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020c8:	4b34      	ldr	r3, [pc, #208]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020d4:	4b31      	ldr	r3, [pc, #196]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020da:	0a1b      	lsrs	r3, r3, #8
 80020dc:	f003 030f 	and.w	r3, r3, #15
 80020e0:	61fb      	str	r3, [r7, #28]
 80020e2:	e005      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	091b      	lsrs	r3, r3, #4
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020f0:	4a2b      	ldr	r2, [pc, #172]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10d      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002104:	e00a      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d102      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800210e:	61bb      	str	r3, [r7, #24]
 8002110:	e004      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d101      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002118:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800211a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	2b0c      	cmp	r3, #12
 8002120:	d134      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d003      	beq.n	800213a <HAL_RCC_GetSysClockFreq+0xa6>
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d003      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0xac>
 8002138:	e005      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800213c:	617b      	str	r3, [r7, #20]
      break;
 800213e:	e005      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002142:	617b      	str	r3, [r7, #20]
      break;
 8002144:	e002      	b.n	800214c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	617b      	str	r3, [r7, #20]
      break;
 800214a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800214c:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	3301      	adds	r3, #1
 8002158:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	0a1b      	lsrs	r3, r3, #8
 8002160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	fb03 f202 	mul.w	r2, r3, r2
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	0e5b      	lsrs	r3, r3, #25
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	3301      	adds	r3, #1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	fbb2 f3f3 	udiv	r3, r2, r3
 800218a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800218c:	69bb      	ldr	r3, [r7, #24]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	; 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40021000 	.word	0x40021000
 80021a0:	08005688 	.word	0x08005688
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	007a1200 	.word	0x007a1200

080021ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4904      	ldr	r1, [pc, #16]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08005680 	.word	0x08005680

080021f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f4:	f7ff ffda 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0adb      	lsrs	r3, r3, #11
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4904      	ldr	r1, [pc, #16]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	08005680 	.word	0x08005680

0800221c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002224:	2300      	movs	r3, #0
 8002226:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002228:	4b2a      	ldr	r3, [pc, #168]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d003      	beq.n	800223c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002234:	f7ff f9b6 	bl	80015a4 <HAL_PWREx_GetVoltageRange>
 8002238:	6178      	str	r0, [r7, #20]
 800223a:	e014      	b.n	8002266 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	6593      	str	r3, [r2, #88]	; 0x58
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	60fb      	str	r3, [r7, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002254:	f7ff f9a6 	bl	80015a4 <HAL_PWREx_GetVoltageRange>
 8002258:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d10b      	bne.n	8002286 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b80      	cmp	r3, #128	; 0x80
 8002272:	d919      	bls.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2ba0      	cmp	r3, #160	; 0xa0
 8002278:	d902      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800227a:	2302      	movs	r3, #2
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	e013      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002280:	2301      	movs	r3, #1
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	e010      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b80      	cmp	r3, #128	; 0x80
 800228a:	d902      	bls.n	8002292 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800228c:	2303      	movs	r3, #3
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	e00a      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b80      	cmp	r3, #128	; 0x80
 8002296:	d102      	bne.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	e004      	b.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b70      	cmp	r3, #112	; 0x70
 80022a2:	d101      	bne.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a4:	2301      	movs	r3, #1
 80022a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 0207 	bic.w	r2, r3, #7
 80022b0:	4909      	ldr	r1, [pc, #36]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022b8:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d001      	beq.n	80022ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e000      	b.n	80022cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40022000 	.word	0x40022000

080022dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e4:	2300      	movs	r3, #0
 80022e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d031      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002300:	d01a      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002302:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002306:	d814      	bhi.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800230c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002310:	d10f      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231e:	e00c      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	2100      	movs	r1, #0
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fa22 	bl	8002770 <RCCEx_PLLSAI1_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002330:	e003      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	74fb      	strb	r3, [r7, #19]
      break;
 8002336:	e000      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002340:	4b51      	ldr	r3, [pc, #324]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	494e      	ldr	r1, [pc, #312]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002356:	e001      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 809e 	beq.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800236e:	4b46      	ldr	r3, [pc, #280]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800237e:	2300      	movs	r3, #0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00d      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b40      	ldr	r3, [pc, #256]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239c:	2301      	movs	r3, #1
 800239e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a0:	4b3a      	ldr	r3, [pc, #232]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a39      	ldr	r2, [pc, #228]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ac:	f7fe fe52 	bl	8001054 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023b2:	e009      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b4:	f7fe fe4e 	bl	8001054 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d902      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	74fb      	strb	r3, [r7, #19]
        break;
 80023c6:	e005      	b.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c8:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0ef      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d15a      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023da:	4b2b      	ldr	r3, [pc, #172]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01e      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d019      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002400:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002402:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002408:	4a1f      	ldr	r2, [pc, #124]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800240e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002412:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002418:	4a1b      	ldr	r2, [pc, #108]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800241a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800241e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002422:	4a19      	ldr	r2, [pc, #100]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b00      	cmp	r3, #0
 8002432:	d016      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7fe fe0e 	bl	8001054 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	e00b      	b.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243c:	f7fe fe0a 	bl	8001054 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d902      	bls.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	74fb      	strb	r3, [r7, #19]
            break;
 8002452:	e006      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ec      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10b      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002468:	4b07      	ldr	r3, [pc, #28]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800247e:	e009      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
 8002484:	e006      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000
 800248c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002490:	7cfb      	ldrb	r3, [r7, #19]
 8002492:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002494:	7c7b      	ldrb	r3, [r7, #17]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d105      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b8d      	ldr	r3, [pc, #564]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a8c      	ldr	r2, [pc, #560]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00a      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024b2:	4b87      	ldr	r3, [pc, #540]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b8:	f023 0203 	bic.w	r2, r3, #3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4983      	ldr	r1, [pc, #524]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00a      	beq.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d4:	4b7e      	ldr	r3, [pc, #504]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024da:	f023 020c 	bic.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	497b      	ldr	r1, [pc, #492]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	4972      	ldr	r1, [pc, #456]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002518:	4b6d      	ldr	r3, [pc, #436]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	496a      	ldr	r1, [pc, #424]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002548:	4961      	ldr	r1, [pc, #388]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800255c:	4b5c      	ldr	r3, [pc, #368]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4959      	ldr	r1, [pc, #356]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800257e:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258c:	4950      	ldr	r1, [pc, #320]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025a0:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ae:	4948      	ldr	r1, [pc, #288]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025c2:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d0:	493f      	ldr	r1, [pc, #252]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d028      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e4:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025f2:	4937      	ldr	r1, [pc, #220]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002602:	d106      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002604:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800260a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800260e:	60d3      	str	r3, [r2, #12]
 8002610:	e011      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800261a:	d10c      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3304      	adds	r3, #4
 8002620:	2101      	movs	r1, #1
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f8a4 	bl	8002770 <RCCEx_PLLSAI1_Config>
 8002628:	4603      	mov	r3, r0
 800262a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800262c:	7cfb      	ldrb	r3, [r7, #19]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d028      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002650:	491f      	ldr	r1, [pc, #124]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002660:	d106      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a1a      	ldr	r2, [pc, #104]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800266c:	60d3      	str	r3, [r2, #12]
 800266e:	e011      	b.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002674:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002678:	d10c      	bne.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f000 f875 	bl	8002770 <RCCEx_PLLSAI1_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002690:	7cfb      	ldrb	r3, [r7, #19]
 8002692:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d02b      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ae:	4908      	ldr	r1, [pc, #32]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026be:	d109      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a02      	ldr	r2, [pc, #8]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
 80026cc:	e014      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026dc:	d10c      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	2101      	movs	r1, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f843 	bl	8002770 <RCCEx_PLLSAI1_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d001      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01c      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002704:	4b19      	ldr	r3, [pc, #100]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002712:	4916      	ldr	r1, [pc, #88]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002722:	d10c      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3304      	adds	r3, #4
 8002728:	2102      	movs	r1, #2
 800272a:	4618      	mov	r0, r3
 800272c:	f000 f820 	bl	8002770 <RCCEx_PLLSAI1_Config>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800274a:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800274c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002750:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800275a:	4313      	orrs	r3, r2
 800275c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002760:	7cbb      	ldrb	r3, [r7, #18]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3718      	adds	r7, #24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40021000 	.word	0x40021000

08002770 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800277e:	4b74      	ldr	r3, [pc, #464]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d018      	beq.n	80027bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800278a:	4b71      	ldr	r3, [pc, #452]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f003 0203 	and.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d10d      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
       ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027a2:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	091b      	lsrs	r3, r3, #4
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
       ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d047      	beq.n	8002846 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	e044      	b.n	8002846 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d018      	beq.n	80027f6 <RCCEx_PLLSAI1_Config+0x86>
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d825      	bhi.n	8002814 <RCCEx_PLLSAI1_Config+0xa4>
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d002      	beq.n	80027d2 <RCCEx_PLLSAI1_Config+0x62>
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d009      	beq.n	80027e4 <RCCEx_PLLSAI1_Config+0x74>
 80027d0:	e020      	b.n	8002814 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027d2:	4b5f      	ldr	r3, [pc, #380]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11d      	bne.n	800281a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e2:	e01a      	b.n	800281a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d116      	bne.n	800281e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f4:	e013      	b.n	800281e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027f6:	4b56      	ldr	r3, [pc, #344]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d10f      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002802:	4b53      	ldr	r3, [pc, #332]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002812:	e006      	b.n	8002822 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      break;
 8002818:	e004      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281a:	bf00      	nop
 800281c:	e002      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002822:	bf00      	nop
    }

    if(status == HAL_OK)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10d      	bne.n	8002846 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800282a:	4b49      	ldr	r3, [pc, #292]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6819      	ldr	r1, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	3b01      	subs	r3, #1
 800283c:	011b      	lsls	r3, r3, #4
 800283e:	430b      	orrs	r3, r1
 8002840:	4943      	ldr	r1, [pc, #268]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d17c      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fbfc 	bl	8001054 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800285e:	e009      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002860:	f7fe fbf8 	bl	8001054 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	73fb      	strb	r3, [r7, #15]
        break;
 8002872:	e005      	b.n	8002880 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002874:	4b36      	ldr	r3, [pc, #216]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1ef      	bne.n	8002860 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d15f      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d110      	bne.n	80028ae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800288c:	4b30      	ldr	r3, [pc, #192]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6892      	ldr	r2, [r2, #8]
 800289c:	0211      	lsls	r1, r2, #8
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	68d2      	ldr	r2, [r2, #12]
 80028a2:	06d2      	lsls	r2, r2, #27
 80028a4:	430a      	orrs	r2, r1
 80028a6:	492a      	ldr	r1, [pc, #168]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	610b      	str	r3, [r1, #16]
 80028ac:	e027      	b.n	80028fe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d112      	bne.n	80028da <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028b6:	691b      	ldr	r3, [r3, #16]
 80028b8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6892      	ldr	r2, [r2, #8]
 80028c4:	0211      	lsls	r1, r2, #8
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6912      	ldr	r2, [r2, #16]
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0552      	lsls	r2, r2, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	491f      	ldr	r1, [pc, #124]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	610b      	str	r3, [r1, #16]
 80028d8:	e011      	b.n	80028fe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028e2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6892      	ldr	r2, [r2, #8]
 80028ea:	0211      	lsls	r1, r2, #8
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	6952      	ldr	r2, [r2, #20]
 80028f0:	0852      	lsrs	r2, r2, #1
 80028f2:	3a01      	subs	r2, #1
 80028f4:	0652      	lsls	r2, r2, #25
 80028f6:	430a      	orrs	r2, r1
 80028f8:	4915      	ldr	r1, [pc, #84]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028fe:	4b14      	ldr	r3, [pc, #80]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a13      	ldr	r2, [pc, #76]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002904:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002908:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7fe fba3 	bl	8001054 <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002910:	e009      	b.n	8002926 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002912:	f7fe fb9f 	bl	8001054 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b02      	cmp	r3, #2
 800291e:	d902      	bls.n	8002926 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	73fb      	strb	r3, [r7, #15]
          break;
 8002924:	e005      	b.n	8002932 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0ef      	beq.n	8002912 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000

08002954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e095      	b.n	8002a92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d108      	bne.n	8002980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002976:	d009      	beq.n	800298c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	61da      	str	r2, [r3, #28]
 800297e:	e005      	b.n	800298c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7fe f82a 	bl	8000a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2202      	movs	r2, #2
 80029b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029cc:	d902      	bls.n	80029d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e002      	b.n	80029da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80029e2:	d007      	beq.n	80029f4 <HAL_SPI_Init+0xa0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a36:	ea42 0103 	orr.w	r1, r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	0c1b      	lsrs	r3, r3, #16
 8002a50:	f003 0204 	and.w	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	f003 0310 	and.w	r3, r3, #16
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a70:	ea42 0103 	orr.w	r1, r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b08a      	sub	sp, #40	; 0x28
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
 8002aa6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_SPI_TransmitReceive+0x26>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e1fb      	b.n	8002eb8 <HAL_SPI_TransmitReceive+0x41e>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ac8:	f7fe fac4 	bl	8001054 <HAL_GetTick>
 8002acc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ad4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002adc:	887b      	ldrh	r3, [r7, #2]
 8002ade:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ae4:	7efb      	ldrb	r3, [r7, #27]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d00e      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x6e>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002af0:	d106      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <HAL_SPI_TransmitReceive+0x66>
 8002afa:	7efb      	ldrb	r3, [r7, #27]
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d003      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002b00:	2302      	movs	r3, #2
 8002b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002b06:	e1cd      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0x80>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_SPI_TransmitReceive+0x80>
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002b20:	e1c0      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d003      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2205      	movs	r2, #5
 8002b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	887a      	ldrh	r2, [r7, #2]
 8002b46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	887a      	ldrh	r2, [r7, #2]
 8002b4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	887a      	ldrh	r2, [r7, #2]
 8002b62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b78:	d802      	bhi.n	8002b80 <HAL_SPI_TransmitReceive+0xe6>
 8002b7a:	8a3b      	ldrh	r3, [r7, #16]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d908      	bls.n	8002b92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8e:	605a      	str	r2, [r3, #4]
 8002b90:	e007      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d007      	beq.n	8002bc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002bc8:	d97c      	bls.n	8002cc4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d002      	beq.n	8002bd8 <HAL_SPI_TransmitReceive+0x13e>
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d169      	bne.n	8002cac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	881a      	ldrh	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	1c9a      	adds	r2, r3, #2
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bfc:	e056      	b.n	8002cac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0302 	and.w	r3, r3, #2
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d11b      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x1aa>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x1aa>
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d113      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c20:	881a      	ldrh	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	1c9a      	adds	r2, r3, #2
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d11c      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x1f2>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d016      	beq.n	8002c8c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	b292      	uxth	r2, r2
 8002c6a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	1c9a      	adds	r2, r3, #2
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c8c:	f7fe f9e2 	bl	8001054 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d807      	bhi.n	8002cac <HAL_SPI_TransmitReceive+0x212>
 8002c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca2:	d003      	beq.n	8002cac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002caa:	e0fb      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1a3      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0x164>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d19d      	bne.n	8002bfe <HAL_SPI_TransmitReceive+0x164>
 8002cc2:	e0df      	b.n	8002e84 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d003      	beq.n	8002cd4 <HAL_SPI_TransmitReceive+0x23a>
 8002ccc:	8a7b      	ldrh	r3, [r7, #18]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	f040 80cb 	bne.w	8002e6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d912      	bls.n	8002d04 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	881a      	ldrh	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	1c9a      	adds	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b02      	subs	r3, #2
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d02:	e0b2      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	330c      	adds	r3, #12
 8002d0e:	7812      	ldrb	r2, [r2, #0]
 8002d10:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d2a:	e09e      	b.n	8002e6a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d134      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x30a>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02f      	beq.n	8002da4 <HAL_SPI_TransmitReceive+0x30a>
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d12c      	bne.n	8002da4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d912      	bls.n	8002d7a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	881a      	ldrh	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	1c9a      	adds	r2, r3, #2
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	3b02      	subs	r3, #2
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d78:	e012      	b.n	8002da0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	330c      	adds	r3, #12
 8002d84:	7812      	ldrb	r2, [r2, #0]
 8002d86:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d148      	bne.n	8002e44 <HAL_SPI_TransmitReceive+0x3aa>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d042      	beq.n	8002e44 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d923      	bls.n	8002e12 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	1c9a      	adds	r2, r3, #2
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b02      	subs	r3, #2
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d81f      	bhi.n	8002e40 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e0e:	605a      	str	r2, [r3, #4]
 8002e10:	e016      	b.n	8002e40 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f103 020c 	add.w	r2, r3, #12
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	7812      	ldrb	r2, [r2, #0]
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e40:	2301      	movs	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002e44:	f7fe f906 	bl	8001054 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d803      	bhi.n	8002e5c <HAL_SPI_TransmitReceive+0x3c2>
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5a:	d102      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x3c8>
 8002e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d103      	bne.n	8002e6a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002e68:	e01c      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f47f af5b 	bne.w	8002d2c <HAL_SPI_TransmitReceive+0x292>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f47f af54 	bne.w	8002d2c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e84:	69fa      	ldr	r2, [r7, #28]
 8002e86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f937 	bl	80030fc <SPI_EndRxTxTransaction>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d006      	beq.n	8002ea2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	661a      	str	r2, [r3, #96]	; 0x60
 8002ea0:	e000      	b.n	8002ea4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002ea2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3728      	adds	r7, #40	; 0x28
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ed0:	f7fe f8c0 	bl	8001054 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002ee0:	f7fe f8b8 	bl	8001054 <HAL_GetTick>
 8002ee4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002ee6:	4b39      	ldr	r3, [pc, #228]	; (8002fcc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	015b      	lsls	r3, r3, #5
 8002eec:	0d1b      	lsrs	r3, r3, #20
 8002eee:	69fa      	ldr	r2, [r7, #28]
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ef6:	e054      	b.n	8002fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efe:	d050      	beq.n	8002fa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f00:	f7fe f8a8 	bl	8001054 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d902      	bls.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d13d      	bne.n	8002f92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f2e:	d111      	bne.n	8002f54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f38:	d004      	beq.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f42:	d107      	bne.n	8002f54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5c:	d10f      	bne.n	8002f7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e017      	b.n	8002fc2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d19b      	bne.n	8002ef8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b08a      	sub	sp, #40	; 0x28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002fe2:	f7fe f837 	bl	8001054 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	4413      	add	r3, r2
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002ff2:	f7fe f82f 	bl	8001054 <HAL_GetTick>
 8002ff6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	00da      	lsls	r2, r3, #3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	0d1b      	lsrs	r3, r3, #20
 8003010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003012:	fb02 f303 	mul.w	r3, r2, r3
 8003016:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003018:	e060      	b.n	80030dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003020:	d107      	bne.n	8003032 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d104      	bne.n	8003032 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	b2db      	uxtb	r3, r3
 800302e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003030:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d050      	beq.n	80030dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800303a:	f7fe f80b 	bl	8001054 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003046:	429a      	cmp	r2, r3
 8003048:	d902      	bls.n	8003050 <SPI_WaitFifoStateUntilTimeout+0x80>
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	2b00      	cmp	r3, #0
 800304e:	d13d      	bne.n	80030cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800305e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003068:	d111      	bne.n	800308e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003072:	d004      	beq.n	800307e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307c:	d107      	bne.n	800308e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003096:	d10f      	bne.n	80030b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e010      	b.n	80030ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80030d2:	2300      	movs	r3, #0
 80030d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	3b01      	subs	r3, #1
 80030da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689a      	ldr	r2, [r3, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d196      	bne.n	800301a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3728      	adds	r7, #40	; 0x28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000000 	.word	0x20000000

080030fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af02      	add	r7, sp, #8
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2200      	movs	r2, #0
 8003110:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f7ff ff5b 	bl	8002fd0 <SPI_WaitFifoStateUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	f043 0220 	orr.w	r2, r3, #32
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e027      	b.n	8003180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff fec0 	bl	8002ec0 <SPI_WaitFlagStateUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e014      	b.n	8003180 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ff34 	bl	8002fd0 <SPI_WaitFifoStateUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d007      	beq.n	800317e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e000      	b.n	8003180 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800317e:	2300      	movs	r3, #0
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e049      	b.n	800322e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fe0c 	bl	8000dcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3304      	adds	r3, #4
 80031c4:	4619      	mov	r1, r3
 80031c6:	4610      	mov	r0, r2
 80031c8:	f000 f94c 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
	...

08003238 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	d001      	beq.n	8003250 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e033      	b.n	80032b8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2202      	movs	r2, #2
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a19      	ldr	r2, [pc, #100]	; (80032c4 <HAL_TIM_Base_Start+0x8c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_TIM_Base_Start+0x3e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326a:	d004      	beq.n	8003276 <HAL_TIM_Base_Start+0x3e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <HAL_TIM_Base_Start+0x90>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d115      	bne.n	80032a2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b13      	ldr	r3, [pc, #76]	; (80032cc <HAL_TIM_Base_Start+0x94>)
 800327e:	4013      	ands	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b06      	cmp	r3, #6
 8003286:	d015      	beq.n	80032b4 <HAL_TIM_Base_Start+0x7c>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328e:	d011      	beq.n	80032b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f042 0201 	orr.w	r2, r2, #1
 800329e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a0:	e008      	b.n	80032b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0201 	orr.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	e000      	b.n	80032b6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	40012c00 	.word	0x40012c00
 80032c8:	40014000 	.word	0x40014000
 80032cc:	00010007 	.word	0x00010007

080032d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032da:	2300      	movs	r3, #0
 80032dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_TIM_ConfigClockSource+0x1c>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e0b6      	b.n	800345a <HAL_TIM_ConfigClockSource+0x18a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800330e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003316:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003328:	d03e      	beq.n	80033a8 <HAL_TIM_ConfigClockSource+0xd8>
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	f200 8087 	bhi.w	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	f000 8086 	beq.w	8003446 <HAL_TIM_ConfigClockSource+0x176>
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333e:	d87f      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003340:	2b70      	cmp	r3, #112	; 0x70
 8003342:	d01a      	beq.n	800337a <HAL_TIM_ConfigClockSource+0xaa>
 8003344:	2b70      	cmp	r3, #112	; 0x70
 8003346:	d87b      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003348:	2b60      	cmp	r3, #96	; 0x60
 800334a:	d050      	beq.n	80033ee <HAL_TIM_ConfigClockSource+0x11e>
 800334c:	2b60      	cmp	r3, #96	; 0x60
 800334e:	d877      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003350:	2b50      	cmp	r3, #80	; 0x50
 8003352:	d03c      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0xfe>
 8003354:	2b50      	cmp	r3, #80	; 0x50
 8003356:	d873      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003358:	2b40      	cmp	r3, #64	; 0x40
 800335a:	d058      	beq.n	800340e <HAL_TIM_ConfigClockSource+0x13e>
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d86f      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003360:	2b30      	cmp	r3, #48	; 0x30
 8003362:	d064      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 8003364:	2b30      	cmp	r3, #48	; 0x30
 8003366:	d86b      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003368:	2b20      	cmp	r3, #32
 800336a:	d060      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 800336c:	2b20      	cmp	r3, #32
 800336e:	d867      	bhi.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d05c      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 8003374:	2b10      	cmp	r3, #16
 8003376:	d05a      	beq.n	800342e <HAL_TIM_ConfigClockSource+0x15e>
 8003378:	e062      	b.n	8003440 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f000 f949 	bl	8003620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800339c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	609a      	str	r2, [r3, #8]
      break;
 80033a6:	e04f      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6818      	ldr	r0, [r3, #0]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f000 f932 	bl	8003620 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ca:	609a      	str	r2, [r3, #8]
      break;
 80033cc:	e03c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	461a      	mov	r2, r3
 80033dc:	f000 f8a6 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2150      	movs	r1, #80	; 0x50
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 f8ff 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 80033ec:	e02c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	6859      	ldr	r1, [r3, #4]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f000 f8c5 	bl	800358a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2160      	movs	r1, #96	; 0x60
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f8ef 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 800340c:	e01c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	461a      	mov	r2, r3
 800341c:	f000 f886 	bl	800352c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2140      	movs	r1, #64	; 0x40
 8003426:	4618      	mov	r0, r3
 8003428:	f000 f8df 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 800342c:	e00c      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4619      	mov	r1, r3
 8003438:	4610      	mov	r0, r2
 800343a:	f000 f8d6 	bl	80035ea <TIM_ITRx_SetConfig>
      break;
 800343e:	e003      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
      break;
 8003444:	e000      	b.n	8003448 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003446:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003458:	7bfb      	ldrb	r3, [r7, #15]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a2a      	ldr	r2, [pc, #168]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0x20>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003482:	d108      	bne.n	8003496 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00b      	beq.n	80034b6 <TIM_Base_SetConfig+0x52>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a4:	d007      	beq.n	80034b6 <TIM_Base_SetConfig+0x52>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1e      	ldr	r2, [pc, #120]	; (8003524 <TIM_Base_SetConfig+0xc0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d003      	beq.n	80034b6 <TIM_Base_SetConfig+0x52>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1d      	ldr	r2, [pc, #116]	; (8003528 <TIM_Base_SetConfig+0xc4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d108      	bne.n	80034c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	689a      	ldr	r2, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0c      	ldr	r2, [pc, #48]	; (8003520 <TIM_Base_SetConfig+0xbc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d007      	beq.n	8003504 <TIM_Base_SetConfig+0xa0>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a0b      	ldr	r2, [pc, #44]	; (8003524 <TIM_Base_SetConfig+0xc0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d003      	beq.n	8003504 <TIM_Base_SetConfig+0xa0>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a0a      	ldr	r2, [pc, #40]	; (8003528 <TIM_Base_SetConfig+0xc4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d103      	bne.n	800350c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	691a      	ldr	r2, [r3, #16]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	615a      	str	r2, [r3, #20]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40014000 	.word	0x40014000
 8003528:	40014400 	.word	0x40014400

0800352c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	f023 030a 	bic.w	r3, r3, #10
 8003568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	f023 0210 	bic.w	r2, r3, #16
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	031b      	lsls	r3, r3, #12
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	4313      	orrs	r3, r2
 80035be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	bf00      	nop
 80035e0:	371c      	adds	r7, #28
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ea:	b480      	push	{r7}
 80035ec:	b085      	sub	sp, #20
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003600:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	4313      	orrs	r3, r2
 8003608:	f043 0307 	orr.w	r3, r3, #7
 800360c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	609a      	str	r2, [r3, #8]
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800363a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	021a      	lsls	r2, r3, #8
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	431a      	orrs	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4313      	orrs	r3, r2
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	697a      	ldr	r2, [r7, #20]
 8003652:	609a      	str	r2, [r3, #8]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003674:	2302      	movs	r3, #2
 8003676:	e04f      	b.n	8003718 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a21      	ldr	r2, [pc, #132]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d108      	bne.n	80036b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80036a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a14      	ldr	r2, [pc, #80]	; (8003724 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d004      	beq.n	80036ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012c00 	.word	0x40012c00
 8003728:	40014000 	.word	0x40014000

0800372c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e040      	b.n	80037c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fb8c 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f8c0 	bl	80038f0 <UART_SetConfig>
 8003770:	4603      	mov	r3, r0
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e022      	b.n	80037c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fb0e 	bl	8003da4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fb95 	bl	8003ee8 <UART_CheckIdleState>
 80037be:	4603      	mov	r3, r0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037dc:	2b20      	cmp	r3, #32
 80037de:	f040 8082 	bne.w	80038e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_UART_Transmit+0x26>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07a      	b.n	80038e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Transmit+0x38>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e073      	b.n	80038e8 <HAL_UART_Transmit+0x120>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2221      	movs	r2, #33	; 0x21
 8003814:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003816:	f7fd fc1d 	bl	8001054 <HAL_GetTick>
 800381a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	88fa      	ldrh	r2, [r7, #6]
 8003820:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	88fa      	ldrh	r2, [r7, #6]
 8003828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d108      	bne.n	8003848 <HAL_UART_Transmit+0x80>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d104      	bne.n	8003848 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800383e:	2300      	movs	r3, #0
 8003840:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	61bb      	str	r3, [r7, #24]
 8003846:	e003      	b.n	8003850 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003858:	e02d      	b.n	80038b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	2200      	movs	r2, #0
 8003862:	2180      	movs	r1, #128	; 0x80
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fb88 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e039      	b.n	80038e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10b      	bne.n	8003892 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003886:	b292      	uxth	r2, r2
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	3302      	adds	r3, #2
 800388e:	61bb      	str	r3, [r7, #24]
 8003890:	e008      	b.n	80038a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	b292      	uxth	r2, r2
 800389c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	3301      	adds	r3, #1
 80038a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038bc:	b29b      	uxth	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1cb      	bne.n	800385a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2200      	movs	r2, #0
 80038ca:	2140      	movs	r1, #64	; 0x40
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fb54 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e005      	b.n	80038e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038e2:	2300      	movs	r3, #0
 80038e4:	e000      	b.n	80038e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038e6:	2302      	movs	r3, #2
  }
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f4:	b08a      	sub	sp, #40	; 0x28
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038fa:	2300      	movs	r3, #0
 80038fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	431a      	orrs	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	431a      	orrs	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	4313      	orrs	r3, r2
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b9e      	ldr	r3, [pc, #632]	; (8003b98 <UART_SetConfig+0x2a8>)
 8003920:	4013      	ands	r3, r2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	6812      	ldr	r2, [r2, #0]
 8003926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003928:	430b      	orrs	r3, r1
 800392a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a93      	ldr	r2, [pc, #588]	; (8003b9c <UART_SetConfig+0x2ac>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d004      	beq.n	800395c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	4313      	orrs	r3, r2
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800396c:	430a      	orrs	r2, r1
 800396e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a8a      	ldr	r2, [pc, #552]	; (8003ba0 <UART_SetConfig+0x2b0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d126      	bne.n	80039c8 <UART_SetConfig+0xd8>
 800397a:	4b8a      	ldr	r3, [pc, #552]	; (8003ba4 <UART_SetConfig+0x2b4>)
 800397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b03      	cmp	r3, #3
 8003986:	d81b      	bhi.n	80039c0 <UART_SetConfig+0xd0>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0xa0>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039a1 	.word	0x080039a1
 8003994:	080039b1 	.word	0x080039b1
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b9 	.word	0x080039b9
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a6:	e0ab      	b.n	8003b00 <UART_SetConfig+0x210>
 80039a8:	2302      	movs	r3, #2
 80039aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ae:	e0a7      	b.n	8003b00 <UART_SetConfig+0x210>
 80039b0:	2304      	movs	r3, #4
 80039b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b6:	e0a3      	b.n	8003b00 <UART_SetConfig+0x210>
 80039b8:	2308      	movs	r3, #8
 80039ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039be:	e09f      	b.n	8003b00 <UART_SetConfig+0x210>
 80039c0:	2310      	movs	r3, #16
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c6:	e09b      	b.n	8003b00 <UART_SetConfig+0x210>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a76      	ldr	r2, [pc, #472]	; (8003ba8 <UART_SetConfig+0x2b8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d138      	bne.n	8003a44 <UART_SetConfig+0x154>
 80039d2:	4b74      	ldr	r3, [pc, #464]	; (8003ba4 <UART_SetConfig+0x2b4>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d82d      	bhi.n	8003a3c <UART_SetConfig+0x14c>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0xf8>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a3d 	.word	0x08003a3d
 80039f8:	08003a2d 	.word	0x08003a2d
 80039fc:	08003a3d 	.word	0x08003a3d
 8003a00:	08003a3d 	.word	0x08003a3d
 8003a04:	08003a3d 	.word	0x08003a3d
 8003a08:	08003a25 	.word	0x08003a25
 8003a0c:	08003a3d 	.word	0x08003a3d
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a35 	.word	0x08003a35
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e06d      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a24:	2302      	movs	r3, #2
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2a:	e069      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a2c:	2304      	movs	r3, #4
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a32:	e065      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a34:	2308      	movs	r3, #8
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3a:	e061      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a3c:	2310      	movs	r3, #16
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e05d      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a58      	ldr	r2, [pc, #352]	; (8003bac <UART_SetConfig+0x2bc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d125      	bne.n	8003a9a <UART_SetConfig+0x1aa>
 8003a4e:	4b55      	ldr	r3, [pc, #340]	; (8003ba4 <UART_SetConfig+0x2b4>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a58:	2b30      	cmp	r3, #48	; 0x30
 8003a5a:	d016      	beq.n	8003a8a <UART_SetConfig+0x19a>
 8003a5c:	2b30      	cmp	r3, #48	; 0x30
 8003a5e:	d818      	bhi.n	8003a92 <UART_SetConfig+0x1a2>
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d00a      	beq.n	8003a7a <UART_SetConfig+0x18a>
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d814      	bhi.n	8003a92 <UART_SetConfig+0x1a2>
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <UART_SetConfig+0x182>
 8003a6c:	2b10      	cmp	r3, #16
 8003a6e:	d008      	beq.n	8003a82 <UART_SetConfig+0x192>
 8003a70:	e00f      	b.n	8003a92 <UART_SetConfig+0x1a2>
 8003a72:	2300      	movs	r3, #0
 8003a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a78:	e042      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a80:	e03e      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a82:	2304      	movs	r3, #4
 8003a84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a88:	e03a      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a90:	e036      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a92:	2310      	movs	r3, #16
 8003a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a98:	e032      	b.n	8003b00 <UART_SetConfig+0x210>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a3f      	ldr	r2, [pc, #252]	; (8003b9c <UART_SetConfig+0x2ac>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d12a      	bne.n	8003afa <UART_SetConfig+0x20a>
 8003aa4:	4b3f      	ldr	r3, [pc, #252]	; (8003ba4 <UART_SetConfig+0x2b4>)
 8003aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aaa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab2:	d01a      	beq.n	8003aea <UART_SetConfig+0x1fa>
 8003ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab8:	d81b      	bhi.n	8003af2 <UART_SetConfig+0x202>
 8003aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abe:	d00c      	beq.n	8003ada <UART_SetConfig+0x1ea>
 8003ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ac4:	d815      	bhi.n	8003af2 <UART_SetConfig+0x202>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <UART_SetConfig+0x1e2>
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d008      	beq.n	8003ae2 <UART_SetConfig+0x1f2>
 8003ad0:	e00f      	b.n	8003af2 <UART_SetConfig+0x202>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad8:	e012      	b.n	8003b00 <UART_SetConfig+0x210>
 8003ada:	2302      	movs	r3, #2
 8003adc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae0:	e00e      	b.n	8003b00 <UART_SetConfig+0x210>
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae8:	e00a      	b.n	8003b00 <UART_SetConfig+0x210>
 8003aea:	2308      	movs	r3, #8
 8003aec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af0:	e006      	b.n	8003b00 <UART_SetConfig+0x210>
 8003af2:	2310      	movs	r3, #16
 8003af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af8:	e002      	b.n	8003b00 <UART_SetConfig+0x210>
 8003afa:	2310      	movs	r3, #16
 8003afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <UART_SetConfig+0x2ac>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	f040 808a 	bne.w	8003c20 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	d824      	bhi.n	8003b5e <UART_SetConfig+0x26e>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x22c>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003b5f 	.word	0x08003b5f
 8003b24:	08003b49 	.word	0x08003b49
 8003b28:	08003b5f 	.word	0x08003b5f
 8003b2c:	08003b4f 	.word	0x08003b4f
 8003b30:	08003b5f 	.word	0x08003b5f
 8003b34:	08003b5f 	.word	0x08003b5f
 8003b38:	08003b5f 	.word	0x08003b5f
 8003b3c:	08003b57 	.word	0x08003b57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b40:	f7fe fb40 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8003b44:	61f8      	str	r0, [r7, #28]
        break;
 8003b46:	e010      	b.n	8003b6a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <UART_SetConfig+0x2c0>)
 8003b4a:	61fb      	str	r3, [r7, #28]
        break;
 8003b4c:	e00d      	b.n	8003b6a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b4e:	f7fe faa1 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8003b52:	61f8      	str	r0, [r7, #28]
        break;
 8003b54:	e009      	b.n	8003b6a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5a:	61fb      	str	r3, [r7, #28]
        break;
 8003b5c:	e005      	b.n	8003b6a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8109 	beq.w	8003d84 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	69fa      	ldr	r2, [r7, #28]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d305      	bcc.n	8003b8e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d912      	bls.n	8003bb4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b94:	e0f6      	b.n	8003d84 <UART_SetConfig+0x494>
 8003b96:	bf00      	nop
 8003b98:	efff69f3 	.word	0xefff69f3
 8003b9c:	40008000 	.word	0x40008000
 8003ba0:	40013800 	.word	0x40013800
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	40004400 	.word	0x40004400
 8003bac:	40004800 	.word	0x40004800
 8003bb0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	461c      	mov	r4, r3
 8003bba:	4615      	mov	r5, r2
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	022b      	lsls	r3, r5, #8
 8003bc6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bca:	0222      	lsls	r2, r4, #8
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	6849      	ldr	r1, [r1, #4]
 8003bd0:	0849      	lsrs	r1, r1, #1
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	4688      	mov	r8, r1
 8003bd6:	4681      	mov	r9, r0
 8003bd8:	eb12 0a08 	adds.w	sl, r2, r8
 8003bdc:	eb43 0b09 	adc.w	fp, r3, r9
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	607a      	str	r2, [r7, #4]
 8003bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bee:	4650      	mov	r0, sl
 8003bf0:	4659      	mov	r1, fp
 8003bf2:	f7fc fb45 	bl	8000280 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c04:	d308      	bcc.n	8003c18 <UART_SetConfig+0x328>
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0c:	d204      	bcs.n	8003c18 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	60da      	str	r2, [r3, #12]
 8003c16:	e0b5      	b.n	8003d84 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c1e:	e0b1      	b.n	8003d84 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c28:	d15d      	bne.n	8003ce6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003c2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d827      	bhi.n	8003c82 <UART_SetConfig+0x392>
 8003c32:	a201      	add	r2, pc, #4	; (adr r2, 8003c38 <UART_SetConfig+0x348>)
 8003c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c38:	08003c5d 	.word	0x08003c5d
 8003c3c:	08003c65 	.word	0x08003c65
 8003c40:	08003c6d 	.word	0x08003c6d
 8003c44:	08003c83 	.word	0x08003c83
 8003c48:	08003c73 	.word	0x08003c73
 8003c4c:	08003c83 	.word	0x08003c83
 8003c50:	08003c83 	.word	0x08003c83
 8003c54:	08003c83 	.word	0x08003c83
 8003c58:	08003c7b 	.word	0x08003c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c5c:	f7fe fab2 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8003c60:	61f8      	str	r0, [r7, #28]
        break;
 8003c62:	e014      	b.n	8003c8e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7fe fac4 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8003c68:	61f8      	str	r0, [r7, #28]
        break;
 8003c6a:	e010      	b.n	8003c8e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c6c:	4b4c      	ldr	r3, [pc, #304]	; (8003da0 <UART_SetConfig+0x4b0>)
 8003c6e:	61fb      	str	r3, [r7, #28]
        break;
 8003c70:	e00d      	b.n	8003c8e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c72:	f7fe fa0f 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8003c76:	61f8      	str	r0, [r7, #28]
        break;
 8003c78:	e009      	b.n	8003c8e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c7e:	61fb      	str	r3, [r7, #28]
        break;
 8003c80:	e005      	b.n	8003c8e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d077      	beq.n	8003d84 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	005a      	lsls	r2, r3, #1
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	441a      	add	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d916      	bls.n	8003cde <UART_SetConfig+0x3ee>
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d212      	bcs.n	8003cde <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	f023 030f 	bic.w	r3, r3, #15
 8003cc0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc2:	69bb      	ldr	r3, [r7, #24]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	f003 0307 	and.w	r3, r3, #7
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	8afb      	ldrh	r3, [r7, #22]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	8afa      	ldrh	r2, [r7, #22]
 8003cda:	60da      	str	r2, [r3, #12]
 8003cdc:	e052      	b.n	8003d84 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ce4:	e04e      	b.n	8003d84 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ce6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d827      	bhi.n	8003d3e <UART_SetConfig+0x44e>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <UART_SetConfig+0x404>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d19 	.word	0x08003d19
 8003cf8:	08003d21 	.word	0x08003d21
 8003cfc:	08003d29 	.word	0x08003d29
 8003d00:	08003d3f 	.word	0x08003d3f
 8003d04:	08003d2f 	.word	0x08003d2f
 8003d08:	08003d3f 	.word	0x08003d3f
 8003d0c:	08003d3f 	.word	0x08003d3f
 8003d10:	08003d3f 	.word	0x08003d3f
 8003d14:	08003d37 	.word	0x08003d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d18:	f7fe fa54 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8003d1c:	61f8      	str	r0, [r7, #28]
        break;
 8003d1e:	e014      	b.n	8003d4a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d20:	f7fe fa66 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8003d24:	61f8      	str	r0, [r7, #28]
        break;
 8003d26:	e010      	b.n	8003d4a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d28:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <UART_SetConfig+0x4b0>)
 8003d2a:	61fb      	str	r3, [r7, #28]
        break;
 8003d2c:	e00d      	b.n	8003d4a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d2e:	f7fe f9b1 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8003d32:	61f8      	str	r0, [r7, #28]
        break;
 8003d34:	e009      	b.n	8003d4a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d3a:	61fb      	str	r3, [r7, #28]
        break;
 8003d3c:	e005      	b.n	8003d4a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d48:	bf00      	nop
    }

    if (pclk != 0U)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d019      	beq.n	8003d84 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	085a      	lsrs	r2, r3, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	441a      	add	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b0f      	cmp	r3, #15
 8003d68:	d909      	bls.n	8003d7e <UART_SetConfig+0x48e>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d205      	bcs.n	8003d7e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e002      	b.n	8003d84 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3728      	adds	r7, #40	; 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	00f42400 	.word	0x00f42400

08003da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	430a      	orrs	r2, r1
 8003dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	f003 0304 	and.w	r3, r3, #4
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00a      	beq.n	8003e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00a      	beq.n	8003e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01a      	beq.n	8003eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea2:	d10a      	bne.n	8003eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef8:	f7fd f8ac 	bl	8001054 <HAL_GetTick>
 8003efc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0308 	and.w	r3, r3, #8
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d10e      	bne.n	8003f2a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f82d 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e023      	b.n	8003f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d10e      	bne.n	8003f56 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f817 	bl	8003f7a <UART_WaitOnFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e00d      	b.n	8003f72 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b09c      	sub	sp, #112	; 0x70
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	603b      	str	r3, [r7, #0]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8a:	e0a5      	b.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f92:	f000 80a1 	beq.w	80040d8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f96:	f7fd f85d 	bl	8001054 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <UART_WaitOnFlagUntilTimeout+0x32>
 8003fa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d13e      	bne.n	800402a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fb4:	e853 3f00 	ldrex	r3, [r3]
 8003fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc0:	667b      	str	r3, [r7, #100]	; 0x64
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fcc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e6      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe8:	e853 3f00 	ldrex	r3, [r3]
 8003fec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ff0:	f023 0301 	bic.w	r3, r3, #1
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ffe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004000:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004006:	e841 2300 	strex	r3, r2, [r1]
 800400a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800400c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1e5      	bne.n	8003fde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2220      	movs	r2, #32
 800401c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e067      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d04f      	beq.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004042:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004046:	d147      	bne.n	80040d8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004050:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004070:	637b      	str	r3, [r7, #52]	; 0x34
 8004072:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e6      	bne.n	8004052 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3308      	adds	r3, #8
 800408a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	66bb      	str	r3, [r7, #104]	; 0x68
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3308      	adds	r3, #8
 80040a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040a4:	623a      	str	r2, [r7, #32]
 80040a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2220      	movs	r2, #32
 80040c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2220      	movs	r2, #32
 80040c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e010      	b.n	80040fa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69da      	ldr	r2, [r3, #28]
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	4013      	ands	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	461a      	mov	r2, r3
 80040f0:	79fb      	ldrb	r3, [r7, #7]
 80040f2:	429a      	cmp	r2, r3
 80040f4:	f43f af4a 	beq.w	8003f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3770      	adds	r7, #112	; 0x70
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <setCSLine>:
#define RES12           12
#define RES14           14


void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b082      	sub	sp, #8
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]
 800410e:	4613      	mov	r3, r2
 8004110:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8004112:	787a      	ldrb	r2, [r7, #1]
 8004114:	887b      	ldrh	r3, [r7, #2]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fd fa2b 	bl	8001574 <HAL_GPIO_WritePin>
}
 800411e:	bf00      	nop
 8004120:	3708      	adds	r7, #8
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b088      	sub	sp, #32
 800412a:	af02      	add	r7, sp, #8
 800412c:	60f8      	str	r0, [r7, #12]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	461a      	mov	r2, r3
 8004132:	460b      	mov	r3, r1
 8004134:	72fb      	strb	r3, [r7, #11]
 8004136:	4613      	mov	r3, r2
 8004138:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 800413a:	893b      	ldrh	r3, [r7, #8]
 800413c:	2200      	movs	r2, #0
 800413e:	4619      	mov	r1, r3
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f7ff ffde 	bl	8004102 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(3);
 8004146:	2003      	movs	r0, #3
 8004148:	f000 f8aa 	bl	80042a0 <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800414c:	f107 0217 	add.w	r2, r7, #23
 8004150:	f107 010b 	add.w	r1, r7, #11
 8004154:	230a      	movs	r3, #10
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	2301      	movs	r3, #1
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f7fe fc9d 	bl	8002a9a <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(3);
 8004160:	2003      	movs	r0, #3
 8004162:	f000 f89d 	bl	80042a0 <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 8004166:	f897 2020 	ldrb.w	r2, [r7, #32]
 800416a:	893b      	ldrh	r3, [r7, #8]
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7ff ffc7 	bl	8004102 <setCSLine>

  return data;
 8004174:	7dfb      	ldrb	r3, [r7, #23]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b08c      	sub	sp, #48	; 0x30
 8004182:	af02      	add	r7, sp, #8
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	4611      	mov	r1, r2
 800418a:	461a      	mov	r2, r3
 800418c:	460b      	mov	r3, r1
 800418e:	80fb      	strh	r3, [r7, #6]
 8004190:	4613      	mov	r3, r2
 8004192:	717b      	strb	r3, [r7, #5]
  uint16_t currentPosition;       //16-bit response from encoder
  uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum

  //get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
  currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8;
 8004194:	88fa      	ldrh	r2, [r7, #6]
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	9301      	str	r3, [sp, #4]
 800419a:	2300      	movs	r3, #0
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	2100      	movs	r1, #0
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7ff ffbe 	bl	8004126 <spiWriteRead>
 80041aa:	4603      	mov	r3, r0
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	84fb      	strh	r3, [r7, #38]	; 0x26

  //this is the time required between bytes as specified in the datasheet.
//  delay(timer, 3);
  delay_us_AMT22(3);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f000 f874 	bl	80042a0 <delay_us_AMT22>

  //OR the low byte with the currentPosition variable. release line after second byte
  currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer);
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	9301      	str	r3, [sp, #4]
 80041be:	2301      	movs	r3, #1
 80041c0:	9300      	str	r3, [sp, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	2100      	movs	r1, #0
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff ffac 	bl	8004126 <spiWriteRead>
 80041ce:	4603      	mov	r3, r0
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80041d4:	4313      	orrs	r3, r2
 80041d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++) binaryArray[i] = (0x01) & (currentPosition >> (i));
 80041d8:	2300      	movs	r3, #0
 80041da:	623b      	str	r3, [r7, #32]
 80041dc:	e010      	b.n	8004200 <getPositionSPI+0x82>
 80041de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	fa42 f303 	asr.w	r3, r2, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	b2d9      	uxtb	r1, r3
 80041ee:	f107 0210 	add.w	r2, r7, #16
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	4413      	add	r3, r2
 80041f6:	460a      	mov	r2, r1
 80041f8:	701a      	strb	r2, [r3, #0]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	3301      	adds	r3, #1
 80041fe:	623b      	str	r3, [r7, #32]
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	ddeb      	ble.n	80041de <getPositionSPI+0x60>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
 if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8004206:	7ffb      	ldrb	r3, [r7, #31]
 8004208:	4619      	mov	r1, r3
 800420a:	7f7a      	ldrb	r2, [r7, #29]
 800420c:	7efb      	ldrb	r3, [r7, #27]
 800420e:	4053      	eors	r3, r2
 8004210:	b2da      	uxtb	r2, r3
 8004212:	7e7b      	ldrb	r3, [r7, #25]
 8004214:	4053      	eors	r3, r2
 8004216:	b2da      	uxtb	r2, r3
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	4053      	eors	r3, r2
 800421c:	b2da      	uxtb	r2, r3
 800421e:	7d7b      	ldrb	r3, [r7, #21]
 8004220:	4053      	eors	r3, r2
 8004222:	b2da      	uxtb	r2, r3
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	4053      	eors	r3, r2
 8004228:	b2da      	uxtb	r2, r3
 800422a:	7c7b      	ldrb	r3, [r7, #17]
 800422c:	429a      	cmp	r2, r3
 800422e:	bf0c      	ite	eq
 8004230:	2301      	moveq	r3, #1
 8004232:	2300      	movne	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	4299      	cmp	r1, r3
 8004238:	d11e      	bne.n	8004278 <getPositionSPI+0xfa>
         && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 800423a:	7fbb      	ldrb	r3, [r7, #30]
 800423c:	4619      	mov	r1, r3
 800423e:	7f3a      	ldrb	r2, [r7, #28]
 8004240:	7ebb      	ldrb	r3, [r7, #26]
 8004242:	4053      	eors	r3, r2
 8004244:	b2da      	uxtb	r2, r3
 8004246:	7e3b      	ldrb	r3, [r7, #24]
 8004248:	4053      	eors	r3, r2
 800424a:	b2da      	uxtb	r2, r3
 800424c:	7dbb      	ldrb	r3, [r7, #22]
 800424e:	4053      	eors	r3, r2
 8004250:	b2da      	uxtb	r2, r3
 8004252:	7d3b      	ldrb	r3, [r7, #20]
 8004254:	4053      	eors	r3, r2
 8004256:	b2da      	uxtb	r2, r3
 8004258:	7cbb      	ldrb	r3, [r7, #18]
 800425a:	4053      	eors	r3, r2
 800425c:	b2da      	uxtb	r2, r3
 800425e:	7c3b      	ldrb	r3, [r7, #16]
 8004260:	429a      	cmp	r2, r3
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	4299      	cmp	r1, r3
 800426c:	d104      	bne.n	8004278 <getPositionSPI+0xfa>
   {
     //we got back a good position, so just mask away the checkbits
     currentPosition &= 0x3FFF;
 800426e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004270:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004274:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004276:	e002      	b.n	800427e <getPositionSPI+0x100>
   }
 else
 {
   currentPosition = 0xFFFF; //bad position
 8004278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800427c:	84fb      	strh	r3, [r7, #38]	; 0x26
 }
  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
 800427e:	797b      	ldrb	r3, [r7, #5]
 8004280:	2b0c      	cmp	r3, #12
 8004282:	d107      	bne.n	8004294 <getPositionSPI+0x116>
 8004284:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428a:	4293      	cmp	r3, r2
 800428c:	d002      	beq.n	8004294 <getPositionSPI+0x116>
 800428e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	84fb      	strh	r3, [r7, #38]	; 0x26
  return currentPosition;
 8004294:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8004296:	4618      	mov	r0, r3
 8004298:	3728      	adds	r7, #40	; 0x28
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80042aa:	4b09      	ldr	r3, [pc, #36]	; (80042d0 <delay_us_AMT22+0x30>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2200      	movs	r2, #0
 80042b0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80042b2:	bf00      	nop
 80042b4:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <delay_us_AMT22+0x30>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ba:	88fb      	ldrh	r3, [r7, #6]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d3f9      	bcc.n	80042b4 <delay_us_AMT22+0x14>
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	200001bc 	.word	0x200001bc

080042d4 <__errno>:
 80042d4:	4b01      	ldr	r3, [pc, #4]	; (80042dc <__errno+0x8>)
 80042d6:	6818      	ldr	r0, [r3, #0]
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	2000000c 	.word	0x2000000c

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	4d0d      	ldr	r5, [pc, #52]	; (8004318 <__libc_init_array+0x38>)
 80042e4:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e6:	1b64      	subs	r4, r4, r5
 80042e8:	10a4      	asrs	r4, r4, #2
 80042ea:	2600      	movs	r6, #0
 80042ec:	42a6      	cmp	r6, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	4d0b      	ldr	r5, [pc, #44]	; (8004320 <__libc_init_array+0x40>)
 80042f2:	4c0c      	ldr	r4, [pc, #48]	; (8004324 <__libc_init_array+0x44>)
 80042f4:	f001 f998 	bl	8005628 <_init>
 80042f8:	1b64      	subs	r4, r4, r5
 80042fa:	10a4      	asrs	r4, r4, #2
 80042fc:	2600      	movs	r6, #0
 80042fe:	42a6      	cmp	r6, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f855 3b04 	ldr.w	r3, [r5], #4
 8004308:	4798      	blx	r3
 800430a:	3601      	adds	r6, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004312:	4798      	blx	r3
 8004314:	3601      	adds	r6, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	08005df4 	.word	0x08005df4
 800431c:	08005df4 	.word	0x08005df4
 8004320:	08005df4 	.word	0x08005df4
 8004324:	08005df8 	.word	0x08005df8

08004328 <memset>:
 8004328:	4402      	add	r2, r0
 800432a:	4603      	mov	r3, r0
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	f803 1b01 	strb.w	r1, [r3], #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <_perror_r>:
 8004338:	6983      	ldr	r3, [r0, #24]
 800433a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433c:	68c4      	ldr	r4, [r0, #12]
 800433e:	4605      	mov	r5, r0
 8004340:	460e      	mov	r6, r1
 8004342:	b90b      	cbnz	r3, 8004348 <_perror_r+0x10>
 8004344:	f000 fc0c 	bl	8004b60 <__sinit>
 8004348:	4b43      	ldr	r3, [pc, #268]	; (8004458 <_perror_r+0x120>)
 800434a:	429c      	cmp	r4, r3
 800434c:	d132      	bne.n	80043b4 <_perror_r+0x7c>
 800434e:	686c      	ldr	r4, [r5, #4]
 8004350:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004352:	07d8      	lsls	r0, r3, #31
 8004354:	d405      	bmi.n	8004362 <_perror_r+0x2a>
 8004356:	89a3      	ldrh	r3, [r4, #12]
 8004358:	0599      	lsls	r1, r3, #22
 800435a:	d402      	bmi.n	8004362 <_perror_r+0x2a>
 800435c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800435e:	f000 fc9d 	bl	8004c9c <__retarget_lock_acquire_recursive>
 8004362:	4621      	mov	r1, r4
 8004364:	4628      	mov	r0, r5
 8004366:	f000 fb29 	bl	80049bc <_fflush_r>
 800436a:	bb6e      	cbnz	r6, 80043c8 <_perror_r+0x90>
 800436c:	6829      	ldr	r1, [r5, #0]
 800436e:	ab01      	add	r3, sp, #4
 8004370:	2201      	movs	r2, #1
 8004372:	4628      	mov	r0, r5
 8004374:	f000 f882 	bl	800447c <_strerror_r>
 8004378:	4607      	mov	r7, r0
 800437a:	2800      	cmp	r0, #0
 800437c:	d14f      	bne.n	800441e <_perror_r+0xe6>
 800437e:	4837      	ldr	r0, [pc, #220]	; (800445c <_perror_r+0x124>)
 8004380:	4f36      	ldr	r7, [pc, #216]	; (800445c <_perror_r+0x124>)
 8004382:	f7fb ff25 	bl	80001d0 <strlen>
 8004386:	4606      	mov	r6, r0
 8004388:	b156      	cbz	r6, 80043a0 <_perror_r+0x68>
 800438a:	4620      	mov	r0, r4
 800438c:	f000 fb52 	bl	8004a34 <fileno>
 8004390:	4633      	mov	r3, r6
 8004392:	4601      	mov	r1, r0
 8004394:	463a      	mov	r2, r7
 8004396:	4628      	mov	r0, r5
 8004398:	f000 fa78 	bl	800488c <_write_r>
 800439c:	2800      	cmp	r0, #0
 800439e:	da51      	bge.n	8004444 <_perror_r+0x10c>
 80043a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80043a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043aa:	07d2      	lsls	r2, r2, #31
 80043ac:	81a3      	strh	r3, [r4, #12]
 80043ae:	d54c      	bpl.n	800444a <_perror_r+0x112>
 80043b0:	b003      	add	sp, #12
 80043b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043b4:	4b2a      	ldr	r3, [pc, #168]	; (8004460 <_perror_r+0x128>)
 80043b6:	429c      	cmp	r4, r3
 80043b8:	d101      	bne.n	80043be <_perror_r+0x86>
 80043ba:	68ac      	ldr	r4, [r5, #8]
 80043bc:	e7c8      	b.n	8004350 <_perror_r+0x18>
 80043be:	4b29      	ldr	r3, [pc, #164]	; (8004464 <_perror_r+0x12c>)
 80043c0:	429c      	cmp	r4, r3
 80043c2:	bf08      	it	eq
 80043c4:	68ec      	ldreq	r4, [r5, #12]
 80043c6:	e7c3      	b.n	8004350 <_perror_r+0x18>
 80043c8:	7833      	ldrb	r3, [r6, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0ce      	beq.n	800436c <_perror_r+0x34>
 80043ce:	4630      	mov	r0, r6
 80043d0:	f7fb fefe 	bl	80001d0 <strlen>
 80043d4:	4607      	mov	r7, r0
 80043d6:	b157      	cbz	r7, 80043ee <_perror_r+0xb6>
 80043d8:	4620      	mov	r0, r4
 80043da:	f000 fb2b 	bl	8004a34 <fileno>
 80043de:	463b      	mov	r3, r7
 80043e0:	4601      	mov	r1, r0
 80043e2:	4632      	mov	r2, r6
 80043e4:	4628      	mov	r0, r5
 80043e6:	f000 fa51 	bl	800488c <_write_r>
 80043ea:	2800      	cmp	r0, #0
 80043ec:	da14      	bge.n	8004418 <_perror_r+0xe0>
 80043ee:	481e      	ldr	r0, [pc, #120]	; (8004468 <_perror_r+0x130>)
 80043f0:	4f1d      	ldr	r7, [pc, #116]	; (8004468 <_perror_r+0x130>)
 80043f2:	f7fb feed 	bl	80001d0 <strlen>
 80043f6:	4606      	mov	r6, r0
 80043f8:	2e00      	cmp	r6, #0
 80043fa:	d0b7      	beq.n	800436c <_perror_r+0x34>
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 fb19 	bl	8004a34 <fileno>
 8004402:	4633      	mov	r3, r6
 8004404:	4601      	mov	r1, r0
 8004406:	463a      	mov	r2, r7
 8004408:	4628      	mov	r0, r5
 800440a:	f000 fa3f 	bl	800488c <_write_r>
 800440e:	2800      	cmp	r0, #0
 8004410:	dbac      	blt.n	800436c <_perror_r+0x34>
 8004412:	1a36      	subs	r6, r6, r0
 8004414:	4407      	add	r7, r0
 8004416:	e7ef      	b.n	80043f8 <_perror_r+0xc0>
 8004418:	1a3f      	subs	r7, r7, r0
 800441a:	4406      	add	r6, r0
 800441c:	e7db      	b.n	80043d6 <_perror_r+0x9e>
 800441e:	f7fb fed7 	bl	80001d0 <strlen>
 8004422:	4606      	mov	r6, r0
 8004424:	2e00      	cmp	r6, #0
 8004426:	d0aa      	beq.n	800437e <_perror_r+0x46>
 8004428:	4620      	mov	r0, r4
 800442a:	f000 fb03 	bl	8004a34 <fileno>
 800442e:	4633      	mov	r3, r6
 8004430:	4601      	mov	r1, r0
 8004432:	463a      	mov	r2, r7
 8004434:	4628      	mov	r0, r5
 8004436:	f000 fa29 	bl	800488c <_write_r>
 800443a:	2800      	cmp	r0, #0
 800443c:	db9f      	blt.n	800437e <_perror_r+0x46>
 800443e:	1a36      	subs	r6, r6, r0
 8004440:	4407      	add	r7, r0
 8004442:	e7ef      	b.n	8004424 <_perror_r+0xec>
 8004444:	1a36      	subs	r6, r6, r0
 8004446:	4407      	add	r7, r0
 8004448:	e79e      	b.n	8004388 <_perror_r+0x50>
 800444a:	059b      	lsls	r3, r3, #22
 800444c:	d4b0      	bmi.n	80043b0 <_perror_r+0x78>
 800444e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004450:	f000 fc25 	bl	8004c9e <__retarget_lock_release_recursive>
 8004454:	e7ac      	b.n	80043b0 <_perror_r+0x78>
 8004456:	bf00      	nop
 8004458:	08005d78 	.word	0x08005d78
 800445c:	080056bf 	.word	0x080056bf
 8004460:	08005d98 	.word	0x08005d98
 8004464:	08005d58 	.word	0x08005d58
 8004468:	080056bc 	.word	0x080056bc

0800446c <perror>:
 800446c:	4b02      	ldr	r3, [pc, #8]	; (8004478 <perror+0xc>)
 800446e:	4601      	mov	r1, r0
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f7ff bf61 	b.w	8004338 <_perror_r>
 8004476:	bf00      	nop
 8004478:	2000000c 	.word	0x2000000c

0800447c <_strerror_r>:
 800447c:	b510      	push	{r4, lr}
 800447e:	4604      	mov	r4, r0
 8004480:	4608      	mov	r0, r1
 8004482:	4611      	mov	r1, r2
 8004484:	288e      	cmp	r0, #142	; 0x8e
 8004486:	f200 8130 	bhi.w	80046ea <_strerror_r+0x26e>
 800448a:	e8df f010 	tbh	[pc, r0, lsl #1]
 800448e:	0139      	.short	0x0139
 8004490:	0092008f 	.word	0x0092008f
 8004494:	00960094 	.word	0x00960094
 8004498:	009a0098 	.word	0x009a0098
 800449c:	009e009c 	.word	0x009e009c
 80044a0:	00a400a2 	.word	0x00a400a2
 80044a4:	00aa00a8 	.word	0x00aa00a8
 80044a8:	00ae00ac 	.word	0x00ae00ac
 80044ac:	00b0012e 	.word	0x00b0012e
 80044b0:	00b400b2 	.word	0x00b400b2
 80044b4:	00b800b6 	.word	0x00b800b6
 80044b8:	00c000be 	.word	0x00c000be
 80044bc:	00c800c6 	.word	0x00c800c6
 80044c0:	00cc00ca 	.word	0x00cc00ca
 80044c4:	00d200ce 	.word	0x00d200ce
 80044c8:	00d800d6 	.word	0x00d800d6
 80044cc:	00dc00da 	.word	0x00dc00da
 80044d0:	00e000de 	.word	0x00e000de
 80044d4:	00e400e2 	.word	0x00e400e2
 80044d8:	012e012e 	.word	0x012e012e
 80044dc:	012e012e 	.word	0x012e012e
 80044e0:	012e012e 	.word	0x012e012e
 80044e4:	012e012e 	.word	0x012e012e
 80044e8:	00ec00e8 	.word	0x00ec00e8
 80044ec:	012e012e 	.word	0x012e012e
 80044f0:	012e012e 	.word	0x012e012e
 80044f4:	012e012e 	.word	0x012e012e
 80044f8:	012e012e 	.word	0x012e012e
 80044fc:	012e012e 	.word	0x012e012e
 8004500:	012e012e 	.word	0x012e012e
 8004504:	00ee012e 	.word	0x00ee012e
 8004508:	00f00108 	.word	0x00f00108
 800450c:	012e00f2 	.word	0x012e00f2
 8004510:	012e012e 	.word	0x012e012e
 8004514:	012e00f4 	.word	0x012e00f4
 8004518:	012e012e 	.word	0x012e012e
 800451c:	012e00f6 	.word	0x012e00f6
 8004520:	00fa012e 	.word	0x00fa012e
 8004524:	012e012e 	.word	0x012e012e
 8004528:	012e00fc 	.word	0x012e00fc
 800452c:	012e012e 	.word	0x012e012e
 8004530:	012e012e 	.word	0x012e012e
 8004534:	012e012e 	.word	0x012e012e
 8004538:	012e012e 	.word	0x012e012e
 800453c:	00fe012e 	.word	0x00fe012e
 8004540:	0100012e 	.word	0x0100012e
 8004544:	01040102 	.word	0x01040102
 8004548:	012e012e 	.word	0x012e012e
 800454c:	012e0126 	.word	0x012e0126
 8004550:	012e012e 	.word	0x012e012e
 8004554:	012e012e 	.word	0x012e012e
 8004558:	012e012e 	.word	0x012e012e
 800455c:	0114012e 	.word	0x0114012e
 8004560:	010a0106 	.word	0x010a0106
 8004564:	010e010c 	.word	0x010e010c
 8004568:	012e0110 	.word	0x012e0110
 800456c:	01160112 	.word	0x01160112
 8004570:	00ea011a 	.word	0x00ea011a
 8004574:	012c00c2 	.word	0x012c00c2
 8004578:	00d000ba 	.word	0x00d000ba
 800457c:	00a000bc 	.word	0x00a000bc
 8004580:	012a00a6 	.word	0x012a00a6
 8004584:	012e00f8 	.word	0x012e00f8
 8004588:	00c40118 	.word	0x00c40118
 800458c:	011c011e 	.word	0x011c011e
 8004590:	012e012e 	.word	0x012e012e
 8004594:	012e012e 	.word	0x012e012e
 8004598:	00d4012e 	.word	0x00d4012e
 800459c:	012e012e 	.word	0x012e012e
 80045a0:	00e6012e 	.word	0x00e6012e
 80045a4:	01200128 	.word	0x01200128
 80045a8:	01240122 	.word	0x01240122
 80045ac:	4b55      	ldr	r3, [pc, #340]	; (8004704 <_strerror_r+0x288>)
 80045ae:	4618      	mov	r0, r3
 80045b0:	bd10      	pop	{r4, pc}
 80045b2:	4b55      	ldr	r3, [pc, #340]	; (8004708 <_strerror_r+0x28c>)
 80045b4:	e7fb      	b.n	80045ae <_strerror_r+0x132>
 80045b6:	4b55      	ldr	r3, [pc, #340]	; (800470c <_strerror_r+0x290>)
 80045b8:	e7f9      	b.n	80045ae <_strerror_r+0x132>
 80045ba:	4b55      	ldr	r3, [pc, #340]	; (8004710 <_strerror_r+0x294>)
 80045bc:	e7f7      	b.n	80045ae <_strerror_r+0x132>
 80045be:	4b55      	ldr	r3, [pc, #340]	; (8004714 <_strerror_r+0x298>)
 80045c0:	e7f5      	b.n	80045ae <_strerror_r+0x132>
 80045c2:	4b55      	ldr	r3, [pc, #340]	; (8004718 <_strerror_r+0x29c>)
 80045c4:	e7f3      	b.n	80045ae <_strerror_r+0x132>
 80045c6:	4b55      	ldr	r3, [pc, #340]	; (800471c <_strerror_r+0x2a0>)
 80045c8:	e7f1      	b.n	80045ae <_strerror_r+0x132>
 80045ca:	4b55      	ldr	r3, [pc, #340]	; (8004720 <_strerror_r+0x2a4>)
 80045cc:	e7ef      	b.n	80045ae <_strerror_r+0x132>
 80045ce:	4b55      	ldr	r3, [pc, #340]	; (8004724 <_strerror_r+0x2a8>)
 80045d0:	e7ed      	b.n	80045ae <_strerror_r+0x132>
 80045d2:	4b55      	ldr	r3, [pc, #340]	; (8004728 <_strerror_r+0x2ac>)
 80045d4:	e7eb      	b.n	80045ae <_strerror_r+0x132>
 80045d6:	4b55      	ldr	r3, [pc, #340]	; (800472c <_strerror_r+0x2b0>)
 80045d8:	e7e9      	b.n	80045ae <_strerror_r+0x132>
 80045da:	4b55      	ldr	r3, [pc, #340]	; (8004730 <_strerror_r+0x2b4>)
 80045dc:	e7e7      	b.n	80045ae <_strerror_r+0x132>
 80045de:	4b55      	ldr	r3, [pc, #340]	; (8004734 <_strerror_r+0x2b8>)
 80045e0:	e7e5      	b.n	80045ae <_strerror_r+0x132>
 80045e2:	4b55      	ldr	r3, [pc, #340]	; (8004738 <_strerror_r+0x2bc>)
 80045e4:	e7e3      	b.n	80045ae <_strerror_r+0x132>
 80045e6:	4b55      	ldr	r3, [pc, #340]	; (800473c <_strerror_r+0x2c0>)
 80045e8:	e7e1      	b.n	80045ae <_strerror_r+0x132>
 80045ea:	4b55      	ldr	r3, [pc, #340]	; (8004740 <_strerror_r+0x2c4>)
 80045ec:	e7df      	b.n	80045ae <_strerror_r+0x132>
 80045ee:	4b55      	ldr	r3, [pc, #340]	; (8004744 <_strerror_r+0x2c8>)
 80045f0:	e7dd      	b.n	80045ae <_strerror_r+0x132>
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <_strerror_r+0x2cc>)
 80045f4:	e7db      	b.n	80045ae <_strerror_r+0x132>
 80045f6:	4b55      	ldr	r3, [pc, #340]	; (800474c <_strerror_r+0x2d0>)
 80045f8:	e7d9      	b.n	80045ae <_strerror_r+0x132>
 80045fa:	4b55      	ldr	r3, [pc, #340]	; (8004750 <_strerror_r+0x2d4>)
 80045fc:	e7d7      	b.n	80045ae <_strerror_r+0x132>
 80045fe:	4b55      	ldr	r3, [pc, #340]	; (8004754 <_strerror_r+0x2d8>)
 8004600:	e7d5      	b.n	80045ae <_strerror_r+0x132>
 8004602:	4b55      	ldr	r3, [pc, #340]	; (8004758 <_strerror_r+0x2dc>)
 8004604:	e7d3      	b.n	80045ae <_strerror_r+0x132>
 8004606:	4b55      	ldr	r3, [pc, #340]	; (800475c <_strerror_r+0x2e0>)
 8004608:	e7d1      	b.n	80045ae <_strerror_r+0x132>
 800460a:	4b55      	ldr	r3, [pc, #340]	; (8004760 <_strerror_r+0x2e4>)
 800460c:	e7cf      	b.n	80045ae <_strerror_r+0x132>
 800460e:	4b55      	ldr	r3, [pc, #340]	; (8004764 <_strerror_r+0x2e8>)
 8004610:	e7cd      	b.n	80045ae <_strerror_r+0x132>
 8004612:	4b55      	ldr	r3, [pc, #340]	; (8004768 <_strerror_r+0x2ec>)
 8004614:	e7cb      	b.n	80045ae <_strerror_r+0x132>
 8004616:	4b55      	ldr	r3, [pc, #340]	; (800476c <_strerror_r+0x2f0>)
 8004618:	e7c9      	b.n	80045ae <_strerror_r+0x132>
 800461a:	4b55      	ldr	r3, [pc, #340]	; (8004770 <_strerror_r+0x2f4>)
 800461c:	e7c7      	b.n	80045ae <_strerror_r+0x132>
 800461e:	4b55      	ldr	r3, [pc, #340]	; (8004774 <_strerror_r+0x2f8>)
 8004620:	e7c5      	b.n	80045ae <_strerror_r+0x132>
 8004622:	4b55      	ldr	r3, [pc, #340]	; (8004778 <_strerror_r+0x2fc>)
 8004624:	e7c3      	b.n	80045ae <_strerror_r+0x132>
 8004626:	4b55      	ldr	r3, [pc, #340]	; (800477c <_strerror_r+0x300>)
 8004628:	e7c1      	b.n	80045ae <_strerror_r+0x132>
 800462a:	4b55      	ldr	r3, [pc, #340]	; (8004780 <_strerror_r+0x304>)
 800462c:	e7bf      	b.n	80045ae <_strerror_r+0x132>
 800462e:	4b55      	ldr	r3, [pc, #340]	; (8004784 <_strerror_r+0x308>)
 8004630:	e7bd      	b.n	80045ae <_strerror_r+0x132>
 8004632:	4b55      	ldr	r3, [pc, #340]	; (8004788 <_strerror_r+0x30c>)
 8004634:	e7bb      	b.n	80045ae <_strerror_r+0x132>
 8004636:	4b55      	ldr	r3, [pc, #340]	; (800478c <_strerror_r+0x310>)
 8004638:	e7b9      	b.n	80045ae <_strerror_r+0x132>
 800463a:	4b55      	ldr	r3, [pc, #340]	; (8004790 <_strerror_r+0x314>)
 800463c:	e7b7      	b.n	80045ae <_strerror_r+0x132>
 800463e:	4b55      	ldr	r3, [pc, #340]	; (8004794 <_strerror_r+0x318>)
 8004640:	e7b5      	b.n	80045ae <_strerror_r+0x132>
 8004642:	4b55      	ldr	r3, [pc, #340]	; (8004798 <_strerror_r+0x31c>)
 8004644:	e7b3      	b.n	80045ae <_strerror_r+0x132>
 8004646:	4b55      	ldr	r3, [pc, #340]	; (800479c <_strerror_r+0x320>)
 8004648:	e7b1      	b.n	80045ae <_strerror_r+0x132>
 800464a:	4b55      	ldr	r3, [pc, #340]	; (80047a0 <_strerror_r+0x324>)
 800464c:	e7af      	b.n	80045ae <_strerror_r+0x132>
 800464e:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <_strerror_r+0x328>)
 8004650:	e7ad      	b.n	80045ae <_strerror_r+0x132>
 8004652:	4b55      	ldr	r3, [pc, #340]	; (80047a8 <_strerror_r+0x32c>)
 8004654:	e7ab      	b.n	80045ae <_strerror_r+0x132>
 8004656:	4b55      	ldr	r3, [pc, #340]	; (80047ac <_strerror_r+0x330>)
 8004658:	e7a9      	b.n	80045ae <_strerror_r+0x132>
 800465a:	4b55      	ldr	r3, [pc, #340]	; (80047b0 <_strerror_r+0x334>)
 800465c:	e7a7      	b.n	80045ae <_strerror_r+0x132>
 800465e:	4b55      	ldr	r3, [pc, #340]	; (80047b4 <_strerror_r+0x338>)
 8004660:	e7a5      	b.n	80045ae <_strerror_r+0x132>
 8004662:	4b55      	ldr	r3, [pc, #340]	; (80047b8 <_strerror_r+0x33c>)
 8004664:	e7a3      	b.n	80045ae <_strerror_r+0x132>
 8004666:	4b55      	ldr	r3, [pc, #340]	; (80047bc <_strerror_r+0x340>)
 8004668:	e7a1      	b.n	80045ae <_strerror_r+0x132>
 800466a:	4b55      	ldr	r3, [pc, #340]	; (80047c0 <_strerror_r+0x344>)
 800466c:	e79f      	b.n	80045ae <_strerror_r+0x132>
 800466e:	4b55      	ldr	r3, [pc, #340]	; (80047c4 <_strerror_r+0x348>)
 8004670:	e79d      	b.n	80045ae <_strerror_r+0x132>
 8004672:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <_strerror_r+0x34c>)
 8004674:	e79b      	b.n	80045ae <_strerror_r+0x132>
 8004676:	4b55      	ldr	r3, [pc, #340]	; (80047cc <_strerror_r+0x350>)
 8004678:	e799      	b.n	80045ae <_strerror_r+0x132>
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <_strerror_r+0x354>)
 800467c:	e797      	b.n	80045ae <_strerror_r+0x132>
 800467e:	4b55      	ldr	r3, [pc, #340]	; (80047d4 <_strerror_r+0x358>)
 8004680:	e795      	b.n	80045ae <_strerror_r+0x132>
 8004682:	4b55      	ldr	r3, [pc, #340]	; (80047d8 <_strerror_r+0x35c>)
 8004684:	e793      	b.n	80045ae <_strerror_r+0x132>
 8004686:	4b55      	ldr	r3, [pc, #340]	; (80047dc <_strerror_r+0x360>)
 8004688:	e791      	b.n	80045ae <_strerror_r+0x132>
 800468a:	4b55      	ldr	r3, [pc, #340]	; (80047e0 <_strerror_r+0x364>)
 800468c:	e78f      	b.n	80045ae <_strerror_r+0x132>
 800468e:	4b55      	ldr	r3, [pc, #340]	; (80047e4 <_strerror_r+0x368>)
 8004690:	e78d      	b.n	80045ae <_strerror_r+0x132>
 8004692:	4b55      	ldr	r3, [pc, #340]	; (80047e8 <_strerror_r+0x36c>)
 8004694:	e78b      	b.n	80045ae <_strerror_r+0x132>
 8004696:	4b55      	ldr	r3, [pc, #340]	; (80047ec <_strerror_r+0x370>)
 8004698:	e789      	b.n	80045ae <_strerror_r+0x132>
 800469a:	4b55      	ldr	r3, [pc, #340]	; (80047f0 <_strerror_r+0x374>)
 800469c:	e787      	b.n	80045ae <_strerror_r+0x132>
 800469e:	4b55      	ldr	r3, [pc, #340]	; (80047f4 <_strerror_r+0x378>)
 80046a0:	e785      	b.n	80045ae <_strerror_r+0x132>
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <_strerror_r+0x37c>)
 80046a4:	e783      	b.n	80045ae <_strerror_r+0x132>
 80046a6:	4b55      	ldr	r3, [pc, #340]	; (80047fc <_strerror_r+0x380>)
 80046a8:	e781      	b.n	80045ae <_strerror_r+0x132>
 80046aa:	4b55      	ldr	r3, [pc, #340]	; (8004800 <_strerror_r+0x384>)
 80046ac:	e77f      	b.n	80045ae <_strerror_r+0x132>
 80046ae:	4b55      	ldr	r3, [pc, #340]	; (8004804 <_strerror_r+0x388>)
 80046b0:	e77d      	b.n	80045ae <_strerror_r+0x132>
 80046b2:	4b55      	ldr	r3, [pc, #340]	; (8004808 <_strerror_r+0x38c>)
 80046b4:	e77b      	b.n	80045ae <_strerror_r+0x132>
 80046b6:	4b55      	ldr	r3, [pc, #340]	; (800480c <_strerror_r+0x390>)
 80046b8:	e779      	b.n	80045ae <_strerror_r+0x132>
 80046ba:	4b55      	ldr	r3, [pc, #340]	; (8004810 <_strerror_r+0x394>)
 80046bc:	e777      	b.n	80045ae <_strerror_r+0x132>
 80046be:	4b55      	ldr	r3, [pc, #340]	; (8004814 <_strerror_r+0x398>)
 80046c0:	e775      	b.n	80045ae <_strerror_r+0x132>
 80046c2:	4b55      	ldr	r3, [pc, #340]	; (8004818 <_strerror_r+0x39c>)
 80046c4:	e773      	b.n	80045ae <_strerror_r+0x132>
 80046c6:	4b55      	ldr	r3, [pc, #340]	; (800481c <_strerror_r+0x3a0>)
 80046c8:	e771      	b.n	80045ae <_strerror_r+0x132>
 80046ca:	4b55      	ldr	r3, [pc, #340]	; (8004820 <_strerror_r+0x3a4>)
 80046cc:	e76f      	b.n	80045ae <_strerror_r+0x132>
 80046ce:	4b55      	ldr	r3, [pc, #340]	; (8004824 <_strerror_r+0x3a8>)
 80046d0:	e76d      	b.n	80045ae <_strerror_r+0x132>
 80046d2:	4b55      	ldr	r3, [pc, #340]	; (8004828 <_strerror_r+0x3ac>)
 80046d4:	e76b      	b.n	80045ae <_strerror_r+0x132>
 80046d6:	4b55      	ldr	r3, [pc, #340]	; (800482c <_strerror_r+0x3b0>)
 80046d8:	e769      	b.n	80045ae <_strerror_r+0x132>
 80046da:	4b55      	ldr	r3, [pc, #340]	; (8004830 <_strerror_r+0x3b4>)
 80046dc:	e767      	b.n	80045ae <_strerror_r+0x132>
 80046de:	4b55      	ldr	r3, [pc, #340]	; (8004834 <_strerror_r+0x3b8>)
 80046e0:	e765      	b.n	80045ae <_strerror_r+0x132>
 80046e2:	4b55      	ldr	r3, [pc, #340]	; (8004838 <_strerror_r+0x3bc>)
 80046e4:	e763      	b.n	80045ae <_strerror_r+0x132>
 80046e6:	4b55      	ldr	r3, [pc, #340]	; (800483c <_strerror_r+0x3c0>)
 80046e8:	e761      	b.n	80045ae <_strerror_r+0x132>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	bf14      	ite	ne
 80046ee:	461a      	movne	r2, r3
 80046f0:	4622      	moveq	r2, r4
 80046f2:	f000 f8a9 	bl	8004848 <_user_strerror>
 80046f6:	4b52      	ldr	r3, [pc, #328]	; (8004840 <_strerror_r+0x3c4>)
 80046f8:	2800      	cmp	r0, #0
 80046fa:	bf18      	it	ne
 80046fc:	4603      	movne	r3, r0
 80046fe:	e756      	b.n	80045ae <_strerror_r+0x132>
 8004700:	4b50      	ldr	r3, [pc, #320]	; (8004844 <_strerror_r+0x3c8>)
 8004702:	e754      	b.n	80045ae <_strerror_r+0x132>
 8004704:	080056c1 	.word	0x080056c1
 8004708:	080056cb 	.word	0x080056cb
 800470c:	080056e5 	.word	0x080056e5
 8004710:	080056f5 	.word	0x080056f5
 8004714:	0800570d 	.word	0x0800570d
 8004718:	08005717 	.word	0x08005717
 800471c:	08005731 	.word	0x08005731
 8004720:	08005743 	.word	0x08005743
 8004724:	08005755 	.word	0x08005755
 8004728:	0800576e 	.word	0x0800576e
 800472c:	0800577e 	.word	0x0800577e
 8004730:	0800578a 	.word	0x0800578a
 8004734:	080057a7 	.word	0x080057a7
 8004738:	080057b9 	.word	0x080057b9
 800473c:	080057ca 	.word	0x080057ca
 8004740:	080057dc 	.word	0x080057dc
 8004744:	080057e8 	.word	0x080057e8
 8004748:	08005800 	.word	0x08005800
 800474c:	0800580c 	.word	0x0800580c
 8004750:	0800581e 	.word	0x0800581e
 8004754:	0800582d 	.word	0x0800582d
 8004758:	0800583d 	.word	0x0800583d
 800475c:	0800584a 	.word	0x0800584a
 8004760:	08005869 	.word	0x08005869
 8004764:	08005878 	.word	0x08005878
 8004768:	08005889 	.word	0x08005889
 800476c:	080058ad 	.word	0x080058ad
 8004770:	080058cb 	.word	0x080058cb
 8004774:	080058e9 	.word	0x080058e9
 8004778:	08005909 	.word	0x08005909
 800477c:	08005920 	.word	0x08005920
 8004780:	0800592f 	.word	0x0800592f
 8004784:	0800593e 	.word	0x0800593e
 8004788:	08005952 	.word	0x08005952
 800478c:	0800596a 	.word	0x0800596a
 8004790:	08005978 	.word	0x08005978
 8004794:	08005985 	.word	0x08005985
 8004798:	0800599b 	.word	0x0800599b
 800479c:	080059aa 	.word	0x080059aa
 80047a0:	080059b6 	.word	0x080059b6
 80047a4:	080059e5 	.word	0x080059e5
 80047a8:	080059f6 	.word	0x080059f6
 80047ac:	08005a11 	.word	0x08005a11
 80047b0:	08005a24 	.word	0x08005a24
 80047b4:	08005a3a 	.word	0x08005a3a
 80047b8:	08005a43 	.word	0x08005a43
 80047bc:	08005a5a 	.word	0x08005a5a
 80047c0:	08005a62 	.word	0x08005a62
 80047c4:	08005a6f 	.word	0x08005a6f
 80047c8:	08005a84 	.word	0x08005a84
 80047cc:	08005a98 	.word	0x08005a98
 80047d0:	08005ab0 	.word	0x08005ab0
 80047d4:	08005abf 	.word	0x08005abf
 80047d8:	08005ad0 	.word	0x08005ad0
 80047dc:	08005ae3 	.word	0x08005ae3
 80047e0:	08005aef 	.word	0x08005aef
 80047e4:	08005b08 	.word	0x08005b08
 80047e8:	08005b1c 	.word	0x08005b1c
 80047ec:	08005b37 	.word	0x08005b37
 80047f0:	08005b4f 	.word	0x08005b4f
 80047f4:	08005b69 	.word	0x08005b69
 80047f8:	08005b71 	.word	0x08005b71
 80047fc:	08005ba1 	.word	0x08005ba1
 8004800:	08005bc0 	.word	0x08005bc0
 8004804:	08005bdf 	.word	0x08005bdf
 8004808:	08005bf6 	.word	0x08005bf6
 800480c:	08005c09 	.word	0x08005c09
 8004810:	08005c22 	.word	0x08005c22
 8004814:	08005c39 	.word	0x08005c39
 8004818:	08005c4f 	.word	0x08005c4f
 800481c:	08005c70 	.word	0x08005c70
 8004820:	08005c88 	.word	0x08005c88
 8004824:	08005ca4 	.word	0x08005ca4
 8004828:	08005cb7 	.word	0x08005cb7
 800482c:	08005ccd 	.word	0x08005ccd
 8004830:	08005ce1 	.word	0x08005ce1
 8004834:	08005d03 	.word	0x08005d03
 8004838:	08005d29 	.word	0x08005d29
 800483c:	08005d3a 	.word	0x08005d3a
 8004840:	080056c0 	.word	0x080056c0
 8004844:	08005d4f 	.word	0x08005d4f

08004848 <_user_strerror>:
 8004848:	2000      	movs	r0, #0
 800484a:	4770      	bx	lr

0800484c <_vsiprintf_r>:
 800484c:	b500      	push	{lr}
 800484e:	b09b      	sub	sp, #108	; 0x6c
 8004850:	9100      	str	r1, [sp, #0]
 8004852:	9104      	str	r1, [sp, #16]
 8004854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004858:	9105      	str	r1, [sp, #20]
 800485a:	9102      	str	r1, [sp, #8]
 800485c:	4905      	ldr	r1, [pc, #20]	; (8004874 <_vsiprintf_r+0x28>)
 800485e:	9103      	str	r1, [sp, #12]
 8004860:	4669      	mov	r1, sp
 8004862:	f000 fb59 	bl	8004f18 <_svfiprintf_r>
 8004866:	9b00      	ldr	r3, [sp, #0]
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
 800486c:	b01b      	add	sp, #108	; 0x6c
 800486e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004872:	bf00      	nop
 8004874:	ffff0208 	.word	0xffff0208

08004878 <vsiprintf>:
 8004878:	4613      	mov	r3, r2
 800487a:	460a      	mov	r2, r1
 800487c:	4601      	mov	r1, r0
 800487e:	4802      	ldr	r0, [pc, #8]	; (8004888 <vsiprintf+0x10>)
 8004880:	6800      	ldr	r0, [r0, #0]
 8004882:	f7ff bfe3 	b.w	800484c <_vsiprintf_r>
 8004886:	bf00      	nop
 8004888:	2000000c 	.word	0x2000000c

0800488c <_write_r>:
 800488c:	b538      	push	{r3, r4, r5, lr}
 800488e:	4d07      	ldr	r5, [pc, #28]	; (80048ac <_write_r+0x20>)
 8004890:	4604      	mov	r4, r0
 8004892:	4608      	mov	r0, r1
 8004894:	4611      	mov	r1, r2
 8004896:	2200      	movs	r2, #0
 8004898:	602a      	str	r2, [r5, #0]
 800489a:	461a      	mov	r2, r3
 800489c:	f7fc f9c5 	bl	8000c2a <_write>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d102      	bne.n	80048aa <_write_r+0x1e>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	b103      	cbz	r3, 80048aa <_write_r+0x1e>
 80048a8:	6023      	str	r3, [r4, #0]
 80048aa:	bd38      	pop	{r3, r4, r5, pc}
 80048ac:	2000029c 	.word	0x2000029c

080048b0 <__sflush_r>:
 80048b0:	898a      	ldrh	r2, [r1, #12]
 80048b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	4605      	mov	r5, r0
 80048b8:	0710      	lsls	r0, r2, #28
 80048ba:	460c      	mov	r4, r1
 80048bc:	d458      	bmi.n	8004970 <__sflush_r+0xc0>
 80048be:	684b      	ldr	r3, [r1, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	dc05      	bgt.n	80048d0 <__sflush_r+0x20>
 80048c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	dc02      	bgt.n	80048d0 <__sflush_r+0x20>
 80048ca:	2000      	movs	r0, #0
 80048cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d0f9      	beq.n	80048ca <__sflush_r+0x1a>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048dc:	682f      	ldr	r7, [r5, #0]
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	d032      	beq.n	8004948 <__sflush_r+0x98>
 80048e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	075a      	lsls	r2, r3, #29
 80048e8:	d505      	bpl.n	80048f6 <__sflush_r+0x46>
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	1ac0      	subs	r0, r0, r3
 80048ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f0:	b10b      	cbz	r3, 80048f6 <__sflush_r+0x46>
 80048f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	4602      	mov	r2, r0
 80048fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048fc:	6a21      	ldr	r1, [r4, #32]
 80048fe:	4628      	mov	r0, r5
 8004900:	47b0      	blx	r6
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	d106      	bne.n	8004916 <__sflush_r+0x66>
 8004908:	6829      	ldr	r1, [r5, #0]
 800490a:	291d      	cmp	r1, #29
 800490c:	d82c      	bhi.n	8004968 <__sflush_r+0xb8>
 800490e:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <__sflush_r+0x108>)
 8004910:	40ca      	lsrs	r2, r1
 8004912:	07d6      	lsls	r6, r2, #31
 8004914:	d528      	bpl.n	8004968 <__sflush_r+0xb8>
 8004916:	2200      	movs	r2, #0
 8004918:	6062      	str	r2, [r4, #4]
 800491a:	04d9      	lsls	r1, r3, #19
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	6022      	str	r2, [r4, #0]
 8004920:	d504      	bpl.n	800492c <__sflush_r+0x7c>
 8004922:	1c42      	adds	r2, r0, #1
 8004924:	d101      	bne.n	800492a <__sflush_r+0x7a>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	b903      	cbnz	r3, 800492c <__sflush_r+0x7c>
 800492a:	6560      	str	r0, [r4, #84]	; 0x54
 800492c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492e:	602f      	str	r7, [r5, #0]
 8004930:	2900      	cmp	r1, #0
 8004932:	d0ca      	beq.n	80048ca <__sflush_r+0x1a>
 8004934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004938:	4299      	cmp	r1, r3
 800493a:	d002      	beq.n	8004942 <__sflush_r+0x92>
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f9af 	bl	8004ca0 <_free_r>
 8004942:	2000      	movs	r0, #0
 8004944:	6360      	str	r0, [r4, #52]	; 0x34
 8004946:	e7c1      	b.n	80048cc <__sflush_r+0x1c>
 8004948:	6a21      	ldr	r1, [r4, #32]
 800494a:	2301      	movs	r3, #1
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	1c41      	adds	r1, r0, #1
 8004952:	d1c7      	bne.n	80048e4 <__sflush_r+0x34>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c4      	beq.n	80048e4 <__sflush_r+0x34>
 800495a:	2b1d      	cmp	r3, #29
 800495c:	d001      	beq.n	8004962 <__sflush_r+0xb2>
 800495e:	2b16      	cmp	r3, #22
 8004960:	d101      	bne.n	8004966 <__sflush_r+0xb6>
 8004962:	602f      	str	r7, [r5, #0]
 8004964:	e7b1      	b.n	80048ca <__sflush_r+0x1a>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	e7ad      	b.n	80048cc <__sflush_r+0x1c>
 8004970:	690f      	ldr	r7, [r1, #16]
 8004972:	2f00      	cmp	r7, #0
 8004974:	d0a9      	beq.n	80048ca <__sflush_r+0x1a>
 8004976:	0793      	lsls	r3, r2, #30
 8004978:	680e      	ldr	r6, [r1, #0]
 800497a:	bf08      	it	eq
 800497c:	694b      	ldreq	r3, [r1, #20]
 800497e:	600f      	str	r7, [r1, #0]
 8004980:	bf18      	it	ne
 8004982:	2300      	movne	r3, #0
 8004984:	eba6 0807 	sub.w	r8, r6, r7
 8004988:	608b      	str	r3, [r1, #8]
 800498a:	f1b8 0f00 	cmp.w	r8, #0
 800498e:	dd9c      	ble.n	80048ca <__sflush_r+0x1a>
 8004990:	6a21      	ldr	r1, [r4, #32]
 8004992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004994:	4643      	mov	r3, r8
 8004996:	463a      	mov	r2, r7
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	2800      	cmp	r0, #0
 800499e:	dc06      	bgt.n	80049ae <__sflush_r+0xfe>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e78e      	b.n	80048cc <__sflush_r+0x1c>
 80049ae:	4407      	add	r7, r0
 80049b0:	eba8 0800 	sub.w	r8, r8, r0
 80049b4:	e7e9      	b.n	800498a <__sflush_r+0xda>
 80049b6:	bf00      	nop
 80049b8:	20400001 	.word	0x20400001

080049bc <_fflush_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	690b      	ldr	r3, [r1, #16]
 80049c0:	4605      	mov	r5, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	b913      	cbnz	r3, 80049cc <_fflush_r+0x10>
 80049c6:	2500      	movs	r5, #0
 80049c8:	4628      	mov	r0, r5
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	b118      	cbz	r0, 80049d6 <_fflush_r+0x1a>
 80049ce:	6983      	ldr	r3, [r0, #24]
 80049d0:	b90b      	cbnz	r3, 80049d6 <_fflush_r+0x1a>
 80049d2:	f000 f8c5 	bl	8004b60 <__sinit>
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <_fflush_r+0x6c>)
 80049d8:	429c      	cmp	r4, r3
 80049da:	d11b      	bne.n	8004a14 <_fflush_r+0x58>
 80049dc:	686c      	ldr	r4, [r5, #4]
 80049de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ef      	beq.n	80049c6 <_fflush_r+0xa>
 80049e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e8:	07d0      	lsls	r0, r2, #31
 80049ea:	d404      	bmi.n	80049f6 <_fflush_r+0x3a>
 80049ec:	0599      	lsls	r1, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <_fflush_r+0x3a>
 80049f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f2:	f000 f953 	bl	8004c9c <__retarget_lock_acquire_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7ff ff59 	bl	80048b0 <__sflush_r>
 80049fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a00:	07da      	lsls	r2, r3, #31
 8004a02:	4605      	mov	r5, r0
 8004a04:	d4e0      	bmi.n	80049c8 <_fflush_r+0xc>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	d4dd      	bmi.n	80049c8 <_fflush_r+0xc>
 8004a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0e:	f000 f946 	bl	8004c9e <__retarget_lock_release_recursive>
 8004a12:	e7d9      	b.n	80049c8 <_fflush_r+0xc>
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_fflush_r+0x70>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d101      	bne.n	8004a1e <_fflush_r+0x62>
 8004a1a:	68ac      	ldr	r4, [r5, #8]
 8004a1c:	e7df      	b.n	80049de <_fflush_r+0x22>
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <_fflush_r+0x74>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	bf08      	it	eq
 8004a24:	68ec      	ldreq	r4, [r5, #12]
 8004a26:	e7da      	b.n	80049de <_fflush_r+0x22>
 8004a28:	08005d78 	.word	0x08005d78
 8004a2c:	08005d98 	.word	0x08005d98
 8004a30:	08005d58 	.word	0x08005d58

08004a34 <fileno>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	4e1a      	ldr	r6, [pc, #104]	; (8004aa0 <fileno+0x6c>)
 8004a38:	6835      	ldr	r5, [r6, #0]
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	b125      	cbz	r5, 8004a48 <fileno+0x14>
 8004a3e:	69ab      	ldr	r3, [r5, #24]
 8004a40:	b913      	cbnz	r3, 8004a48 <fileno+0x14>
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 f88c 	bl	8004b60 <__sinit>
 8004a48:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <fileno+0x70>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d118      	bne.n	8004a80 <fileno+0x4c>
 8004a4e:	686c      	ldr	r4, [r5, #4]
 8004a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a52:	07d8      	lsls	r0, r3, #31
 8004a54:	d405      	bmi.n	8004a62 <fileno+0x2e>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	0599      	lsls	r1, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <fileno+0x2e>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5e:	f000 f91d 	bl	8004c9c <__retarget_lock_acquire_recursive>
 8004a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a66:	b1ab      	cbz	r3, 8004a94 <fileno+0x60>
 8004a68:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8004a6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a6e:	07d2      	lsls	r2, r2, #31
 8004a70:	d404      	bmi.n	8004a7c <fileno+0x48>
 8004a72:	059b      	lsls	r3, r3, #22
 8004a74:	d402      	bmi.n	8004a7c <fileno+0x48>
 8004a76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a78:	f000 f911 	bl	8004c9e <__retarget_lock_release_recursive>
 8004a7c:	4628      	mov	r0, r5
 8004a7e:	bd70      	pop	{r4, r5, r6, pc}
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <fileno+0x74>)
 8004a82:	429c      	cmp	r4, r3
 8004a84:	d101      	bne.n	8004a8a <fileno+0x56>
 8004a86:	68ac      	ldr	r4, [r5, #8]
 8004a88:	e7e2      	b.n	8004a50 <fileno+0x1c>
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <fileno+0x78>)
 8004a8c:	429c      	cmp	r4, r3
 8004a8e:	bf08      	it	eq
 8004a90:	68ec      	ldreq	r4, [r5, #12]
 8004a92:	e7dd      	b.n	8004a50 <fileno+0x1c>
 8004a94:	6832      	ldr	r2, [r6, #0]
 8004a96:	2109      	movs	r1, #9
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	f04f 35ff 	mov.w	r5, #4294967295
 8004a9e:	e7e5      	b.n	8004a6c <fileno+0x38>
 8004aa0:	2000000c 	.word	0x2000000c
 8004aa4:	08005d78 	.word	0x08005d78
 8004aa8:	08005d98 	.word	0x08005d98
 8004aac:	08005d58 	.word	0x08005d58

08004ab0 <std>:
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	b510      	push	{r4, lr}
 8004ab4:	4604      	mov	r4, r0
 8004ab6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004abe:	6083      	str	r3, [r0, #8]
 8004ac0:	8181      	strh	r1, [r0, #12]
 8004ac2:	6643      	str	r3, [r0, #100]	; 0x64
 8004ac4:	81c2      	strh	r2, [r0, #14]
 8004ac6:	6183      	str	r3, [r0, #24]
 8004ac8:	4619      	mov	r1, r3
 8004aca:	2208      	movs	r2, #8
 8004acc:	305c      	adds	r0, #92	; 0x5c
 8004ace:	f7ff fc2b 	bl	8004328 <memset>
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <std+0x38>)
 8004ad4:	6263      	str	r3, [r4, #36]	; 0x24
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <std+0x3c>)
 8004ad8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ada:	4b05      	ldr	r3, [pc, #20]	; (8004af0 <std+0x40>)
 8004adc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <std+0x44>)
 8004ae0:	6224      	str	r4, [r4, #32]
 8004ae2:	6323      	str	r3, [r4, #48]	; 0x30
 8004ae4:	bd10      	pop	{r4, pc}
 8004ae6:	bf00      	nop
 8004ae8:	08005461 	.word	0x08005461
 8004aec:	08005483 	.word	0x08005483
 8004af0:	080054bb 	.word	0x080054bb
 8004af4:	080054df 	.word	0x080054df

08004af8 <_cleanup_r>:
 8004af8:	4901      	ldr	r1, [pc, #4]	; (8004b00 <_cleanup_r+0x8>)
 8004afa:	f000 b8af 	b.w	8004c5c <_fwalk_reent>
 8004afe:	bf00      	nop
 8004b00:	080049bd 	.word	0x080049bd

08004b04 <__sfmoreglue>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	2268      	movs	r2, #104	; 0x68
 8004b08:	1e4d      	subs	r5, r1, #1
 8004b0a:	4355      	muls	r5, r2
 8004b0c:	460e      	mov	r6, r1
 8004b0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b12:	f000 f931 	bl	8004d78 <_malloc_r>
 8004b16:	4604      	mov	r4, r0
 8004b18:	b140      	cbz	r0, 8004b2c <__sfmoreglue+0x28>
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	e9c0 1600 	strd	r1, r6, [r0]
 8004b20:	300c      	adds	r0, #12
 8004b22:	60a0      	str	r0, [r4, #8]
 8004b24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b28:	f7ff fbfe 	bl	8004328 <memset>
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}

08004b30 <__sfp_lock_acquire>:
 8004b30:	4801      	ldr	r0, [pc, #4]	; (8004b38 <__sfp_lock_acquire+0x8>)
 8004b32:	f000 b8b3 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8004b36:	bf00      	nop
 8004b38:	20000291 	.word	0x20000291

08004b3c <__sfp_lock_release>:
 8004b3c:	4801      	ldr	r0, [pc, #4]	; (8004b44 <__sfp_lock_release+0x8>)
 8004b3e:	f000 b8ae 	b.w	8004c9e <__retarget_lock_release_recursive>
 8004b42:	bf00      	nop
 8004b44:	20000291 	.word	0x20000291

08004b48 <__sinit_lock_acquire>:
 8004b48:	4801      	ldr	r0, [pc, #4]	; (8004b50 <__sinit_lock_acquire+0x8>)
 8004b4a:	f000 b8a7 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8004b4e:	bf00      	nop
 8004b50:	20000292 	.word	0x20000292

08004b54 <__sinit_lock_release>:
 8004b54:	4801      	ldr	r0, [pc, #4]	; (8004b5c <__sinit_lock_release+0x8>)
 8004b56:	f000 b8a2 	b.w	8004c9e <__retarget_lock_release_recursive>
 8004b5a:	bf00      	nop
 8004b5c:	20000292 	.word	0x20000292

08004b60 <__sinit>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4604      	mov	r4, r0
 8004b64:	f7ff fff0 	bl	8004b48 <__sinit_lock_acquire>
 8004b68:	69a3      	ldr	r3, [r4, #24]
 8004b6a:	b11b      	cbz	r3, 8004b74 <__sinit+0x14>
 8004b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b70:	f7ff bff0 	b.w	8004b54 <__sinit_lock_release>
 8004b74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b78:	6523      	str	r3, [r4, #80]	; 0x50
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <__sinit+0x68>)
 8004b7c:	4a13      	ldr	r2, [pc, #76]	; (8004bcc <__sinit+0x6c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b82:	42a3      	cmp	r3, r4
 8004b84:	bf04      	itt	eq
 8004b86:	2301      	moveq	r3, #1
 8004b88:	61a3      	streq	r3, [r4, #24]
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f000 f820 	bl	8004bd0 <__sfp>
 8004b90:	6060      	str	r0, [r4, #4]
 8004b92:	4620      	mov	r0, r4
 8004b94:	f000 f81c 	bl	8004bd0 <__sfp>
 8004b98:	60a0      	str	r0, [r4, #8]
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f000 f818 	bl	8004bd0 <__sfp>
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	60e0      	str	r0, [r4, #12]
 8004ba4:	2104      	movs	r1, #4
 8004ba6:	6860      	ldr	r0, [r4, #4]
 8004ba8:	f7ff ff82 	bl	8004ab0 <std>
 8004bac:	68a0      	ldr	r0, [r4, #8]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	2109      	movs	r1, #9
 8004bb2:	f7ff ff7d 	bl	8004ab0 <std>
 8004bb6:	68e0      	ldr	r0, [r4, #12]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	2112      	movs	r1, #18
 8004bbc:	f7ff ff78 	bl	8004ab0 <std>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	61a3      	str	r3, [r4, #24]
 8004bc4:	e7d2      	b.n	8004b6c <__sinit+0xc>
 8004bc6:	bf00      	nop
 8004bc8:	080056b8 	.word	0x080056b8
 8004bcc:	08004af9 	.word	0x08004af9

08004bd0 <__sfp>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	f7ff ffac 	bl	8004b30 <__sfp_lock_acquire>
 8004bd8:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <__sfp+0x84>)
 8004bda:	681e      	ldr	r6, [r3, #0]
 8004bdc:	69b3      	ldr	r3, [r6, #24]
 8004bde:	b913      	cbnz	r3, 8004be6 <__sfp+0x16>
 8004be0:	4630      	mov	r0, r6
 8004be2:	f7ff ffbd 	bl	8004b60 <__sinit>
 8004be6:	3648      	adds	r6, #72	; 0x48
 8004be8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	d503      	bpl.n	8004bf8 <__sfp+0x28>
 8004bf0:	6833      	ldr	r3, [r6, #0]
 8004bf2:	b30b      	cbz	r3, 8004c38 <__sfp+0x68>
 8004bf4:	6836      	ldr	r6, [r6, #0]
 8004bf6:	e7f7      	b.n	8004be8 <__sfp+0x18>
 8004bf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bfc:	b9d5      	cbnz	r5, 8004c34 <__sfp+0x64>
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <__sfp+0x88>)
 8004c00:	60e3      	str	r3, [r4, #12]
 8004c02:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c06:	6665      	str	r5, [r4, #100]	; 0x64
 8004c08:	f000 f847 	bl	8004c9a <__retarget_lock_init_recursive>
 8004c0c:	f7ff ff96 	bl	8004b3c <__sfp_lock_release>
 8004c10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c18:	6025      	str	r5, [r4, #0]
 8004c1a:	61a5      	str	r5, [r4, #24]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	4629      	mov	r1, r5
 8004c20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c24:	f7ff fb80 	bl	8004328 <memset>
 8004c28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c30:	4620      	mov	r0, r4
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c34:	3468      	adds	r4, #104	; 0x68
 8004c36:	e7d9      	b.n	8004bec <__sfp+0x1c>
 8004c38:	2104      	movs	r1, #4
 8004c3a:	4638      	mov	r0, r7
 8004c3c:	f7ff ff62 	bl	8004b04 <__sfmoreglue>
 8004c40:	4604      	mov	r4, r0
 8004c42:	6030      	str	r0, [r6, #0]
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d1d5      	bne.n	8004bf4 <__sfp+0x24>
 8004c48:	f7ff ff78 	bl	8004b3c <__sfp_lock_release>
 8004c4c:	230c      	movs	r3, #12
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	e7ee      	b.n	8004c30 <__sfp+0x60>
 8004c52:	bf00      	nop
 8004c54:	080056b8 	.word	0x080056b8
 8004c58:	ffff0001 	.word	0xffff0001

08004c5c <_fwalk_reent>:
 8004c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c60:	4606      	mov	r6, r0
 8004c62:	4688      	mov	r8, r1
 8004c64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c68:	2700      	movs	r7, #0
 8004c6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c6e:	f1b9 0901 	subs.w	r9, r9, #1
 8004c72:	d505      	bpl.n	8004c80 <_fwalk_reent+0x24>
 8004c74:	6824      	ldr	r4, [r4, #0]
 8004c76:	2c00      	cmp	r4, #0
 8004c78:	d1f7      	bne.n	8004c6a <_fwalk_reent+0xe>
 8004c7a:	4638      	mov	r0, r7
 8004c7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c80:	89ab      	ldrh	r3, [r5, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d907      	bls.n	8004c96 <_fwalk_reent+0x3a>
 8004c86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	d003      	beq.n	8004c96 <_fwalk_reent+0x3a>
 8004c8e:	4629      	mov	r1, r5
 8004c90:	4630      	mov	r0, r6
 8004c92:	47c0      	blx	r8
 8004c94:	4307      	orrs	r7, r0
 8004c96:	3568      	adds	r5, #104	; 0x68
 8004c98:	e7e9      	b.n	8004c6e <_fwalk_reent+0x12>

08004c9a <__retarget_lock_init_recursive>:
 8004c9a:	4770      	bx	lr

08004c9c <__retarget_lock_acquire_recursive>:
 8004c9c:	4770      	bx	lr

08004c9e <__retarget_lock_release_recursive>:
 8004c9e:	4770      	bx	lr

08004ca0 <_free_r>:
 8004ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ca2:	2900      	cmp	r1, #0
 8004ca4:	d044      	beq.n	8004d30 <_free_r+0x90>
 8004ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004caa:	9001      	str	r0, [sp, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f1a1 0404 	sub.w	r4, r1, #4
 8004cb2:	bfb8      	it	lt
 8004cb4:	18e4      	addlt	r4, r4, r3
 8004cb6:	f000 fc61 	bl	800557c <__malloc_lock>
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <_free_r+0x94>)
 8004cbc:	9801      	ldr	r0, [sp, #4]
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	b933      	cbnz	r3, 8004cd0 <_free_r+0x30>
 8004cc2:	6063      	str	r3, [r4, #4]
 8004cc4:	6014      	str	r4, [r2, #0]
 8004cc6:	b003      	add	sp, #12
 8004cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ccc:	f000 bc5c 	b.w	8005588 <__malloc_unlock>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d908      	bls.n	8004ce6 <_free_r+0x46>
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	1961      	adds	r1, r4, r5
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	bf01      	itttt	eq
 8004cdc:	6819      	ldreq	r1, [r3, #0]
 8004cde:	685b      	ldreq	r3, [r3, #4]
 8004ce0:	1949      	addeq	r1, r1, r5
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	e7ed      	b.n	8004cc2 <_free_r+0x22>
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b10b      	cbz	r3, 8004cf0 <_free_r+0x50>
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x46>
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	1855      	adds	r5, r2, r1
 8004cf4:	42a5      	cmp	r5, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x70>
 8004cf8:	6824      	ldr	r4, [r4, #0]
 8004cfa:	4421      	add	r1, r4
 8004cfc:	1854      	adds	r4, r2, r1
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	d1e0      	bne.n	8004cc6 <_free_r+0x26>
 8004d04:	681c      	ldr	r4, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	6053      	str	r3, [r2, #4]
 8004d0a:	4421      	add	r1, r4
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	e7da      	b.n	8004cc6 <_free_r+0x26>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x78>
 8004d12:	230c      	movs	r3, #12
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	e7d6      	b.n	8004cc6 <_free_r+0x26>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf04      	itt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	bf04      	itt	eq
 8004d28:	1949      	addeq	r1, r1, r5
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	6054      	str	r4, [r2, #4]
 8004d2e:	e7ca      	b.n	8004cc6 <_free_r+0x26>
 8004d30:	b003      	add	sp, #12
 8004d32:	bd30      	pop	{r4, r5, pc}
 8004d34:	20000294 	.word	0x20000294

08004d38 <sbrk_aligned>:
 8004d38:	b570      	push	{r4, r5, r6, lr}
 8004d3a:	4e0e      	ldr	r6, [pc, #56]	; (8004d74 <sbrk_aligned+0x3c>)
 8004d3c:	460c      	mov	r4, r1
 8004d3e:	6831      	ldr	r1, [r6, #0]
 8004d40:	4605      	mov	r5, r0
 8004d42:	b911      	cbnz	r1, 8004d4a <sbrk_aligned+0x12>
 8004d44:	f000 fb7c 	bl	8005440 <_sbrk_r>
 8004d48:	6030      	str	r0, [r6, #0]
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	4628      	mov	r0, r5
 8004d4e:	f000 fb77 	bl	8005440 <_sbrk_r>
 8004d52:	1c43      	adds	r3, r0, #1
 8004d54:	d00a      	beq.n	8004d6c <sbrk_aligned+0x34>
 8004d56:	1cc4      	adds	r4, r0, #3
 8004d58:	f024 0403 	bic.w	r4, r4, #3
 8004d5c:	42a0      	cmp	r0, r4
 8004d5e:	d007      	beq.n	8004d70 <sbrk_aligned+0x38>
 8004d60:	1a21      	subs	r1, r4, r0
 8004d62:	4628      	mov	r0, r5
 8004d64:	f000 fb6c 	bl	8005440 <_sbrk_r>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d101      	bne.n	8004d70 <sbrk_aligned+0x38>
 8004d6c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d70:	4620      	mov	r0, r4
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	20000298 	.word	0x20000298

08004d78 <_malloc_r>:
 8004d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d7c:	1ccd      	adds	r5, r1, #3
 8004d7e:	f025 0503 	bic.w	r5, r5, #3
 8004d82:	3508      	adds	r5, #8
 8004d84:	2d0c      	cmp	r5, #12
 8004d86:	bf38      	it	cc
 8004d88:	250c      	movcc	r5, #12
 8004d8a:	2d00      	cmp	r5, #0
 8004d8c:	4607      	mov	r7, r0
 8004d8e:	db01      	blt.n	8004d94 <_malloc_r+0x1c>
 8004d90:	42a9      	cmp	r1, r5
 8004d92:	d905      	bls.n	8004da0 <_malloc_r+0x28>
 8004d94:	230c      	movs	r3, #12
 8004d96:	603b      	str	r3, [r7, #0]
 8004d98:	2600      	movs	r6, #0
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004da0:	4e2e      	ldr	r6, [pc, #184]	; (8004e5c <_malloc_r+0xe4>)
 8004da2:	f000 fbeb 	bl	800557c <__malloc_lock>
 8004da6:	6833      	ldr	r3, [r6, #0]
 8004da8:	461c      	mov	r4, r3
 8004daa:	bb34      	cbnz	r4, 8004dfa <_malloc_r+0x82>
 8004dac:	4629      	mov	r1, r5
 8004dae:	4638      	mov	r0, r7
 8004db0:	f7ff ffc2 	bl	8004d38 <sbrk_aligned>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	4604      	mov	r4, r0
 8004db8:	d14d      	bne.n	8004e56 <_malloc_r+0xde>
 8004dba:	6834      	ldr	r4, [r6, #0]
 8004dbc:	4626      	mov	r6, r4
 8004dbe:	2e00      	cmp	r6, #0
 8004dc0:	d140      	bne.n	8004e44 <_malloc_r+0xcc>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	4631      	mov	r1, r6
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	eb04 0803 	add.w	r8, r4, r3
 8004dcc:	f000 fb38 	bl	8005440 <_sbrk_r>
 8004dd0:	4580      	cmp	r8, r0
 8004dd2:	d13a      	bne.n	8004e4a <_malloc_r+0xd2>
 8004dd4:	6821      	ldr	r1, [r4, #0]
 8004dd6:	3503      	adds	r5, #3
 8004dd8:	1a6d      	subs	r5, r5, r1
 8004dda:	f025 0503 	bic.w	r5, r5, #3
 8004dde:	3508      	adds	r5, #8
 8004de0:	2d0c      	cmp	r5, #12
 8004de2:	bf38      	it	cc
 8004de4:	250c      	movcc	r5, #12
 8004de6:	4629      	mov	r1, r5
 8004de8:	4638      	mov	r0, r7
 8004dea:	f7ff ffa5 	bl	8004d38 <sbrk_aligned>
 8004dee:	3001      	adds	r0, #1
 8004df0:	d02b      	beq.n	8004e4a <_malloc_r+0xd2>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	442b      	add	r3, r5
 8004df6:	6023      	str	r3, [r4, #0]
 8004df8:	e00e      	b.n	8004e18 <_malloc_r+0xa0>
 8004dfa:	6822      	ldr	r2, [r4, #0]
 8004dfc:	1b52      	subs	r2, r2, r5
 8004dfe:	d41e      	bmi.n	8004e3e <_malloc_r+0xc6>
 8004e00:	2a0b      	cmp	r2, #11
 8004e02:	d916      	bls.n	8004e32 <_malloc_r+0xba>
 8004e04:	1961      	adds	r1, r4, r5
 8004e06:	42a3      	cmp	r3, r4
 8004e08:	6025      	str	r5, [r4, #0]
 8004e0a:	bf18      	it	ne
 8004e0c:	6059      	strne	r1, [r3, #4]
 8004e0e:	6863      	ldr	r3, [r4, #4]
 8004e10:	bf08      	it	eq
 8004e12:	6031      	streq	r1, [r6, #0]
 8004e14:	5162      	str	r2, [r4, r5]
 8004e16:	604b      	str	r3, [r1, #4]
 8004e18:	4638      	mov	r0, r7
 8004e1a:	f104 060b 	add.w	r6, r4, #11
 8004e1e:	f000 fbb3 	bl	8005588 <__malloc_unlock>
 8004e22:	f026 0607 	bic.w	r6, r6, #7
 8004e26:	1d23      	adds	r3, r4, #4
 8004e28:	1af2      	subs	r2, r6, r3
 8004e2a:	d0b6      	beq.n	8004d9a <_malloc_r+0x22>
 8004e2c:	1b9b      	subs	r3, r3, r6
 8004e2e:	50a3      	str	r3, [r4, r2]
 8004e30:	e7b3      	b.n	8004d9a <_malloc_r+0x22>
 8004e32:	6862      	ldr	r2, [r4, #4]
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	bf0c      	ite	eq
 8004e38:	6032      	streq	r2, [r6, #0]
 8004e3a:	605a      	strne	r2, [r3, #4]
 8004e3c:	e7ec      	b.n	8004e18 <_malloc_r+0xa0>
 8004e3e:	4623      	mov	r3, r4
 8004e40:	6864      	ldr	r4, [r4, #4]
 8004e42:	e7b2      	b.n	8004daa <_malloc_r+0x32>
 8004e44:	4634      	mov	r4, r6
 8004e46:	6876      	ldr	r6, [r6, #4]
 8004e48:	e7b9      	b.n	8004dbe <_malloc_r+0x46>
 8004e4a:	230c      	movs	r3, #12
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	4638      	mov	r0, r7
 8004e50:	f000 fb9a 	bl	8005588 <__malloc_unlock>
 8004e54:	e7a1      	b.n	8004d9a <_malloc_r+0x22>
 8004e56:	6025      	str	r5, [r4, #0]
 8004e58:	e7de      	b.n	8004e18 <_malloc_r+0xa0>
 8004e5a:	bf00      	nop
 8004e5c:	20000294 	.word	0x20000294

08004e60 <__ssputs_r>:
 8004e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e64:	688e      	ldr	r6, [r1, #8]
 8004e66:	429e      	cmp	r6, r3
 8004e68:	4682      	mov	sl, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4690      	mov	r8, r2
 8004e6e:	461f      	mov	r7, r3
 8004e70:	d838      	bhi.n	8004ee4 <__ssputs_r+0x84>
 8004e72:	898a      	ldrh	r2, [r1, #12]
 8004e74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e78:	d032      	beq.n	8004ee0 <__ssputs_r+0x80>
 8004e7a:	6825      	ldr	r5, [r4, #0]
 8004e7c:	6909      	ldr	r1, [r1, #16]
 8004e7e:	eba5 0901 	sub.w	r9, r5, r1
 8004e82:	6965      	ldr	r5, [r4, #20]
 8004e84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e88:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	444b      	add	r3, r9
 8004e90:	106d      	asrs	r5, r5, #1
 8004e92:	429d      	cmp	r5, r3
 8004e94:	bf38      	it	cc
 8004e96:	461d      	movcc	r5, r3
 8004e98:	0553      	lsls	r3, r2, #21
 8004e9a:	d531      	bpl.n	8004f00 <__ssputs_r+0xa0>
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7ff ff6b 	bl	8004d78 <_malloc_r>
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	b950      	cbnz	r0, 8004ebc <__ssputs_r+0x5c>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	f8ca 3000 	str.w	r3, [sl]
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eb2:	81a3      	strh	r3, [r4, #12]
 8004eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ebc:	6921      	ldr	r1, [r4, #16]
 8004ebe:	464a      	mov	r2, r9
 8004ec0:	f000 fb34 	bl	800552c <memcpy>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ece:	81a3      	strh	r3, [r4, #12]
 8004ed0:	6126      	str	r6, [r4, #16]
 8004ed2:	6165      	str	r5, [r4, #20]
 8004ed4:	444e      	add	r6, r9
 8004ed6:	eba5 0509 	sub.w	r5, r5, r9
 8004eda:	6026      	str	r6, [r4, #0]
 8004edc:	60a5      	str	r5, [r4, #8]
 8004ede:	463e      	mov	r6, r7
 8004ee0:	42be      	cmp	r6, r7
 8004ee2:	d900      	bls.n	8004ee6 <__ssputs_r+0x86>
 8004ee4:	463e      	mov	r6, r7
 8004ee6:	6820      	ldr	r0, [r4, #0]
 8004ee8:	4632      	mov	r2, r6
 8004eea:	4641      	mov	r1, r8
 8004eec:	f000 fb2c 	bl	8005548 <memmove>
 8004ef0:	68a3      	ldr	r3, [r4, #8]
 8004ef2:	1b9b      	subs	r3, r3, r6
 8004ef4:	60a3      	str	r3, [r4, #8]
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	4433      	add	r3, r6
 8004efa:	6023      	str	r3, [r4, #0]
 8004efc:	2000      	movs	r0, #0
 8004efe:	e7db      	b.n	8004eb8 <__ssputs_r+0x58>
 8004f00:	462a      	mov	r2, r5
 8004f02:	f000 fb47 	bl	8005594 <_realloc_r>
 8004f06:	4606      	mov	r6, r0
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1e1      	bne.n	8004ed0 <__ssputs_r+0x70>
 8004f0c:	6921      	ldr	r1, [r4, #16]
 8004f0e:	4650      	mov	r0, sl
 8004f10:	f7ff fec6 	bl	8004ca0 <_free_r>
 8004f14:	e7c7      	b.n	8004ea6 <__ssputs_r+0x46>
	...

08004f18 <_svfiprintf_r>:
 8004f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f1c:	4698      	mov	r8, r3
 8004f1e:	898b      	ldrh	r3, [r1, #12]
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	b09d      	sub	sp, #116	; 0x74
 8004f24:	4607      	mov	r7, r0
 8004f26:	460d      	mov	r5, r1
 8004f28:	4614      	mov	r4, r2
 8004f2a:	d50e      	bpl.n	8004f4a <_svfiprintf_r+0x32>
 8004f2c:	690b      	ldr	r3, [r1, #16]
 8004f2e:	b963      	cbnz	r3, 8004f4a <_svfiprintf_r+0x32>
 8004f30:	2140      	movs	r1, #64	; 0x40
 8004f32:	f7ff ff21 	bl	8004d78 <_malloc_r>
 8004f36:	6028      	str	r0, [r5, #0]
 8004f38:	6128      	str	r0, [r5, #16]
 8004f3a:	b920      	cbnz	r0, 8004f46 <_svfiprintf_r+0x2e>
 8004f3c:	230c      	movs	r3, #12
 8004f3e:	603b      	str	r3, [r7, #0]
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	e0d1      	b.n	80050ea <_svfiprintf_r+0x1d2>
 8004f46:	2340      	movs	r3, #64	; 0x40
 8004f48:	616b      	str	r3, [r5, #20]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f4e:	2320      	movs	r3, #32
 8004f50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f58:	2330      	movs	r3, #48	; 0x30
 8004f5a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005104 <_svfiprintf_r+0x1ec>
 8004f5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f62:	f04f 0901 	mov.w	r9, #1
 8004f66:	4623      	mov	r3, r4
 8004f68:	469a      	mov	sl, r3
 8004f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6e:	b10a      	cbz	r2, 8004f74 <_svfiprintf_r+0x5c>
 8004f70:	2a25      	cmp	r2, #37	; 0x25
 8004f72:	d1f9      	bne.n	8004f68 <_svfiprintf_r+0x50>
 8004f74:	ebba 0b04 	subs.w	fp, sl, r4
 8004f78:	d00b      	beq.n	8004f92 <_svfiprintf_r+0x7a>
 8004f7a:	465b      	mov	r3, fp
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ff6d 	bl	8004e60 <__ssputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80aa 	beq.w	80050e0 <_svfiprintf_r+0x1c8>
 8004f8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f8e:	445a      	add	r2, fp
 8004f90:	9209      	str	r2, [sp, #36]	; 0x24
 8004f92:	f89a 3000 	ldrb.w	r3, [sl]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 80a2 	beq.w	80050e0 <_svfiprintf_r+0x1c8>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa6:	f10a 0a01 	add.w	sl, sl, #1
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	9307      	str	r3, [sp, #28]
 8004fae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb2:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb4:	4654      	mov	r4, sl
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbc:	4851      	ldr	r0, [pc, #324]	; (8005104 <_svfiprintf_r+0x1ec>)
 8004fbe:	f7fb f90f 	bl	80001e0 <memchr>
 8004fc2:	9a04      	ldr	r2, [sp, #16]
 8004fc4:	b9d8      	cbnz	r0, 8004ffe <_svfiprintf_r+0xe6>
 8004fc6:	06d0      	lsls	r0, r2, #27
 8004fc8:	bf44      	itt	mi
 8004fca:	2320      	movmi	r3, #32
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd0:	0711      	lsls	r1, r2, #28
 8004fd2:	bf44      	itt	mi
 8004fd4:	232b      	movmi	r3, #43	; 0x2b
 8004fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fda:	f89a 3000 	ldrb.w	r3, [sl]
 8004fde:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe0:	d015      	beq.n	800500e <_svfiprintf_r+0xf6>
 8004fe2:	9a07      	ldr	r2, [sp, #28]
 8004fe4:	4654      	mov	r4, sl
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	4621      	mov	r1, r4
 8004fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff2:	3b30      	subs	r3, #48	; 0x30
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d94e      	bls.n	8005096 <_svfiprintf_r+0x17e>
 8004ff8:	b1b0      	cbz	r0, 8005028 <_svfiprintf_r+0x110>
 8004ffa:	9207      	str	r2, [sp, #28]
 8004ffc:	e014      	b.n	8005028 <_svfiprintf_r+0x110>
 8004ffe:	eba0 0308 	sub.w	r3, r0, r8
 8005002:	fa09 f303 	lsl.w	r3, r9, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	46a2      	mov	sl, r4
 800500c:	e7d2      	b.n	8004fb4 <_svfiprintf_r+0x9c>
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9103      	str	r1, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbb      	ittet	lt
 800501a:	425b      	neglt	r3, r3
 800501c:	f042 0202 	orrlt.w	r2, r2, #2
 8005020:	9307      	strge	r3, [sp, #28]
 8005022:	9307      	strlt	r3, [sp, #28]
 8005024:	bfb8      	it	lt
 8005026:	9204      	strlt	r2, [sp, #16]
 8005028:	7823      	ldrb	r3, [r4, #0]
 800502a:	2b2e      	cmp	r3, #46	; 0x2e
 800502c:	d10c      	bne.n	8005048 <_svfiprintf_r+0x130>
 800502e:	7863      	ldrb	r3, [r4, #1]
 8005030:	2b2a      	cmp	r3, #42	; 0x2a
 8005032:	d135      	bne.n	80050a0 <_svfiprintf_r+0x188>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	bfb8      	it	lt
 8005040:	f04f 33ff 	movlt.w	r3, #4294967295
 8005044:	3402      	adds	r4, #2
 8005046:	9305      	str	r3, [sp, #20]
 8005048:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005114 <_svfiprintf_r+0x1fc>
 800504c:	7821      	ldrb	r1, [r4, #0]
 800504e:	2203      	movs	r2, #3
 8005050:	4650      	mov	r0, sl
 8005052:	f7fb f8c5 	bl	80001e0 <memchr>
 8005056:	b140      	cbz	r0, 800506a <_svfiprintf_r+0x152>
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	eba0 000a 	sub.w	r0, r0, sl
 800505e:	fa03 f000 	lsl.w	r0, r3, r0
 8005062:	9b04      	ldr	r3, [sp, #16]
 8005064:	4303      	orrs	r3, r0
 8005066:	3401      	adds	r4, #1
 8005068:	9304      	str	r3, [sp, #16]
 800506a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800506e:	4826      	ldr	r0, [pc, #152]	; (8005108 <_svfiprintf_r+0x1f0>)
 8005070:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005074:	2206      	movs	r2, #6
 8005076:	f7fb f8b3 	bl	80001e0 <memchr>
 800507a:	2800      	cmp	r0, #0
 800507c:	d038      	beq.n	80050f0 <_svfiprintf_r+0x1d8>
 800507e:	4b23      	ldr	r3, [pc, #140]	; (800510c <_svfiprintf_r+0x1f4>)
 8005080:	bb1b      	cbnz	r3, 80050ca <_svfiprintf_r+0x1b2>
 8005082:	9b03      	ldr	r3, [sp, #12]
 8005084:	3307      	adds	r3, #7
 8005086:	f023 0307 	bic.w	r3, r3, #7
 800508a:	3308      	adds	r3, #8
 800508c:	9303      	str	r3, [sp, #12]
 800508e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005090:	4433      	add	r3, r6
 8005092:	9309      	str	r3, [sp, #36]	; 0x24
 8005094:	e767      	b.n	8004f66 <_svfiprintf_r+0x4e>
 8005096:	fb0c 3202 	mla	r2, ip, r2, r3
 800509a:	460c      	mov	r4, r1
 800509c:	2001      	movs	r0, #1
 800509e:	e7a5      	b.n	8004fec <_svfiprintf_r+0xd4>
 80050a0:	2300      	movs	r3, #0
 80050a2:	3401      	adds	r4, #1
 80050a4:	9305      	str	r3, [sp, #20]
 80050a6:	4619      	mov	r1, r3
 80050a8:	f04f 0c0a 	mov.w	ip, #10
 80050ac:	4620      	mov	r0, r4
 80050ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b2:	3a30      	subs	r2, #48	; 0x30
 80050b4:	2a09      	cmp	r2, #9
 80050b6:	d903      	bls.n	80050c0 <_svfiprintf_r+0x1a8>
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0c5      	beq.n	8005048 <_svfiprintf_r+0x130>
 80050bc:	9105      	str	r1, [sp, #20]
 80050be:	e7c3      	b.n	8005048 <_svfiprintf_r+0x130>
 80050c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80050c4:	4604      	mov	r4, r0
 80050c6:	2301      	movs	r3, #1
 80050c8:	e7f0      	b.n	80050ac <_svfiprintf_r+0x194>
 80050ca:	ab03      	add	r3, sp, #12
 80050cc:	9300      	str	r3, [sp, #0]
 80050ce:	462a      	mov	r2, r5
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <_svfiprintf_r+0x1f8>)
 80050d2:	a904      	add	r1, sp, #16
 80050d4:	4638      	mov	r0, r7
 80050d6:	f3af 8000 	nop.w
 80050da:	1c42      	adds	r2, r0, #1
 80050dc:	4606      	mov	r6, r0
 80050de:	d1d6      	bne.n	800508e <_svfiprintf_r+0x176>
 80050e0:	89ab      	ldrh	r3, [r5, #12]
 80050e2:	065b      	lsls	r3, r3, #25
 80050e4:	f53f af2c 	bmi.w	8004f40 <_svfiprintf_r+0x28>
 80050e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050ea:	b01d      	add	sp, #116	; 0x74
 80050ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f0:	ab03      	add	r3, sp, #12
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	462a      	mov	r2, r5
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <_svfiprintf_r+0x1f8>)
 80050f8:	a904      	add	r1, sp, #16
 80050fa:	4638      	mov	r0, r7
 80050fc:	f000 f87a 	bl	80051f4 <_printf_i>
 8005100:	e7eb      	b.n	80050da <_svfiprintf_r+0x1c2>
 8005102:	bf00      	nop
 8005104:	08005db8 	.word	0x08005db8
 8005108:	08005dc2 	.word	0x08005dc2
 800510c:	00000000 	.word	0x00000000
 8005110:	08004e61 	.word	0x08004e61
 8005114:	08005dbe 	.word	0x08005dbe

08005118 <_printf_common>:
 8005118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800511c:	4616      	mov	r6, r2
 800511e:	4699      	mov	r9, r3
 8005120:	688a      	ldr	r2, [r1, #8]
 8005122:	690b      	ldr	r3, [r1, #16]
 8005124:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005128:	4293      	cmp	r3, r2
 800512a:	bfb8      	it	lt
 800512c:	4613      	movlt	r3, r2
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005134:	4607      	mov	r7, r0
 8005136:	460c      	mov	r4, r1
 8005138:	b10a      	cbz	r2, 800513e <_printf_common+0x26>
 800513a:	3301      	adds	r3, #1
 800513c:	6033      	str	r3, [r6, #0]
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	0699      	lsls	r1, r3, #26
 8005142:	bf42      	ittt	mi
 8005144:	6833      	ldrmi	r3, [r6, #0]
 8005146:	3302      	addmi	r3, #2
 8005148:	6033      	strmi	r3, [r6, #0]
 800514a:	6825      	ldr	r5, [r4, #0]
 800514c:	f015 0506 	ands.w	r5, r5, #6
 8005150:	d106      	bne.n	8005160 <_printf_common+0x48>
 8005152:	f104 0a19 	add.w	sl, r4, #25
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	6832      	ldr	r2, [r6, #0]
 800515a:	1a9b      	subs	r3, r3, r2
 800515c:	42ab      	cmp	r3, r5
 800515e:	dc26      	bgt.n	80051ae <_printf_common+0x96>
 8005160:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005164:	1e13      	subs	r3, r2, #0
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	bf18      	it	ne
 800516a:	2301      	movne	r3, #1
 800516c:	0692      	lsls	r2, r2, #26
 800516e:	d42b      	bmi.n	80051c8 <_printf_common+0xb0>
 8005170:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005174:	4649      	mov	r1, r9
 8005176:	4638      	mov	r0, r7
 8005178:	47c0      	blx	r8
 800517a:	3001      	adds	r0, #1
 800517c:	d01e      	beq.n	80051bc <_printf_common+0xa4>
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	68e5      	ldr	r5, [r4, #12]
 8005182:	6832      	ldr	r2, [r6, #0]
 8005184:	f003 0306 	and.w	r3, r3, #6
 8005188:	2b04      	cmp	r3, #4
 800518a:	bf08      	it	eq
 800518c:	1aad      	subeq	r5, r5, r2
 800518e:	68a3      	ldr	r3, [r4, #8]
 8005190:	6922      	ldr	r2, [r4, #16]
 8005192:	bf0c      	ite	eq
 8005194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005198:	2500      	movne	r5, #0
 800519a:	4293      	cmp	r3, r2
 800519c:	bfc4      	itt	gt
 800519e:	1a9b      	subgt	r3, r3, r2
 80051a0:	18ed      	addgt	r5, r5, r3
 80051a2:	2600      	movs	r6, #0
 80051a4:	341a      	adds	r4, #26
 80051a6:	42b5      	cmp	r5, r6
 80051a8:	d11a      	bne.n	80051e0 <_printf_common+0xc8>
 80051aa:	2000      	movs	r0, #0
 80051ac:	e008      	b.n	80051c0 <_printf_common+0xa8>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4652      	mov	r2, sl
 80051b2:	4649      	mov	r1, r9
 80051b4:	4638      	mov	r0, r7
 80051b6:	47c0      	blx	r8
 80051b8:	3001      	adds	r0, #1
 80051ba:	d103      	bne.n	80051c4 <_printf_common+0xac>
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c4:	3501      	adds	r5, #1
 80051c6:	e7c6      	b.n	8005156 <_printf_common+0x3e>
 80051c8:	18e1      	adds	r1, r4, r3
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	2030      	movs	r0, #48	; 0x30
 80051ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d2:	4422      	add	r2, r4
 80051d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051dc:	3302      	adds	r3, #2
 80051de:	e7c7      	b.n	8005170 <_printf_common+0x58>
 80051e0:	2301      	movs	r3, #1
 80051e2:	4622      	mov	r2, r4
 80051e4:	4649      	mov	r1, r9
 80051e6:	4638      	mov	r0, r7
 80051e8:	47c0      	blx	r8
 80051ea:	3001      	adds	r0, #1
 80051ec:	d0e6      	beq.n	80051bc <_printf_common+0xa4>
 80051ee:	3601      	adds	r6, #1
 80051f0:	e7d9      	b.n	80051a6 <_printf_common+0x8e>
	...

080051f4 <_printf_i>:
 80051f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f8:	7e0f      	ldrb	r7, [r1, #24]
 80051fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80051fc:	2f78      	cmp	r7, #120	; 0x78
 80051fe:	4691      	mov	r9, r2
 8005200:	4680      	mov	r8, r0
 8005202:	460c      	mov	r4, r1
 8005204:	469a      	mov	sl, r3
 8005206:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800520a:	d807      	bhi.n	800521c <_printf_i+0x28>
 800520c:	2f62      	cmp	r7, #98	; 0x62
 800520e:	d80a      	bhi.n	8005226 <_printf_i+0x32>
 8005210:	2f00      	cmp	r7, #0
 8005212:	f000 80d8 	beq.w	80053c6 <_printf_i+0x1d2>
 8005216:	2f58      	cmp	r7, #88	; 0x58
 8005218:	f000 80a3 	beq.w	8005362 <_printf_i+0x16e>
 800521c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005220:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005224:	e03a      	b.n	800529c <_printf_i+0xa8>
 8005226:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800522a:	2b15      	cmp	r3, #21
 800522c:	d8f6      	bhi.n	800521c <_printf_i+0x28>
 800522e:	a101      	add	r1, pc, #4	; (adr r1, 8005234 <_printf_i+0x40>)
 8005230:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005234:	0800528d 	.word	0x0800528d
 8005238:	080052a1 	.word	0x080052a1
 800523c:	0800521d 	.word	0x0800521d
 8005240:	0800521d 	.word	0x0800521d
 8005244:	0800521d 	.word	0x0800521d
 8005248:	0800521d 	.word	0x0800521d
 800524c:	080052a1 	.word	0x080052a1
 8005250:	0800521d 	.word	0x0800521d
 8005254:	0800521d 	.word	0x0800521d
 8005258:	0800521d 	.word	0x0800521d
 800525c:	0800521d 	.word	0x0800521d
 8005260:	080053ad 	.word	0x080053ad
 8005264:	080052d1 	.word	0x080052d1
 8005268:	0800538f 	.word	0x0800538f
 800526c:	0800521d 	.word	0x0800521d
 8005270:	0800521d 	.word	0x0800521d
 8005274:	080053cf 	.word	0x080053cf
 8005278:	0800521d 	.word	0x0800521d
 800527c:	080052d1 	.word	0x080052d1
 8005280:	0800521d 	.word	0x0800521d
 8005284:	0800521d 	.word	0x0800521d
 8005288:	08005397 	.word	0x08005397
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	1d1a      	adds	r2, r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	602a      	str	r2, [r5, #0]
 8005294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529c:	2301      	movs	r3, #1
 800529e:	e0a3      	b.n	80053e8 <_printf_i+0x1f4>
 80052a0:	6820      	ldr	r0, [r4, #0]
 80052a2:	6829      	ldr	r1, [r5, #0]
 80052a4:	0606      	lsls	r6, r0, #24
 80052a6:	f101 0304 	add.w	r3, r1, #4
 80052aa:	d50a      	bpl.n	80052c2 <_printf_i+0xce>
 80052ac:	680e      	ldr	r6, [r1, #0]
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	2e00      	cmp	r6, #0
 80052b2:	da03      	bge.n	80052bc <_printf_i+0xc8>
 80052b4:	232d      	movs	r3, #45	; 0x2d
 80052b6:	4276      	negs	r6, r6
 80052b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052bc:	485e      	ldr	r0, [pc, #376]	; (8005438 <_printf_i+0x244>)
 80052be:	230a      	movs	r3, #10
 80052c0:	e019      	b.n	80052f6 <_printf_i+0x102>
 80052c2:	680e      	ldr	r6, [r1, #0]
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052ca:	bf18      	it	ne
 80052cc:	b236      	sxthne	r6, r6
 80052ce:	e7ef      	b.n	80052b0 <_printf_i+0xbc>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	1d19      	adds	r1, r3, #4
 80052d6:	6029      	str	r1, [r5, #0]
 80052d8:	0601      	lsls	r1, r0, #24
 80052da:	d501      	bpl.n	80052e0 <_printf_i+0xec>
 80052dc:	681e      	ldr	r6, [r3, #0]
 80052de:	e002      	b.n	80052e6 <_printf_i+0xf2>
 80052e0:	0646      	lsls	r6, r0, #25
 80052e2:	d5fb      	bpl.n	80052dc <_printf_i+0xe8>
 80052e4:	881e      	ldrh	r6, [r3, #0]
 80052e6:	4854      	ldr	r0, [pc, #336]	; (8005438 <_printf_i+0x244>)
 80052e8:	2f6f      	cmp	r7, #111	; 0x6f
 80052ea:	bf0c      	ite	eq
 80052ec:	2308      	moveq	r3, #8
 80052ee:	230a      	movne	r3, #10
 80052f0:	2100      	movs	r1, #0
 80052f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052f6:	6865      	ldr	r5, [r4, #4]
 80052f8:	60a5      	str	r5, [r4, #8]
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	bfa2      	ittt	ge
 80052fe:	6821      	ldrge	r1, [r4, #0]
 8005300:	f021 0104 	bicge.w	r1, r1, #4
 8005304:	6021      	strge	r1, [r4, #0]
 8005306:	b90e      	cbnz	r6, 800530c <_printf_i+0x118>
 8005308:	2d00      	cmp	r5, #0
 800530a:	d04d      	beq.n	80053a8 <_printf_i+0x1b4>
 800530c:	4615      	mov	r5, r2
 800530e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005312:	fb03 6711 	mls	r7, r3, r1, r6
 8005316:	5dc7      	ldrb	r7, [r0, r7]
 8005318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800531c:	4637      	mov	r7, r6
 800531e:	42bb      	cmp	r3, r7
 8005320:	460e      	mov	r6, r1
 8005322:	d9f4      	bls.n	800530e <_printf_i+0x11a>
 8005324:	2b08      	cmp	r3, #8
 8005326:	d10b      	bne.n	8005340 <_printf_i+0x14c>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	07de      	lsls	r6, r3, #31
 800532c:	d508      	bpl.n	8005340 <_printf_i+0x14c>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	6861      	ldr	r1, [r4, #4]
 8005332:	4299      	cmp	r1, r3
 8005334:	bfde      	ittt	le
 8005336:	2330      	movle	r3, #48	; 0x30
 8005338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800533c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005340:	1b52      	subs	r2, r2, r5
 8005342:	6122      	str	r2, [r4, #16]
 8005344:	f8cd a000 	str.w	sl, [sp]
 8005348:	464b      	mov	r3, r9
 800534a:	aa03      	add	r2, sp, #12
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff fee2 	bl	8005118 <_printf_common>
 8005354:	3001      	adds	r0, #1
 8005356:	d14c      	bne.n	80053f2 <_printf_i+0x1fe>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	b004      	add	sp, #16
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	4835      	ldr	r0, [pc, #212]	; (8005438 <_printf_i+0x244>)
 8005364:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005368:	6829      	ldr	r1, [r5, #0]
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005370:	6029      	str	r1, [r5, #0]
 8005372:	061d      	lsls	r5, r3, #24
 8005374:	d514      	bpl.n	80053a0 <_printf_i+0x1ac>
 8005376:	07df      	lsls	r7, r3, #31
 8005378:	bf44      	itt	mi
 800537a:	f043 0320 	orrmi.w	r3, r3, #32
 800537e:	6023      	strmi	r3, [r4, #0]
 8005380:	b91e      	cbnz	r6, 800538a <_printf_i+0x196>
 8005382:	6823      	ldr	r3, [r4, #0]
 8005384:	f023 0320 	bic.w	r3, r3, #32
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	2310      	movs	r3, #16
 800538c:	e7b0      	b.n	80052f0 <_printf_i+0xfc>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	f043 0320 	orr.w	r3, r3, #32
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	2378      	movs	r3, #120	; 0x78
 8005398:	4828      	ldr	r0, [pc, #160]	; (800543c <_printf_i+0x248>)
 800539a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800539e:	e7e3      	b.n	8005368 <_printf_i+0x174>
 80053a0:	0659      	lsls	r1, r3, #25
 80053a2:	bf48      	it	mi
 80053a4:	b2b6      	uxthmi	r6, r6
 80053a6:	e7e6      	b.n	8005376 <_printf_i+0x182>
 80053a8:	4615      	mov	r5, r2
 80053aa:	e7bb      	b.n	8005324 <_printf_i+0x130>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	6826      	ldr	r6, [r4, #0]
 80053b0:	6961      	ldr	r1, [r4, #20]
 80053b2:	1d18      	adds	r0, r3, #4
 80053b4:	6028      	str	r0, [r5, #0]
 80053b6:	0635      	lsls	r5, r6, #24
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	d501      	bpl.n	80053c0 <_printf_i+0x1cc>
 80053bc:	6019      	str	r1, [r3, #0]
 80053be:	e002      	b.n	80053c6 <_printf_i+0x1d2>
 80053c0:	0670      	lsls	r0, r6, #25
 80053c2:	d5fb      	bpl.n	80053bc <_printf_i+0x1c8>
 80053c4:	8019      	strh	r1, [r3, #0]
 80053c6:	2300      	movs	r3, #0
 80053c8:	6123      	str	r3, [r4, #16]
 80053ca:	4615      	mov	r5, r2
 80053cc:	e7ba      	b.n	8005344 <_printf_i+0x150>
 80053ce:	682b      	ldr	r3, [r5, #0]
 80053d0:	1d1a      	adds	r2, r3, #4
 80053d2:	602a      	str	r2, [r5, #0]
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	6862      	ldr	r2, [r4, #4]
 80053d8:	2100      	movs	r1, #0
 80053da:	4628      	mov	r0, r5
 80053dc:	f7fa ff00 	bl	80001e0 <memchr>
 80053e0:	b108      	cbz	r0, 80053e6 <_printf_i+0x1f2>
 80053e2:	1b40      	subs	r0, r0, r5
 80053e4:	6060      	str	r0, [r4, #4]
 80053e6:	6863      	ldr	r3, [r4, #4]
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	2300      	movs	r3, #0
 80053ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f0:	e7a8      	b.n	8005344 <_printf_i+0x150>
 80053f2:	6923      	ldr	r3, [r4, #16]
 80053f4:	462a      	mov	r2, r5
 80053f6:	4649      	mov	r1, r9
 80053f8:	4640      	mov	r0, r8
 80053fa:	47d0      	blx	sl
 80053fc:	3001      	adds	r0, #1
 80053fe:	d0ab      	beq.n	8005358 <_printf_i+0x164>
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	079b      	lsls	r3, r3, #30
 8005404:	d413      	bmi.n	800542e <_printf_i+0x23a>
 8005406:	68e0      	ldr	r0, [r4, #12]
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	4298      	cmp	r0, r3
 800540c:	bfb8      	it	lt
 800540e:	4618      	movlt	r0, r3
 8005410:	e7a4      	b.n	800535c <_printf_i+0x168>
 8005412:	2301      	movs	r3, #1
 8005414:	4632      	mov	r2, r6
 8005416:	4649      	mov	r1, r9
 8005418:	4640      	mov	r0, r8
 800541a:	47d0      	blx	sl
 800541c:	3001      	adds	r0, #1
 800541e:	d09b      	beq.n	8005358 <_printf_i+0x164>
 8005420:	3501      	adds	r5, #1
 8005422:	68e3      	ldr	r3, [r4, #12]
 8005424:	9903      	ldr	r1, [sp, #12]
 8005426:	1a5b      	subs	r3, r3, r1
 8005428:	42ab      	cmp	r3, r5
 800542a:	dcf2      	bgt.n	8005412 <_printf_i+0x21e>
 800542c:	e7eb      	b.n	8005406 <_printf_i+0x212>
 800542e:	2500      	movs	r5, #0
 8005430:	f104 0619 	add.w	r6, r4, #25
 8005434:	e7f5      	b.n	8005422 <_printf_i+0x22e>
 8005436:	bf00      	nop
 8005438:	08005dc9 	.word	0x08005dc9
 800543c:	08005dda 	.word	0x08005dda

08005440 <_sbrk_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d06      	ldr	r5, [pc, #24]	; (800545c <_sbrk_r+0x1c>)
 8005444:	2300      	movs	r3, #0
 8005446:	4604      	mov	r4, r0
 8005448:	4608      	mov	r0, r1
 800544a:	602b      	str	r3, [r5, #0]
 800544c:	f7fb fc22 	bl	8000c94 <_sbrk>
 8005450:	1c43      	adds	r3, r0, #1
 8005452:	d102      	bne.n	800545a <_sbrk_r+0x1a>
 8005454:	682b      	ldr	r3, [r5, #0]
 8005456:	b103      	cbz	r3, 800545a <_sbrk_r+0x1a>
 8005458:	6023      	str	r3, [r4, #0]
 800545a:	bd38      	pop	{r3, r4, r5, pc}
 800545c:	2000029c 	.word	0x2000029c

08005460 <__sread>:
 8005460:	b510      	push	{r4, lr}
 8005462:	460c      	mov	r4, r1
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	f000 f8c4 	bl	80055f4 <_read_r>
 800546c:	2800      	cmp	r0, #0
 800546e:	bfab      	itete	ge
 8005470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005472:	89a3      	ldrhlt	r3, [r4, #12]
 8005474:	181b      	addge	r3, r3, r0
 8005476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800547a:	bfac      	ite	ge
 800547c:	6563      	strge	r3, [r4, #84]	; 0x54
 800547e:	81a3      	strhlt	r3, [r4, #12]
 8005480:	bd10      	pop	{r4, pc}

08005482 <__swrite>:
 8005482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005486:	461f      	mov	r7, r3
 8005488:	898b      	ldrh	r3, [r1, #12]
 800548a:	05db      	lsls	r3, r3, #23
 800548c:	4605      	mov	r5, r0
 800548e:	460c      	mov	r4, r1
 8005490:	4616      	mov	r6, r2
 8005492:	d505      	bpl.n	80054a0 <__swrite+0x1e>
 8005494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005498:	2302      	movs	r3, #2
 800549a:	2200      	movs	r2, #0
 800549c:	f000 f834 	bl	8005508 <_lseek_r>
 80054a0:	89a3      	ldrh	r3, [r4, #12]
 80054a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	4632      	mov	r2, r6
 80054ae:	463b      	mov	r3, r7
 80054b0:	4628      	mov	r0, r5
 80054b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054b6:	f7ff b9e9 	b.w	800488c <_write_r>

080054ba <__sseek>:
 80054ba:	b510      	push	{r4, lr}
 80054bc:	460c      	mov	r4, r1
 80054be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054c2:	f000 f821 	bl	8005508 <_lseek_r>
 80054c6:	1c43      	adds	r3, r0, #1
 80054c8:	89a3      	ldrh	r3, [r4, #12]
 80054ca:	bf15      	itete	ne
 80054cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80054ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80054d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80054d6:	81a3      	strheq	r3, [r4, #12]
 80054d8:	bf18      	it	ne
 80054da:	81a3      	strhne	r3, [r4, #12]
 80054dc:	bd10      	pop	{r4, pc}

080054de <__sclose>:
 80054de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e2:	f000 b801 	b.w	80054e8 <_close_r>
	...

080054e8 <_close_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d06      	ldr	r5, [pc, #24]	; (8005504 <_close_r+0x1c>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	f7fb fbb5 	bl	8000c62 <_close>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_close_r+0x1a>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_close_r+0x1a>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	2000029c 	.word	0x2000029c

08005508 <_lseek_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d07      	ldr	r5, [pc, #28]	; (8005528 <_lseek_r+0x20>)
 800550c:	4604      	mov	r4, r0
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	2200      	movs	r2, #0
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	f7fb fbaf 	bl	8000c7a <_lseek>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_lseek_r+0x1e>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_lseek_r+0x1e>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	2000029c 	.word	0x2000029c

0800552c <memcpy>:
 800552c:	440a      	add	r2, r1
 800552e:	4291      	cmp	r1, r2
 8005530:	f100 33ff 	add.w	r3, r0, #4294967295
 8005534:	d100      	bne.n	8005538 <memcpy+0xc>
 8005536:	4770      	bx	lr
 8005538:	b510      	push	{r4, lr}
 800553a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800553e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005542:	4291      	cmp	r1, r2
 8005544:	d1f9      	bne.n	800553a <memcpy+0xe>
 8005546:	bd10      	pop	{r4, pc}

08005548 <memmove>:
 8005548:	4288      	cmp	r0, r1
 800554a:	b510      	push	{r4, lr}
 800554c:	eb01 0402 	add.w	r4, r1, r2
 8005550:	d902      	bls.n	8005558 <memmove+0x10>
 8005552:	4284      	cmp	r4, r0
 8005554:	4623      	mov	r3, r4
 8005556:	d807      	bhi.n	8005568 <memmove+0x20>
 8005558:	1e43      	subs	r3, r0, #1
 800555a:	42a1      	cmp	r1, r4
 800555c:	d008      	beq.n	8005570 <memmove+0x28>
 800555e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005566:	e7f8      	b.n	800555a <memmove+0x12>
 8005568:	4402      	add	r2, r0
 800556a:	4601      	mov	r1, r0
 800556c:	428a      	cmp	r2, r1
 800556e:	d100      	bne.n	8005572 <memmove+0x2a>
 8005570:	bd10      	pop	{r4, pc}
 8005572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800557a:	e7f7      	b.n	800556c <memmove+0x24>

0800557c <__malloc_lock>:
 800557c:	4801      	ldr	r0, [pc, #4]	; (8005584 <__malloc_lock+0x8>)
 800557e:	f7ff bb8d 	b.w	8004c9c <__retarget_lock_acquire_recursive>
 8005582:	bf00      	nop
 8005584:	20000290 	.word	0x20000290

08005588 <__malloc_unlock>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__malloc_unlock+0x8>)
 800558a:	f7ff bb88 	b.w	8004c9e <__retarget_lock_release_recursive>
 800558e:	bf00      	nop
 8005590:	20000290 	.word	0x20000290

08005594 <_realloc_r>:
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	4680      	mov	r8, r0
 800559a:	4614      	mov	r4, r2
 800559c:	460e      	mov	r6, r1
 800559e:	b921      	cbnz	r1, 80055aa <_realloc_r+0x16>
 80055a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055a4:	4611      	mov	r1, r2
 80055a6:	f7ff bbe7 	b.w	8004d78 <_malloc_r>
 80055aa:	b92a      	cbnz	r2, 80055b8 <_realloc_r+0x24>
 80055ac:	f7ff fb78 	bl	8004ca0 <_free_r>
 80055b0:	4625      	mov	r5, r4
 80055b2:	4628      	mov	r0, r5
 80055b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b8:	f000 f82e 	bl	8005618 <_malloc_usable_size_r>
 80055bc:	4284      	cmp	r4, r0
 80055be:	4607      	mov	r7, r0
 80055c0:	d802      	bhi.n	80055c8 <_realloc_r+0x34>
 80055c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055c6:	d812      	bhi.n	80055ee <_realloc_r+0x5a>
 80055c8:	4621      	mov	r1, r4
 80055ca:	4640      	mov	r0, r8
 80055cc:	f7ff fbd4 	bl	8004d78 <_malloc_r>
 80055d0:	4605      	mov	r5, r0
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d0ed      	beq.n	80055b2 <_realloc_r+0x1e>
 80055d6:	42bc      	cmp	r4, r7
 80055d8:	4622      	mov	r2, r4
 80055da:	4631      	mov	r1, r6
 80055dc:	bf28      	it	cs
 80055de:	463a      	movcs	r2, r7
 80055e0:	f7ff ffa4 	bl	800552c <memcpy>
 80055e4:	4631      	mov	r1, r6
 80055e6:	4640      	mov	r0, r8
 80055e8:	f7ff fb5a 	bl	8004ca0 <_free_r>
 80055ec:	e7e1      	b.n	80055b2 <_realloc_r+0x1e>
 80055ee:	4635      	mov	r5, r6
 80055f0:	e7df      	b.n	80055b2 <_realloc_r+0x1e>
	...

080055f4 <_read_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_read_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb faf4 	bl	8000bf0 <_read>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_read_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_read_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	2000029c 	.word	0x2000029c

08005618 <_malloc_usable_size_r>:
 8005618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800561c:	1f18      	subs	r0, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	bfbc      	itt	lt
 8005622:	580b      	ldrlt	r3, [r1, r0]
 8005624:	18c0      	addlt	r0, r0, r3
 8005626:	4770      	bx	lr

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	bf00      	nop
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
