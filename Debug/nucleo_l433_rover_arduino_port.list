
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  08005b80  08005b80  00015b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006310  08006310  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006310  08006310  00016310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006318  08006318  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800631c  0800631c  0001631c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  08006390  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006390  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001300d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002745  00000000  00000000  000330ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  000357f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00036958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268bb  00000000  00000000  000379a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a8c  00000000  00000000  0005e25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db5d8  00000000  00000000  00072ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e2bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000507c  00000000  00000000  0014e310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005b68 	.word	0x08005b68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005b68 	.word	0x08005b68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x130>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80005fa:	2200      	movs	r2, #0
 80005fc:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 f946 	bl	8001894 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <MX_GPIO_Init+0x134>)
 800060e:	f001 f941 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2160      	movs	r1, #96	; 0x60
 8000616:	4829      	ldr	r0, [pc, #164]	; (80006bc <MX_GPIO_Init+0x138>)
 8000618:	f001 f93c 	bl	8001894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <MX_GPIO_Init+0x134>)
 8000634:	f000 ffb4 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000638:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800063c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 ffa4 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 ff97 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0x134>)
 800068a:	f000 ff89 	bl	80015a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0x138>)
 80006a6:	f000 ff7b 	bl	80015a0 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800
 80006bc:	48000400 	.word	0x48000400

080006c0 <_ZN3PinC1EP12GPIO_TypeDeft>:
  GPIO_TypeDef* port;
  uint16_t pin;
  bool valid;

  Pin() : port(nullptr), pin(0), valid(false) {}
  Pin(GPIO_TypeDef* p, uint16_t pn) : port(p), pin(pn), valid(true) {}
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	4613      	mov	r3, r2
 80006cc:	80fb      	strh	r3, [r7, #6]
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	68ba      	ldr	r2, [r7, #8]
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	88fa      	ldrh	r2, [r7, #6]
 80006d8:	809a      	strh	r2, [r3, #4]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2201      	movs	r2, #1
 80006de:	719a      	strb	r2, [r3, #6]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4618      	mov	r0, r3
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff fd69 	bl	80001d0 <strlen>
 80006fe:	4603      	mov	r3, r0
 8000700:	b29a      	uxth	r2, r3
 8000702:	f04f 33ff 	mov.w	r3, #4294967295
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <_Z5printPKc+0x2c>)
 800070a:	f003 fbe5 	bl	8003ed8 <HAL_UART_Transmit>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000254 	.word	0x20000254

08000720 <printf>:
int printf(const char* s, ...){
 8000720:	b40f      	push	{r0, r1, r2, r3}
 8000722:	b580      	push	{r7, lr}
 8000724:	b0c2      	sub	sp, #264	; 0x108
 8000726:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 8000728:	f507 728a 	add.w	r2, r7, #276	; 0x114
 800072c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000730:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000734:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 8000736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800073a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800073e:	f107 0008 	add.w	r0, r7, #8
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000748:	f004 fc26 	bl	8004f98 <vsiprintf>
	perror(buffer);
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	4618      	mov	r0, r3
 8000752:	f004 fa0b 	bl	8004b6c <perror>
	print(buffer);
 8000756:	f107 0308 	add.w	r3, r7, #8
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffc8 	bl	80006f0 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	4618      	mov	r0, r3
 8000766:	f7ff fd33 	bl	80001d0 <strlen>
 800076a:	4603      	mov	r3, r0
}
 800076c:	4618      	mov	r0, r3
 800076e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000772:	46bd      	mov	sp, r7
 8000774:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000778:	b004      	add	sp, #16
 800077a:	4770      	bx	lr

0800077c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000782:	f000 fd87 	bl	8001294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000786:	f000 f86f 	bl	8000868 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f7ff fefb 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800078e:	f000 fccd 	bl	800112c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000792:	f000 f8cf 	bl	8000934 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000796:	f000 f90b 	bl	80009b0 <MX_SPI2_Init>
  MX_SPI3_Init();
 800079a:	f000 f947 	bl	8000a2c <MX_SPI3_Init>
  MX_TIM1_Init();
 800079e:	f000 fb15 	bl	8000dcc <MX_TIM1_Init>
  MX_TIM2_Init();
 80007a2:	f000 fbbf 	bl	8000f24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  uint16_t encoderData_1 = 99;
 80007a6:	2363      	movs	r3, #99	; 0x63
 80007a8:	837b      	strh	r3, [r7, #26]
  uint16_t encoderData_2 = 99;
 80007aa:	2363      	movs	r3, #99	; 0x63
 80007ac:	833b      	strh	r3, [r7, #24]
  uint16_t encoderData_3 = 99;
 80007ae:	2363      	movs	r3, #99	; 0x63
 80007b0:	82fb      	strh	r3, [r7, #22]
  uint16_t encoder_max = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	82bb      	strh	r3, [r7, #20]
  uint16_t encoder_min = 4100;
 80007b6:	f241 0304 	movw	r3, #4100	; 0x1004
 80007ba:	827b      	strh	r3, [r7, #18]
  HAL_TIM_Base_Start(&htim1);
 80007bc:	4826      	ldr	r0, [pc, #152]	; (8000858 <main+0xdc>)
 80007be:	f002 fb53 	bl	8002e68 <HAL_TIM_Base_Start>


  Pin CYTRON_DIR_1(CYTRON_DIR_1_GPIO_Port, CYTRON_DIR_1_Pin);
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	2220      	movs	r2, #32
 80007c8:	4924      	ldr	r1, [pc, #144]	; (800085c <main+0xe0>)
 80007ca:	4618      	mov	r0, r3
 80007cc:	f7ff ff78 	bl	80006c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  Pin CYTRON_PWM_1(CYTRON_PWM_1_GPIO_Port, CYTRON_PWM_1_Pin);
 80007d0:	463b      	mov	r3, r7
 80007d2:	2208      	movs	r2, #8
 80007d4:	4921      	ldr	r1, [pc, #132]	; (800085c <main+0xe0>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ff72 	bl	80006c0 <_ZN3PinC1EP12GPIO_TypeDeft>
  int32_t  CH2_DC = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80007e0:	2104      	movs	r1, #4
 80007e2:	481f      	ldr	r0, [pc, #124]	; (8000860 <main+0xe4>)
 80007e4:	f002 fbee 	bl	8002fc4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 70);
 80007e8:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <main+0xe4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2246      	movs	r2, #70	; 0x46
 80007ee:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_Delay(10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fdcb 	bl	800138c <HAL_Delay>
	  // printf("encoder_min is %d\r\n", encoder_min);


    //PWM test
//     __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);
    while(CH2_DC < 65535)
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007fc:	4293      	cmp	r3, r2
 80007fe:	dc0e      	bgt.n	800081e <main+0xa2>
    {
        // TIM2->CCR2 = CH2_DC;
    	printf("current CH2_DC %d\r\n", CH2_DC);
 8000800:	69f9      	ldr	r1, [r7, #28]
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <main+0xe8>)
 8000804:	f7ff ff8c 	bl	8000720 <printf>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, CH2_DC); //this is the same as above
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <main+0xe4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	69fa      	ldr	r2, [r7, #28]
 800080e:	639a      	str	r2, [r3, #56]	; 0x38
        CH2_DC += 70;
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	3346      	adds	r3, #70	; 0x46
 8000814:	61fb      	str	r3, [r7, #28]
        HAL_Delay(10);
 8000816:	200a      	movs	r0, #10
 8000818:	f000 fdb8 	bl	800138c <HAL_Delay>
    while(CH2_DC < 65535)
 800081c:	e7eb      	b.n	80007f6 <main+0x7a>
    }
    while(CH2_DC > 0)
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	2b00      	cmp	r3, #0
 8000822:	dd0e      	ble.n	8000842 <main+0xc6>
    {
        // TIM2->CCR2 = CH2_DC;
    	printf("current CH2_DC %d\r\n", CH2_DC);
 8000824:	69f9      	ldr	r1, [r7, #28]
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <main+0xe8>)
 8000828:	f7ff ff7a 	bl	8000720 <printf>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, CH2_DC); //this is the same as above
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <main+0xe4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	639a      	str	r2, [r3, #56]	; 0x38
        CH2_DC -= 70;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	3b46      	subs	r3, #70	; 0x46
 8000838:	61fb      	str	r3, [r7, #28]
        HAL_Delay(10);
 800083a:	200a      	movs	r0, #10
 800083c:	f000 fda6 	bl	800138c <HAL_Delay>
    while(CH2_DC > 0)
 8000840:	e7ed      	b.n	800081e <main+0xa2>





	  HAL_Delay(10);
 8000842:	200a      	movs	r0, #10
 8000844:	f000 fda2 	bl	800138c <HAL_Delay>


	  //TIMER TEST
//	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
//	  HAL_Delay(1000);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800084e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000852:	f001 f81f 	bl	8001894 <HAL_GPIO_WritePin>
    while(CH2_DC < 65535)
 8000856:	e7ce      	b.n	80007f6 <main+0x7a>
 8000858:	200001bc 	.word	0x200001bc
 800085c:	48000400 	.word	0x48000400
 8000860:	20000208 	.word	0x20000208
 8000864:	08005b80 	.word	0x08005b80

08000868 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	; 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	; 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f003 fff6 	bl	8004868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088e:	f001 f827 	bl	80018e0 <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	bf14      	ite	ne
 8000898:	2301      	movne	r3, #1
 800089a:	2300      	moveq	r3, #0
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80008a2:	f000 f841 	bl	8000928 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2310      	movs	r3, #16
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b8:	2302      	movs	r3, #2
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008bc:	2301      	movs	r3, #1
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008c0:	230a      	movs	r3, #10
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008c4:	2307      	movs	r3, #7
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008c8:	2302      	movs	r3, #2
 80008ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f859 	bl	800198c <HAL_RCC_OscConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	bf14      	ite	ne
 80008e0:	2301      	movne	r3, #1
 80008e2:	2300      	moveq	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 80008ea:	f000 f81d 	bl	8000928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000902:	463b      	mov	r3, r7
 8000904:	2104      	movs	r1, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f001 fc54 	bl	80021b4 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	bf14      	ite	ne
 8000912:	2301      	movne	r3, #1
 8000914:	2300      	moveq	r3, #0
 8000916:	b2db      	uxtb	r3, r3
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 800091c:	f000 f804 	bl	8000928 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3758      	adds	r7, #88	; 0x58
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
}
 800092e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000930:	e7fe      	b.n	8000930 <Error_Handler+0x8>
	...

08000934 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_SPI1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_SPI1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000940:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000944:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_SPI1_Init+0x74>)
 800094e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000952:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_SPI1_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000962:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000966:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_SPI1_Init+0x74>)
 800096a:	2220      	movs	r2, #32
 800096c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_SPI1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000982:	2207      	movs	r2, #7
 8000984:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_SPI1_Init+0x74>)
 800098e:	2208      	movs	r2, #8
 8000990:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_SPI1_Init+0x74>)
 8000994:	f002 f96e 	bl	8002c74 <HAL_SPI_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f7ff ffc3 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	40013000 	.word	0x40013000

080009b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_SPI2_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d0:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009e6:	2220      	movs	r2, #32
 80009e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <MX_SPI2_Init+0x74>)
 80009fe:	2207      	movs	r2, #7
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <MX_SPI2_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <MX_SPI2_Init+0x74>)
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_SPI2_Init+0x74>)
 8000a10:	f002 f930 	bl	8002c74 <HAL_SPI_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a1a:	f7ff ff85 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200000f0 	.word	0x200000f0
 8000a28:	40003800 	.word	0x40003800

08000a2c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000a30:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a32:	4a1c      	ldr	r2, [pc, #112]	; (8000aa4 <MX_SPI3_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a44:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a4a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a52:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a62:	2220      	movs	r2, #32
 8000a64:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a66:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a7a:	2207      	movs	r2, #7
 8000a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a7e:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a86:	2208      	movs	r2, #8
 8000a88:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <MX_SPI3_Init+0x74>)
 8000a8c:	f002 f8f2 	bl	8002c74 <HAL_SPI_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000a96:	f7ff ff47 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000154 	.word	0x20000154
 8000aa4:	40003c00 	.word	0x40003c00

08000aa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a47      	ldr	r2, [pc, #284]	; (8000be4 <HAL_SPI_MspInit+0x13c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12a      	bne.n	8000b20 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aca:	4b47      	ldr	r3, [pc, #284]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ace:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000ad0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad6:	4b44      	ldr	r3, [pc, #272]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ade:	623b      	str	r3, [r7, #32]
 8000ae0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	4b41      	ldr	r3, [pc, #260]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	4a40      	ldr	r2, [pc, #256]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aee:	4b3e      	ldr	r3, [pc, #248]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000afa:	f641 0302 	movw	r3, #6146	; 0x1802
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b14:	4619      	mov	r1, r3
 8000b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1a:	f000 fd41 	bl	80015a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b1e:	e05c      	b.n	8000bda <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a31      	ldr	r2, [pc, #196]	; (8000bec <HAL_SPI_MspInit+0x144>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d129      	bne.n	8000b7e <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b2a:	4b2f      	ldr	r3, [pc, #188]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	4a2e      	ldr	r2, [pc, #184]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b34:	6593      	str	r3, [r2, #88]	; 0x58
 8000b36:	4b2c      	ldr	r3, [pc, #176]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4e:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b5a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	4619      	mov	r1, r3
 8000b76:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <HAL_SPI_MspInit+0x148>)
 8000b78:	f000 fd12 	bl	80015a0 <HAL_GPIO_Init>
}
 8000b7c:	e02d      	b.n	8000bda <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a1c      	ldr	r2, [pc, #112]	; (8000bf4 <HAL_SPI_MspInit+0x14c>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d128      	bne.n	8000bda <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b8c:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b92:	6593      	str	r3, [r2, #88]	; 0x58
 8000b94:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <HAL_SPI_MspInit+0x140>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f003 0304 	and.w	r3, r3, #4
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000bb8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <HAL_SPI_MspInit+0x150>)
 8000bd6:	f000 fce3 	bl	80015a0 <HAL_GPIO_Init>
}
 8000bda:	bf00      	nop
 8000bdc:	3738      	adds	r7, #56	; 0x38
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40013000 	.word	0x40013000
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40003800 	.word	0x40003800
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	40003c00 	.word	0x40003c00
 8000bf8:	48000800 	.word	0x48000800

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c32:	bf00      	nop
 8000c34:	370c      	adds	r7, #12
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	40021000 	.word	0x40021000

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <NMI_Handler+0x4>

08000c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <MemManage_Handler+0x4>

08000c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 fb5c 	bl	800134c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
 8000ca8:	e00a      	b.n	8000cc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000caa:	f3af 8000 	nop.w
 8000cae:	4601      	mov	r1, r0
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	60ba      	str	r2, [r7, #8]
 8000cb6:	b2ca      	uxtb	r2, r1
 8000cb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf0      	blt.n	8000caa <_read+0x12>
  }

  return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b086      	sub	sp, #24
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	60f8      	str	r0, [r7, #12]
 8000cda:	60b9      	str	r1, [r7, #8]
 8000cdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e009      	b.n	8000cf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf1      	blt.n	8000ce4 <_write+0x12>
  }
  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_close>:

int _close(int file)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b083      	sub	sp, #12
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr

08000d22 <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f003 fd52 	bl	8004814 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20010000 	.word	0x20010000
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200001b8 	.word	0x200001b8
 8000da4:	200002f0 	.word	0x200002f0

08000da8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <SystemInit+0x20>)
 8000dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db2:	4a05      	ldr	r2, [pc, #20]	; (8000dc8 <SystemInit+0x20>)
 8000db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b09a      	sub	sp, #104	; 0x68
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	222c      	movs	r2, #44	; 0x2c
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 fd2e 	bl	8004868 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e0c:	4b43      	ldr	r3, [pc, #268]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e0e:	4a44      	ldr	r2, [pc, #272]	; (8000f20 <MX_TIM1_Init+0x154>)
 8000e10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 8000e12:	4b42      	ldr	r3, [pc, #264]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e14:	224f      	movs	r2, #79	; 0x4f
 8000e16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b40      	ldr	r3, [pc, #256]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e1e:	4b3f      	ldr	r3, [pc, #252]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e2c:	4b3b      	ldr	r3, [pc, #236]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e32:	4b3a      	ldr	r3, [pc, #232]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e3a:	f001 ffbe 	bl	8002dba <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000e44:	f7ff fd70 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e52:	4619      	mov	r1, r3
 8000e54:	4831      	ldr	r0, [pc, #196]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e56:	f002 faa7 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000e60:	f7ff fd62 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e64:	482d      	ldr	r0, [pc, #180]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e66:	f002 f84b 	bl	8002f00 <HAL_TIM_PWM_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000e70:	f7ff fd5a 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e84:	4619      	mov	r1, r3
 8000e86:	4825      	ldr	r0, [pc, #148]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000e88:	f002 fefa 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000e92:	f7ff fd49 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e96:	2360      	movs	r3, #96	; 0x60
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000eb6:	2204      	movs	r2, #4
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4818      	ldr	r0, [pc, #96]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000ebc:	f002 f960 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000ec6:	f7ff fd2f 	bl	8000928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ee2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	4619      	mov	r1, r3
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000f00:	f002 ff24 	bl	8003d4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f0a:	f7ff fd0d 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <MX_TIM1_Init+0x150>)
 8000f10:	f000 f8b0 	bl	8001074 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3768      	adds	r7, #104	; 0x68
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200001bc 	.word	0x200001bc
 8000f20:	40012c00 	.word	0x40012c00

08000f24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 031c 	add.w	r3, r7, #28
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f56:	4b2d      	ldr	r3, [pc, #180]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f60:	224f      	movs	r2, #79	; 0x4f
 8000f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f64:	4b29      	ldr	r3, [pc, #164]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f6c:	2263      	movs	r2, #99	; 0x63
 8000f6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f76:	4b25      	ldr	r3, [pc, #148]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f78:	2280      	movs	r2, #128	; 0x80
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f7c:	4823      	ldr	r0, [pc, #140]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f7e:	f001 ff1c 	bl	8002dba <HAL_TIM_Base_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f88:	f7ff fcce 	bl	8000928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f96:	4619      	mov	r1, r3
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <MX_TIM2_Init+0xe8>)
 8000f9a:	f002 fa05 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000fa4:	f7ff fcc0 	bl	8000928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fa8:	4818      	ldr	r0, [pc, #96]	; (800100c <MX_TIM2_Init+0xe8>)
 8000faa:	f001 ffa9 	bl	8002f00 <HAL_TIM_PWM_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000fb4:	f7ff fcb8 	bl	8000928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fc0:	f107 031c 	add.w	r3, r7, #28
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4811      	ldr	r0, [pc, #68]	; (800100c <MX_TIM2_Init+0xe8>)
 8000fc8:	f002 fe5a 	bl	8003c80 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000fd2:	f7ff fca9 	bl	8000928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd6:	2360      	movs	r3, #96	; 0x60
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2204      	movs	r2, #4
 8000fea:	4619      	mov	r1, r3
 8000fec:	4807      	ldr	r0, [pc, #28]	; (800100c <MX_TIM2_Init+0xe8>)
 8000fee:	f002 f8c7 	bl	8003180 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ff8:	f7ff fc96 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ffc:	4803      	ldr	r0, [pc, #12]	; (800100c <MX_TIM2_Init+0xe8>)
 8000ffe:	f000 f839 	bl	8001074 <HAL_TIM_MspPostInit>

}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000208 	.word	0x20000208

08001010 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a13      	ldr	r2, [pc, #76]	; (800106c <HAL_TIM_Base_MspInit+0x5c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d10c      	bne.n	800103c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_TIM_Base_MspInit+0x60>)
 8001024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_TIM_Base_MspInit+0x60>)
 8001028:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800102c:	6613      	str	r3, [r2, #96]	; 0x60
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_TIM_Base_MspInit+0x60>)
 8001030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800103a:	e010      	b.n	800105e <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001044:	d10b      	bne.n	800105e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001046:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <HAL_TIM_Base_MspInit+0x60>)
 8001048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104a:	4a09      	ldr	r2, [pc, #36]	; (8001070 <HAL_TIM_Base_MspInit+0x60>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6593      	str	r3, [r2, #88]	; 0x58
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <HAL_TIM_Base_MspInit+0x60>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
}
 800105e:	bf00      	nop
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40012c00 	.word	0x40012c00
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <HAL_TIM_MspPostInit+0xac>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d11e      	bne.n	80010d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a22      	ldr	r2, [pc, #136]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010c0:	2301      	movs	r3, #1
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f000 fa67 	bl	80015a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010d2:	e020      	b.n	8001116 <HAL_TIM_MspPostInit+0xa2>
  else if(timHandle->Instance==TIM2)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010dc:	d11b      	bne.n	8001116 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_TIM_MspPostInit+0xb0>)
 80010ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 80010f6:	2308      	movs	r3, #8
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001106:	2301      	movs	r3, #1
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <HAL_TIM_MspPostInit+0xb4>)
 8001112:	f000 fa45 	bl	80015a0 <HAL_GPIO_Init>
}
 8001116:	bf00      	nop
 8001118:	3728      	adds	r7, #40	; 0x28
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40012c00 	.word	0x40012c00
 8001124:	40021000 	.word	0x40021000
 8001128:	48000400 	.word	0x48000400

0800112c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_USART2_UART_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_USART2_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_USART2_UART_Init+0x58>)
 8001170:	f002 fe64 	bl	8003e3c <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800117a:	f7ff fbd5 	bl	8000928 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000254 	.word	0x20000254
 8001188:	40004400 	.word	0x40004400

0800118c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b0a2      	sub	sp, #136	; 0x88
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001194:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	605a      	str	r2, [r3, #4]
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	60da      	str	r2, [r3, #12]
 80011a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2260      	movs	r2, #96	; 0x60
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fb5b 	bl	8004868 <memset>
  if(uartHandle->Instance==USART2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a20      	ldr	r2, [pc, #128]	; (8001238 <HAL_UART_MspInit+0xac>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d138      	bne.n	800122e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011bc:	2302      	movs	r3, #2
 80011be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4618      	mov	r0, r3
 80011ca:	f001 fa17 	bl	80025fc <HAL_RCCEx_PeriphCLKConfig>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011d4:	f7ff fba8 	bl	8000928 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_UART_MspInit+0xb0>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_UART_MspInit+0xb0>)
 80011de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e2:	6593      	str	r3, [r2, #88]	; 0x58
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_UART_MspInit+0xb0>)
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_UART_MspInit+0xb0>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	4a11      	ldr	r2, [pc, #68]	; (800123c <HAL_UART_MspInit+0xb0>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_UART_MspInit+0xb0>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001208:	230c      	movs	r3, #12
 800120a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001214:	2303      	movs	r3, #3
 8001216:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800121a:	2307      	movs	r3, #7
 800121c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001224:	4619      	mov	r1, r3
 8001226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800122a:	f000 f9b9 	bl	80015a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3788      	adds	r7, #136	; 0x88
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40004400 	.word	0x40004400
 800123c:	40021000 	.word	0x40021000

08001240 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001278 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001244:	f7ff fdb0 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001248:	480c      	ldr	r0, [pc, #48]	; (800127c <LoopForever+0x6>)
  ldr r1, =_edata
 800124a:	490d      	ldr	r1, [pc, #52]	; (8001280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <LoopForever+0xe>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001260:	4c0a      	ldr	r4, [pc, #40]	; (800128c <LoopForever+0x16>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126e:	f003 fad7 	bl	8004820 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001272:	f7ff fa83 	bl	800077c <main>

08001276 <LoopForever>:

LoopForever:
    b LoopForever
 8001276:	e7fe      	b.n	8001276 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001278:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800127c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001280:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001284:	08006320 	.word	0x08006320
  ldr r2, =_sbss
 8001288:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800128c:	200002ec 	.word	0x200002ec

08001290 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001290:	e7fe      	b.n	8001290 <ADC1_IRQHandler>
	...

08001294 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_Init+0x3c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_Init+0x3c>)
 80012a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012aa:	2003      	movs	r0, #3
 80012ac:	f000 f944 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b0:	2000      	movs	r0, #0
 80012b2:	f000 f80f 	bl	80012d4 <HAL_InitTick>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	e001      	b.n	80012c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c2:	f7ff fc9b 	bl	8000bfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40022000 	.word	0x40022000

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	2300      	movs	r3, #0
 80012de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <HAL_InitTick+0x6c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d023      	beq.n	8001330 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_InitTick+0x70>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b14      	ldr	r3, [pc, #80]	; (8001340 <HAL_InitTick+0x6c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f941 	bl	8001586 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d809      	bhi.n	8001324 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295
 8001318:	f000 f919 	bl	800154e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <HAL_InitTick+0x74>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e007      	b.n	8001334 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	73fb      	strb	r3, [r7, #15]
 8001328:	e004      	b.n	8001334 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e001      	b.n	8001334 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001334:	7bfb      	ldrb	r3, [r7, #15]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008
 8001344:	20000000 	.word	0x20000000
 8001348:	20000004 	.word	0x20000004

0800134c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_IncTick+0x20>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	461a      	mov	r2, r3
 8001356:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x24>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4413      	add	r3, r2
 800135c:	4a04      	ldr	r2, [pc, #16]	; (8001370 <HAL_IncTick+0x24>)
 800135e:	6013      	str	r3, [r2, #0]
}
 8001360:	bf00      	nop
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000008 	.word	0x20000008
 8001370:	200002d8 	.word	0x200002d8

08001374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return uwTick;
 8001378:	4b03      	ldr	r3, [pc, #12]	; (8001388 <HAL_GetTick+0x14>)
 800137a:	681b      	ldr	r3, [r3, #0]
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	200002d8 	.word	0x200002d8

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff ffee 	bl	8001374 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffde 	bl	8001374 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000008 	.word	0x20000008

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	; (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	; (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	; 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	; 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff47 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001560:	f7ff ff5c 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	68b9      	ldr	r1, [r7, #8]
 800156a:	6978      	ldr	r0, [r7, #20]
 800156c:	f7ff ff8e 	bl	800148c <NVIC_EncodePriority>
 8001570:	4602      	mov	r2, r0
 8001572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff5d 	bl	8001438 <__NVIC_SetPriority>
}
 800157e:	bf00      	nop
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffb0 	bl	80014f4 <SysTick_Config>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b087      	sub	sp, #28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	e154      	b.n	800185a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	fa01 f303 	lsl.w	r3, r1, r3
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8146 	beq.w	8001854 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d005      	beq.n	80015e0 <HAL_GPIO_Init+0x40>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	f003 0201 	and.w	r2, r3, #1
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	2b03      	cmp	r3, #3
 800164c:	d017      	beq.n	800167e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43db      	mvns	r3, r3
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d123      	bne.n	80016d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	6939      	ldr	r1, [r7, #16]
 80016ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0203 	and.w	r2, r3, #3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80a0 	beq.w	8001854 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <HAL_GPIO_Init+0x2d8>)
 8001716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001718:	4a57      	ldr	r2, [pc, #348]	; (8001878 <HAL_GPIO_Init+0x2d8>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6613      	str	r3, [r2, #96]	; 0x60
 8001720:	4b55      	ldr	r3, [pc, #340]	; (8001878 <HAL_GPIO_Init+0x2d8>)
 8001722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800172c:	4a53      	ldr	r2, [pc, #332]	; (800187c <HAL_GPIO_Init+0x2dc>)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	4013      	ands	r3, r2
 800174e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001756:	d019      	beq.n	800178c <HAL_GPIO_Init+0x1ec>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a49      	ldr	r2, [pc, #292]	; (8001880 <HAL_GPIO_Init+0x2e0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d013      	beq.n	8001788 <HAL_GPIO_Init+0x1e8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a48      	ldr	r2, [pc, #288]	; (8001884 <HAL_GPIO_Init+0x2e4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00d      	beq.n	8001784 <HAL_GPIO_Init+0x1e4>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a47      	ldr	r2, [pc, #284]	; (8001888 <HAL_GPIO_Init+0x2e8>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d007      	beq.n	8001780 <HAL_GPIO_Init+0x1e0>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a46      	ldr	r2, [pc, #280]	; (800188c <HAL_GPIO_Init+0x2ec>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d101      	bne.n	800177c <HAL_GPIO_Init+0x1dc>
 8001778:	2304      	movs	r3, #4
 800177a:	e008      	b.n	800178e <HAL_GPIO_Init+0x1ee>
 800177c:	2307      	movs	r3, #7
 800177e:	e006      	b.n	800178e <HAL_GPIO_Init+0x1ee>
 8001780:	2303      	movs	r3, #3
 8001782:	e004      	b.n	800178e <HAL_GPIO_Init+0x1ee>
 8001784:	2302      	movs	r3, #2
 8001786:	e002      	b.n	800178e <HAL_GPIO_Init+0x1ee>
 8001788:	2301      	movs	r3, #1
 800178a:	e000      	b.n	800178e <HAL_GPIO_Init+0x1ee>
 800178c:	2300      	movs	r3, #0
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	f002 0203 	and.w	r2, r2, #3
 8001794:	0092      	lsls	r2, r2, #2
 8001796:	4093      	lsls	r3, r2
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800179e:	4937      	ldr	r1, [pc, #220]	; (800187c <HAL_GPIO_Init+0x2dc>)
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	089b      	lsrs	r3, r3, #2
 80017a4:	3302      	adds	r3, #2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d0:	4a2f      	ldr	r2, [pc, #188]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017d6:	4b2e      	ldr	r3, [pc, #184]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017fa:	4a25      	ldr	r2, [pc, #148]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001800:	4b23      	ldr	r3, [pc, #140]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4313      	orrs	r3, r2
 8001822:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001824:	4a1a      	ldr	r2, [pc, #104]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4313      	orrs	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800184e:	4a10      	ldr	r2, [pc, #64]	; (8001890 <HAL_GPIO_Init+0x2f0>)
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	3301      	adds	r3, #1
 8001858:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa22 f303 	lsr.w	r3, r2, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	f47f aea3 	bne.w	80015b0 <HAL_GPIO_Init+0x10>
  }
}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	371c      	adds	r7, #28
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40021000 	.word	0x40021000
 800187c:	40010000 	.word	0x40010000
 8001880:	48000400 	.word	0x48000400
 8001884:	48000800 	.word	0x48000800
 8001888:	48000c00 	.word	0x48000c00
 800188c:	48001000 	.word	0x48001000
 8001890:	40010400 	.word	0x40010400

08001894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	807b      	strh	r3, [r7, #2]
 80018a0:	4613      	mov	r3, r2
 80018a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a4:	787b      	ldrb	r3, [r7, #1]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018aa:	887a      	ldrh	r2, [r7, #2]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018b2:	887a      	ldrh	r2, [r7, #2]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <HAL_PWREx_GetVoltageRange+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40007000 	.word	0x40007000

080018e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018ee:	d130      	bne.n	8001952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fc:	d038      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fe:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001906:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2232      	movs	r2, #50	; 0x32
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	4a1b      	ldr	r2, [pc, #108]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	3301      	adds	r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001924:	e002      	b.n	800192c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	3b01      	subs	r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800192e:	695b      	ldr	r3, [r3, #20]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001938:	d102      	bne.n	8001940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d1f2      	bne.n	8001926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194c:	d110      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e00f      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800195a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800195e:	d007      	beq.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001960:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800196e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f000 bc02 	b.w	80021a4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a0:	4b96      	ldr	r3, [pc, #600]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019aa:	4b94      	ldr	r3, [pc, #592]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80e4 	beq.w	8001b8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4c>
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	f040 808b 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	f040 8087 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d8:	4b88      	ldr	r3, [pc, #544]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x64>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e3d9      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_RCC_OscConfig+0x7e>
 8001a00:	4b7e      	ldr	r3, [pc, #504]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a08:	e005      	b.n	8001a16 <HAL_RCC_OscConfig+0x8a>
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d223      	bcs.n	8001a62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fd8c 	bl	800253c <RCC_SetFlashLatencyFromMSIRange>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e3ba      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b70      	ldr	r3, [pc, #448]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	496d      	ldr	r1, [pc, #436]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4c:	4b6b      	ldr	r3, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	4968      	ldr	r1, [pc, #416]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e025      	b.n	8001aae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a62:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a65      	ldr	r2, [pc, #404]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4960      	ldr	r1, [pc, #384]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a80:	4b5e      	ldr	r3, [pc, #376]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	495b      	ldr	r1, [pc, #364]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fd4c 	bl	800253c <RCC_SetFlashLatencyFromMSIRange>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e37a      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aae:	f000 fc81 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4950      	ldr	r1, [pc, #320]	; (8001c00 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	5ccb      	ldrb	r3, [r1, r3]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aca:	4a4e      	ldr	r2, [pc, #312]	; (8001c04 <HAL_RCC_OscConfig+0x278>)
 8001acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ace:	4b4e      	ldr	r3, [pc, #312]	; (8001c08 <HAL_RCC_OscConfig+0x27c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fbfe 	bl	80012d4 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d052      	beq.n	8001b88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	e35e      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d032      	beq.n	8001b54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aee:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fc3b 	bl	8001374 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b02:	f7ff fc37 	bl	8001374 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e347      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b20:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a35      	ldr	r2, [pc, #212]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	4930      	ldr	r1, [pc, #192]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	492b      	ldr	r1, [pc, #172]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
 8001b52:	e01a      	b.n	8001b8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b54:	4b29      	ldr	r3, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a28      	ldr	r2, [pc, #160]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fc08 	bl	8001374 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b68:	f7ff fc04 	bl	8001374 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e314      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b7a:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1dc>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d073      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x21c>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d063      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d15f      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e2f1      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc8:	d106      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
 8001bca:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a0b      	ldr	r2, [pc, #44]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e025      	b.n	8001c24 <HAL_RCC_OscConfig+0x298>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d114      	bne.n	8001c0c <HAL_RCC_OscConfig+0x280>
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a05      	ldr	r2, [pc, #20]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b03      	ldr	r3, [pc, #12]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a02      	ldr	r2, [pc, #8]	; (8001bfc <HAL_RCC_OscConfig+0x270>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e013      	b.n	8001c24 <HAL_RCC_OscConfig+0x298>
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	08005b94 	.word	0x08005b94
 8001c04:	20000000 	.word	0x20000000
 8001c08:	20000004 	.word	0x20000004
 8001c0c:	4ba0      	ldr	r3, [pc, #640]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a9f      	ldr	r2, [pc, #636]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b9d      	ldr	r3, [pc, #628]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a9c      	ldr	r2, [pc, #624]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fba2 	bl	8001374 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fb9e 	bl	8001374 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e2ae      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4b92      	ldr	r3, [pc, #584]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fb8e 	bl	8001374 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fb8a 	bl	8001374 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e29a      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4b88      	ldr	r3, [pc, #544]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2d0>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x310>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b7c      	ldr	r3, [pc, #496]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x328>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e277      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4973      	ldr	r1, [pc, #460]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	e040      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a6e      	ldr	r2, [pc, #440]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fb49 	bl	8001374 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fb45 	bl	8001374 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e255      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b65      	ldr	r3, [pc, #404]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b62      	ldr	r3, [pc, #392]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	495f      	ldr	r1, [pc, #380]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e018      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a5c      	ldr	r2, [pc, #368]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff fb25 	bl	8001374 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fb21 	bl	8001374 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e231      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d40:	4b53      	ldr	r3, [pc, #332]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d60:	4b4b      	ldr	r3, [pc, #300]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	4a4a      	ldr	r2, [pc, #296]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fb00 	bl	8001374 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fafc 	bl	8001374 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e20c      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8a:	4b41      	ldr	r3, [pc, #260]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ef      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	4b3d      	ldr	r3, [pc, #244]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	4a3b      	ldr	r2, [pc, #236]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff fae3 	bl	8001374 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fadf 	bl	8001374 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e1ef      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b21      	ldr	r3, [pc, #132]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e18:	4b1e      	ldr	r3, [pc, #120]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a1d      	ldr	r2, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7ff faa6 	bl	8001374 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff faa2 	bl	8001374 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1b2      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_RCC_OscConfig+0x508>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4d8>
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	4a0d      	ldr	r2, [pc, #52]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e62:	e029      	b.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d115      	bne.n	8001e98 <HAL_RCC_OscConfig+0x50c>
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a07      	ldr	r2, [pc, #28]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7c:	4b04      	ldr	r3, [pc, #16]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a03      	ldr	r2, [pc, #12]	; (8001e90 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e014      	b.n	8001eb8 <HAL_RCC_OscConfig+0x52c>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	40007000 	.word	0x40007000
 8001e98:	4b9a      	ldr	r3, [pc, #616]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a99      	ldr	r2, [pc, #612]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001ea0:	f023 0301 	bic.w	r3, r3, #1
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea8:	4b96      	ldr	r3, [pc, #600]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eae:	4a95      	ldr	r2, [pc, #596]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001eb0:	f023 0304 	bic.w	r3, r3, #4
 8001eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d016      	beq.n	8001eee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	f7ff fa58 	bl	8001374 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fa54 	bl	8001374 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e162      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ede:	4b89      	ldr	r3, [pc, #548]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ed      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x53c>
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff fa41 	bl	8001374 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff fa3d 	bl	8001374 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e14b      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4b7d      	ldr	r3, [pc, #500]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1ed      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4a77      	ldr	r2, [pc, #476]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f40:	4b70      	ldr	r3, [pc, #448]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f46:	4a6f      	ldr	r2, [pc, #444]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fa10 	bl	8001374 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f58:	f7ff fa0c 	bl	8001374 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e11c      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f6a:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCC_OscConfig+0x5cc>
 8001f78:	e01b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f7a:	4b62      	ldr	r3, [pc, #392]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f80:	4a60      	ldr	r2, [pc, #384]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff f9f3 	bl	8001374 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f92:	f7ff f9ef 	bl	8001374 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0ff      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa4:	4b57      	ldr	r3, [pc, #348]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ef      	bne.n	8001f92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80f3 	beq.w	80021a2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	f040 80c9 	bne.w	8002158 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d12c      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d123      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d11b      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d113      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d109      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d06b      	beq.n	800210c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d062      	beq.n	8002100 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800203a:	4b32      	ldr	r3, [pc, #200]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0ac      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800204a:	4b2e      	ldr	r3, [pc, #184]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2d      	ldr	r2, [pc, #180]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8002050:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002054:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002056:	f7ff f98d 	bl	8001374 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205e:	f7ff f989 	bl	8001374 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e099      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002070:	4b24      	ldr	r3, [pc, #144]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCC_OscConfig+0x77c>)
 8002082:	4013      	ands	r3, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800208c:	3a01      	subs	r2, #1
 800208e:	0112      	lsls	r2, r2, #4
 8002090:	4311      	orrs	r1, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002096:	0212      	lsls	r2, r2, #8
 8002098:	4311      	orrs	r1, r2
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800209e:	0852      	lsrs	r2, r2, #1
 80020a0:	3a01      	subs	r2, #1
 80020a2:	0552      	lsls	r2, r2, #21
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020aa:	0852      	lsrs	r2, r2, #1
 80020ac:	3a01      	subs	r2, #1
 80020ae:	0652      	lsls	r2, r2, #25
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b6:	06d2      	lsls	r2, r2, #27
 80020b8:	430a      	orrs	r2, r1
 80020ba:	4912      	ldr	r1, [pc, #72]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020c0:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 80020c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020cc:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4a0c      	ldr	r2, [pc, #48]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020d8:	f7ff f94c 	bl	8001374 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f948 	bl	8001374 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e058      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <HAL_RCC_OscConfig+0x778>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020fe:	e050      	b.n	80021a2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e04f      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
 8002104:	40021000 	.word	0x40021000
 8002108:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d144      	bne.n	80021a2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a23      	ldr	r2, [pc, #140]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 800211e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002122:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002124:	4b21      	ldr	r3, [pc, #132]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4a20      	ldr	r2, [pc, #128]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 800212a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002130:	f7ff f920 	bl	8001374 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff f91c 	bl	8001374 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e02c      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x7ac>
 8002156:	e024      	b.n	80021a2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b0c      	cmp	r3, #12
 800215c:	d01f      	beq.n	800219e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b13      	ldr	r3, [pc, #76]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a12      	ldr	r2, [pc, #72]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 8002164:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216a:	f7ff f903 	bl	8001374 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff f8ff 	bl	8001374 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e00f      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	4905      	ldr	r1, [pc, #20]	; (80021ac <HAL_RCC_OscConfig+0x820>)
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002198:	4013      	ands	r3, r2
 800219a:	60cb      	str	r3, [r1, #12]
 800219c:	e001      	b.n	80021a2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	feeefffc 	.word	0xfeeefffc

080021b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0e7      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021c8:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d910      	bls.n	80021f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	4970      	ldr	r1, [pc, #448]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0cf      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d010      	beq.n	8002226 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002210:	429a      	cmp	r2, r3
 8002212:	d908      	bls.n	8002226 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4960      	ldr	r1, [pc, #384]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d04c      	beq.n	80022cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223a:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d121      	bne.n	800228a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e0a6      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b02      	cmp	r3, #2
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002252:	4b54      	ldr	r3, [pc, #336]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d115      	bne.n	800228a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e09a      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800226a:	4b4e      	ldr	r3, [pc, #312]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e08e      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227a:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e086      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800228a:	4b46      	ldr	r3, [pc, #280]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f023 0203 	bic.w	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	4943      	ldr	r1, [pc, #268]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	4313      	orrs	r3, r2
 800229a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800229c:	f7ff f86a 	bl	8001374 <HAL_GetTick>
 80022a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a4:	f7ff f866 	bl	8001374 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e06e      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ba:	4b3a      	ldr	r3, [pc, #232]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 020c 	and.w	r2, r3, #12
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d1eb      	bne.n	80022a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d010      	beq.n	80022fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	4b31      	ldr	r3, [pc, #196]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d208      	bcs.n	80022fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	492b      	ldr	r1, [pc, #172]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022fa:	4b29      	ldr	r3, [pc, #164]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	429a      	cmp	r2, r3
 8002306:	d210      	bcs.n	800232a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f023 0207 	bic.w	r2, r3, #7
 8002310:	4923      	ldr	r1, [pc, #140]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCC_ClockConfig+0x1ec>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d001      	beq.n	800232a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e036      	b.n	8002398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d008      	beq.n	8002348 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002336:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	4918      	ldr	r1, [pc, #96]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b00      	cmp	r3, #0
 8002352:	d009      	beq.n	8002368 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4910      	ldr	r1, [pc, #64]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	4313      	orrs	r3, r2
 8002366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002368:	f000 f824 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	490b      	ldr	r1, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1f4>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1f8>)
 8002386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1fc>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7fe ffa1 	bl	80012d4 <HAL_InitTick>
 8002392:	4603      	mov	r3, r0
 8002394:	72fb      	strb	r3, [r7, #11]

  return status;
 8002396:	7afb      	ldrb	r3, [r7, #11]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	08005b94 	.word	0x08005b94
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b089      	sub	sp, #36	; 0x24
 80023b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
 80023be:	2300      	movs	r3, #0
 80023c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023cc:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x34>
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	2b0c      	cmp	r3, #12
 80023e0:	d121      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d11e      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0308 	and.w	r3, r3, #8
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e005      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002410:	4a2b      	ldr	r2, [pc, #172]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10d      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002424:	e00a      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d102      	bne.n	8002432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	e004      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b08      	cmp	r3, #8
 8002436:	d101      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800243a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d134      	bne.n	80024ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d003      	beq.n	800245a <HAL_RCC_GetSysClockFreq+0xa6>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b03      	cmp	r3, #3
 8002456:	d003      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0xac>
 8002458:	e005      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800245a:	4b1a      	ldr	r3, [pc, #104]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800245c:	617b      	str	r3, [r7, #20]
      break;
 800245e:	e005      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002460:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002462:	617b      	str	r3, [r7, #20]
      break;
 8002464:	e002      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	617b      	str	r3, [r7, #20]
      break;
 800246a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	3301      	adds	r3, #1
 8002478:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800247a:	4b10      	ldr	r3, [pc, #64]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	0a1b      	lsrs	r3, r3, #8
 8002480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	fb03 f202 	mul.w	r2, r3, r2
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	0e5b      	lsrs	r3, r3, #25
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	3301      	adds	r3, #1
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024ac:	69bb      	ldr	r3, [r7, #24]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	08005bac 	.word	0x08005bac
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08005ba4 	.word	0x08005ba4

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002514:	f7ff ffda 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002518:	4602      	mov	r2, r0
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	0adb      	lsrs	r3, r3, #11
 8002520:	f003 0307 	and.w	r3, r3, #7
 8002524:	4904      	ldr	r1, [pc, #16]	; (8002538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002526:	5ccb      	ldrb	r3, [r1, r3]
 8002528:	f003 031f 	and.w	r3, r3, #31
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002530:	4618      	mov	r0, r3
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40021000 	.word	0x40021000
 8002538:	08005ba4 	.word	0x08005ba4

0800253c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002548:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002554:	f7ff f9b6 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 8002558:	6178      	str	r0, [r7, #20]
 800255a:	e014      	b.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002566:	6593      	str	r3, [r2, #88]	; 0x58
 8002568:	4b22      	ldr	r3, [pc, #136]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800256a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002574:	f7ff f9a6 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
 8002578:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800257a:	4b1e      	ldr	r3, [pc, #120]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800257c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257e:	4a1d      	ldr	r2, [pc, #116]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002584:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800258c:	d10b      	bne.n	80025a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d919      	bls.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2ba0      	cmp	r3, #160	; 0xa0
 8002598:	d902      	bls.n	80025a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800259a:	2302      	movs	r3, #2
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	e013      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e010      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b80      	cmp	r3, #128	; 0x80
 80025aa:	d902      	bls.n	80025b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025ac:	2303      	movs	r3, #3
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	e00a      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b80      	cmp	r3, #128	; 0x80
 80025b6:	d102      	bne.n	80025be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025b8:	2302      	movs	r3, #2
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e004      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b70      	cmp	r3, #112	; 0x70
 80025c2:	d101      	bne.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c4:	2301      	movs	r3, #1
 80025c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f023 0207 	bic.w	r2, r3, #7
 80025d0:	4909      	ldr	r1, [pc, #36]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40022000 	.word	0x40022000

080025fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002604:	2300      	movs	r3, #0
 8002606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002608:	2300      	movs	r3, #0
 800260a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002614:	2b00      	cmp	r3, #0
 8002616:	d031      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002620:	d01a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002622:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002626:	d814      	bhi.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002628:	2b00      	cmp	r3, #0
 800262a:	d009      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800262c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002630:	d10f      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002632:	4b5d      	ldr	r3, [pc, #372]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4a5c      	ldr	r2, [pc, #368]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800263e:	e00c      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	3304      	adds	r3, #4
 8002644:	2100      	movs	r1, #0
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fa22 	bl	8002a90 <RCCEx_PLLSAI1_Config>
 800264c:	4603      	mov	r3, r0
 800264e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002650:	e003      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	74fb      	strb	r3, [r7, #19]
      break;
 8002656:	e000      	b.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265a:	7cfb      	ldrb	r3, [r7, #19]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002660:	4b51      	ldr	r3, [pc, #324]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266e:	494e      	ldr	r1, [pc, #312]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002676:	e001      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 809e 	beq.w	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268a:	2300      	movs	r3, #0
 800268c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800268e:	4b46      	ldr	r3, [pc, #280]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800269e:	2300      	movs	r3, #0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00d      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a8:	4a3f      	ldr	r2, [pc, #252]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6593      	str	r3, [r2, #88]	; 0x58
 80026b0:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026c0:	4b3a      	ldr	r3, [pc, #232]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a39      	ldr	r2, [pc, #228]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026cc:	f7fe fe52 	bl	8001374 <HAL_GetTick>
 80026d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026d2:	e009      	b.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fe4e 	bl	8001374 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d902      	bls.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	74fb      	strb	r3, [r7, #19]
        break;
 80026e6:	e005      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0ef      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80026f4:	7cfb      	ldrb	r3, [r7, #19]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d15a      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002704:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d01e      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	429a      	cmp	r2, r3
 8002714:	d019      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	4a1f      	ldr	r2, [pc, #124]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800273a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800273e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002742:	4a19      	ldr	r2, [pc, #100]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d016      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002754:	f7fe fe0e 	bl	8001374 <HAL_GetTick>
 8002758:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800275a:	e00b      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fe0a 	bl	8001374 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d902      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	74fb      	strb	r3, [r7, #19]
            break;
 8002772:	e006      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0ec      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10b      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002788:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002796:	4904      	ldr	r1, [pc, #16]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800279e:	e009      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	74bb      	strb	r3, [r7, #18]
 80027a4:	e006      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	7cfb      	ldrb	r3, [r7, #19]
 80027b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027b4:	7c7b      	ldrb	r3, [r7, #17]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ba:	4b8d      	ldr	r3, [pc, #564]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027be:	4a8c      	ldr	r2, [pc, #560]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027d2:	4b87      	ldr	r3, [pc, #540]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d8:	f023 0203 	bic.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	4983      	ldr	r1, [pc, #524]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027f4:	4b7e      	ldr	r3, [pc, #504]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 020c 	bic.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	497b      	ldr	r1, [pc, #492]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0304 	and.w	r3, r3, #4
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00a      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002816:	4b76      	ldr	r3, [pc, #472]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	4972      	ldr	r1, [pc, #456]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0320 	and.w	r3, r3, #32
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00a      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002838:	4b6d      	ldr	r3, [pc, #436]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002846:	496a      	ldr	r1, [pc, #424]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002856:	2b00      	cmp	r3, #0
 8002858:	d00a      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	4961      	ldr	r1, [pc, #388]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00a      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800287c:	4b5c      	ldr	r3, [pc, #368]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800287e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	4959      	ldr	r1, [pc, #356]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800288c:	4313      	orrs	r3, r2
 800288e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800289e:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	4950      	ldr	r1, [pc, #320]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00a      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028c0:	4b4b      	ldr	r3, [pc, #300]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	4948      	ldr	r1, [pc, #288]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028e2:	4b43      	ldr	r3, [pc, #268]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	493f      	ldr	r1, [pc, #252]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d028      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002904:	4b3a      	ldr	r3, [pc, #232]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002912:	4937      	ldr	r1, [pc, #220]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002922:	d106      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4a31      	ldr	r2, [pc, #196]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800292a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800292e:	60d3      	str	r3, [r2, #12]
 8002930:	e011      	b.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800293a:	d10c      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3304      	adds	r3, #4
 8002940:	2101      	movs	r1, #1
 8002942:	4618      	mov	r0, r3
 8002944:	f000 f8a4 	bl	8002a90 <RCCEx_PLLSAI1_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002952:	7cfb      	ldrb	r3, [r7, #19]
 8002954:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d028      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002962:	4b23      	ldr	r3, [pc, #140]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002970:	491f      	ldr	r1, [pc, #124]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002980:	d106      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002982:	4b1b      	ldr	r3, [pc, #108]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a1a      	ldr	r2, [pc, #104]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298c:	60d3      	str	r3, [r2, #12]
 800298e:	e011      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3304      	adds	r3, #4
 800299e:	2101      	movs	r1, #1
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 f875 	bl	8002a90 <RCCEx_PLLSAI1_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029aa:	7cfb      	ldrb	r3, [r7, #19]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d02b      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029c0:	4b0b      	ldr	r3, [pc, #44]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029ce:	4908      	ldr	r1, [pc, #32]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029de:	d109      	bne.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e0:	4b03      	ldr	r3, [pc, #12]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4a02      	ldr	r2, [pc, #8]	; (80029f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ea:	60d3      	str	r3, [r2, #12]
 80029ec:	e014      	b.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80029ee:	bf00      	nop
 80029f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029fc:	d10c      	bne.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2101      	movs	r1, #1
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f843 	bl	8002a90 <RCCEx_PLLSAI1_Config>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01c      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a24:	4b19      	ldr	r3, [pc, #100]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a32:	4916      	ldr	r1, [pc, #88]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a42:	d10c      	bne.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	2102      	movs	r1, #2
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 f820 	bl	8002a90 <RCCEx_PLLSAI1_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a54:	7cfb      	ldrb	r3, [r7, #19]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a80:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40021000 	.word	0x40021000

08002a90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a9e:	4b74      	ldr	r3, [pc, #464]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d018      	beq.n	8002adc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002aaa:	4b71      	ldr	r3, [pc, #452]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0203 	and.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d10d      	bne.n	8002ad6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
       ||
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d009      	beq.n	8002ad6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ac2:	4b6b      	ldr	r3, [pc, #428]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d047      	beq.n	8002b66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	73fb      	strb	r3, [r7, #15]
 8002ada:	e044      	b.n	8002b66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d018      	beq.n	8002b16 <RCCEx_PLLSAI1_Config+0x86>
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d825      	bhi.n	8002b34 <RCCEx_PLLSAI1_Config+0xa4>
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <RCCEx_PLLSAI1_Config+0x62>
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d009      	beq.n	8002b04 <RCCEx_PLLSAI1_Config+0x74>
 8002af0:	e020      	b.n	8002b34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002af2:	4b5f      	ldr	r3, [pc, #380]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11d      	bne.n	8002b3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b02:	e01a      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b04:	4b5a      	ldr	r3, [pc, #360]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d116      	bne.n	8002b3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b14:	e013      	b.n	8002b3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b16:	4b56      	ldr	r3, [pc, #344]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10f      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b22:	4b53      	ldr	r3, [pc, #332]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d109      	bne.n	8002b42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b32:	e006      	b.n	8002b42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	73fb      	strb	r3, [r7, #15]
      break;
 8002b38:	e004      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3a:	bf00      	nop
 8002b3c:	e002      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b42:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b44:	7bfb      	ldrb	r3, [r7, #15]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10d      	bne.n	8002b66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b4a:	4b49      	ldr	r3, [pc, #292]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	4943      	ldr	r1, [pc, #268]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d17c      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b6c:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3f      	ldr	r2, [pc, #252]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fbfc 	bl	8001374 <HAL_GetTick>
 8002b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b7e:	e009      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b80:	f7fe fbf8 	bl	8001374 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d902      	bls.n	8002b94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	73fb      	strb	r3, [r7, #15]
        break;
 8002b92:	e005      	b.n	8002ba0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b94:	4b36      	ldr	r3, [pc, #216]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ef      	bne.n	8002b80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d15f      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d110      	bne.n	8002bce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bac:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002bb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6892      	ldr	r2, [r2, #8]
 8002bbc:	0211      	lsls	r1, r2, #8
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	06d2      	lsls	r2, r2, #27
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	492a      	ldr	r1, [pc, #168]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	610b      	str	r3, [r1, #16]
 8002bcc:	e027      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d112      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd4:	4b26      	ldr	r3, [pc, #152]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6892      	ldr	r2, [r2, #8]
 8002be4:	0211      	lsls	r1, r2, #8
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	6912      	ldr	r2, [r2, #16]
 8002bea:	0852      	lsrs	r2, r2, #1
 8002bec:	3a01      	subs	r2, #1
 8002bee:	0552      	lsls	r2, r2, #21
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	491f      	ldr	r1, [pc, #124]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	610b      	str	r3, [r1, #16]
 8002bf8:	e011      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfa:	4b1d      	ldr	r3, [pc, #116]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	6892      	ldr	r2, [r2, #8]
 8002c0a:	0211      	lsls	r1, r2, #8
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6952      	ldr	r2, [r2, #20]
 8002c10:	0852      	lsrs	r2, r2, #1
 8002c12:	3a01      	subs	r2, #1
 8002c14:	0652      	lsls	r2, r2, #25
 8002c16:	430a      	orrs	r2, r1
 8002c18:	4915      	ldr	r1, [pc, #84]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fba3 	bl	8001374 <HAL_GetTick>
 8002c2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c30:	e009      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c32:	f7fe fb9f 	bl	8001374 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d902      	bls.n	8002c46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	73fb      	strb	r3, [r7, #15]
          break;
 8002c44:	e005      	b.n	8002c52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c46:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0ef      	beq.n	8002c32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002c58:	4b05      	ldr	r3, [pc, #20]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	4903      	ldr	r1, [pc, #12]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40021000 	.word	0x40021000

08002c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e095      	b.n	8002db2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d108      	bne.n	8002ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c96:	d009      	beq.n	8002cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
 8002c9e:	e005      	b.n	8002cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d106      	bne.n	8002ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7fd feee 	bl	8000aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cec:	d902      	bls.n	8002cf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	e002      	b.n	8002cfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002d02:	d007      	beq.n	8002d14 <HAL_SPI_Init+0xa0>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d0c:	d002      	beq.n	8002d14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d56:	ea42 0103 	orr.w	r1, r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	0c1b      	lsrs	r3, r3, #16
 8002d70:	f003 0204 	and.w	r2, r3, #4
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	431a      	orrs	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d90:	ea42 0103 	orr.w	r1, r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e049      	b.n	8002e60 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe f915 	bl	8001010 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	4610      	mov	r0, r2
 8002dfa:	f000 fb9f 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2201      	movs	r2, #1
 8002e32:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2201      	movs	r2, #1
 8002e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d001      	beq.n	8002e80 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e033      	b.n	8002ee8 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_TIM_Base_Start+0x8c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d009      	beq.n	8002ea6 <HAL_TIM_Base_Start+0x3e>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e9a:	d004      	beq.n	8002ea6 <HAL_TIM_Base_Start+0x3e>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a15      	ldr	r2, [pc, #84]	; (8002ef8 <HAL_TIM_Base_Start+0x90>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d115      	bne.n	8002ed2 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <HAL_TIM_Base_Start+0x94>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d015      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x7c>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebe:	d011      	beq.n	8002ee4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	e008      	b.n	8002ee4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e000      	b.n	8002ee6 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40014000 	.word	0x40014000
 8002efc:	00010007 	.word	0x00010007

08002f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e049      	b.n	8002fa6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f841 	bl	8002fae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4610      	mov	r0, r2
 8002f40:	f000 fafc 	bl	800353c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d109      	bne.n	8002fe8 <HAL_TIM_PWM_Start+0x24>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e03c      	b.n	8003062 <HAL_TIM_PWM_Start+0x9e>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d109      	bne.n	8003002 <HAL_TIM_PWM_Start+0x3e>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	e02f      	b.n	8003062 <HAL_TIM_PWM_Start+0x9e>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b08      	cmp	r3, #8
 8003006:	d109      	bne.n	800301c <HAL_TIM_PWM_Start+0x58>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	bf14      	ite	ne
 8003014:	2301      	movne	r3, #1
 8003016:	2300      	moveq	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e022      	b.n	8003062 <HAL_TIM_PWM_Start+0x9e>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b0c      	cmp	r3, #12
 8003020:	d109      	bne.n	8003036 <HAL_TIM_PWM_Start+0x72>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b01      	cmp	r3, #1
 800302c:	bf14      	ite	ne
 800302e:	2301      	movne	r3, #1
 8003030:	2300      	moveq	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	e015      	b.n	8003062 <HAL_TIM_PWM_Start+0x9e>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b10      	cmp	r3, #16
 800303a:	d109      	bne.n	8003050 <HAL_TIM_PWM_Start+0x8c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b01      	cmp	r3, #1
 8003046:	bf14      	ite	ne
 8003048:	2301      	movne	r3, #1
 800304a:	2300      	moveq	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	e008      	b.n	8003062 <HAL_TIM_PWM_Start+0x9e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07e      	b.n	8003168 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_TIM_PWM_Start+0xb6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003078:	e023      	b.n	80030c2 <HAL_TIM_PWM_Start+0xfe>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d104      	bne.n	800308a <HAL_TIM_PWM_Start+0xc6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003088:	e01b      	b.n	80030c2 <HAL_TIM_PWM_Start+0xfe>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0xd6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003098:	e013      	b.n	80030c2 <HAL_TIM_PWM_Start+0xfe>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Start+0xe6>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030a8:	e00b      	b.n	80030c2 <HAL_TIM_PWM_Start+0xfe>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b10      	cmp	r3, #16
 80030ae:	d104      	bne.n	80030ba <HAL_TIM_PWM_Start+0xf6>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030b8:	e003      	b.n	80030c2 <HAL_TIM_PWM_Start+0xfe>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fdb2 	bl	8003c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a26      	ldr	r2, [pc, #152]	; (8003170 <HAL_TIM_PWM_Start+0x1ac>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d009      	beq.n	80030ee <HAL_TIM_PWM_Start+0x12a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a25      	ldr	r2, [pc, #148]	; (8003174 <HAL_TIM_PWM_Start+0x1b0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d004      	beq.n	80030ee <HAL_TIM_PWM_Start+0x12a>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a23      	ldr	r2, [pc, #140]	; (8003178 <HAL_TIM_PWM_Start+0x1b4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d101      	bne.n	80030f2 <HAL_TIM_PWM_Start+0x12e>
 80030ee:	2301      	movs	r3, #1
 80030f0:	e000      	b.n	80030f4 <HAL_TIM_PWM_Start+0x130>
 80030f2:	2300      	movs	r3, #0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a18      	ldr	r2, [pc, #96]	; (8003170 <HAL_TIM_PWM_Start+0x1ac>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_TIM_PWM_Start+0x162>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d004      	beq.n	8003126 <HAL_TIM_PWM_Start+0x162>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_TIM_PWM_Start+0x1b0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d115      	bne.n	8003152 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_TIM_PWM_Start+0x1b8>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b06      	cmp	r3, #6
 8003136:	d015      	beq.n	8003164 <HAL_TIM_PWM_Start+0x1a0>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800313e:	d011      	beq.n	8003164 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f042 0201 	orr.w	r2, r2, #1
 800314e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003150:	e008      	b.n	8003164 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f042 0201 	orr.w	r2, r2, #1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e000      	b.n	8003166 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40012c00 	.word	0x40012c00
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	00010007 	.word	0x00010007

08003180 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ff      	b.n	800339e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b14      	cmp	r3, #20
 80031aa:	f200 80f0 	bhi.w	800338e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031ae:	a201      	add	r2, pc, #4	; (adr r2, 80031b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b4:	08003209 	.word	0x08003209
 80031b8:	0800338f 	.word	0x0800338f
 80031bc:	0800338f 	.word	0x0800338f
 80031c0:	0800338f 	.word	0x0800338f
 80031c4:	08003249 	.word	0x08003249
 80031c8:	0800338f 	.word	0x0800338f
 80031cc:	0800338f 	.word	0x0800338f
 80031d0:	0800338f 	.word	0x0800338f
 80031d4:	0800328b 	.word	0x0800328b
 80031d8:	0800338f 	.word	0x0800338f
 80031dc:	0800338f 	.word	0x0800338f
 80031e0:	0800338f 	.word	0x0800338f
 80031e4:	080032cb 	.word	0x080032cb
 80031e8:	0800338f 	.word	0x0800338f
 80031ec:	0800338f 	.word	0x0800338f
 80031f0:	0800338f 	.word	0x0800338f
 80031f4:	0800330d 	.word	0x0800330d
 80031f8:	0800338f 	.word	0x0800338f
 80031fc:	0800338f 	.word	0x0800338f
 8003200:	0800338f 	.word	0x0800338f
 8003204:	0800334d 	.word	0x0800334d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68b9      	ldr	r1, [r7, #8]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f9f8 	bl	8003604 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	699a      	ldr	r2, [r3, #24]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0208 	orr.w	r2, r2, #8
 8003222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0204 	bic.w	r2, r2, #4
 8003232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6999      	ldr	r1, [r3, #24]
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	691a      	ldr	r2, [r3, #16]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	619a      	str	r2, [r3, #24]
      break;
 8003246:	e0a5      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa54 	bl	80036fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699a      	ldr	r2, [r3, #24]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6999      	ldr	r1, [r3, #24]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	021a      	lsls	r2, r3, #8
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	619a      	str	r2, [r3, #24]
      break;
 8003288:	e084      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68b9      	ldr	r1, [r7, #8]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 faad 	bl	80037f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	69da      	ldr	r2, [r3, #28]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0208 	orr.w	r2, r2, #8
 80032a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0204 	bic.w	r2, r2, #4
 80032b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	69d9      	ldr	r1, [r3, #28]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	61da      	str	r2, [r3, #28]
      break;
 80032c8:	e064      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68b9      	ldr	r1, [r7, #8]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f000 fb05 	bl	80038e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	69da      	ldr	r2, [r3, #28]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69da      	ldr	r2, [r3, #28]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	021a      	lsls	r2, r3, #8
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	61da      	str	r2, [r3, #28]
      break;
 800330a:	e043      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fb42 	bl	800399c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0208 	orr.w	r2, r2, #8
 8003326:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800334a:	e023      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68b9      	ldr	r1, [r7, #8]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 fb7a 	bl	8003a4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003366:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	021a      	lsls	r2, r3, #8
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800338c:	e002      	b.n	8003394 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	75fb      	strb	r3, [r7, #23]
      break;
 8003392:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800339c:	7dfb      	ldrb	r3, [r7, #23]
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3718      	adds	r7, #24
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop

080033a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0b6      	b.n	8003532 <HAL_TIM_ConfigClockSource+0x18a>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	68ba      	ldr	r2, [r7, #8]
 80033f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003400:	d03e      	beq.n	8003480 <HAL_TIM_ConfigClockSource+0xd8>
 8003402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003406:	f200 8087 	bhi.w	8003518 <HAL_TIM_ConfigClockSource+0x170>
 800340a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340e:	f000 8086 	beq.w	800351e <HAL_TIM_ConfigClockSource+0x176>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d87f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003418:	2b70      	cmp	r3, #112	; 0x70
 800341a:	d01a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xaa>
 800341c:	2b70      	cmp	r3, #112	; 0x70
 800341e:	d87b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003420:	2b60      	cmp	r3, #96	; 0x60
 8003422:	d050      	beq.n	80034c6 <HAL_TIM_ConfigClockSource+0x11e>
 8003424:	2b60      	cmp	r3, #96	; 0x60
 8003426:	d877      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d03c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0xfe>
 800342c:	2b50      	cmp	r3, #80	; 0x50
 800342e:	d873      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d058      	beq.n	80034e6 <HAL_TIM_ConfigClockSource+0x13e>
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d86f      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d064      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 800343c:	2b30      	cmp	r3, #48	; 0x30
 800343e:	d86b      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d060      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d867      	bhi.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
 8003448:	2b00      	cmp	r3, #0
 800344a:	d05c      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 800344c:	2b10      	cmp	r3, #16
 800344e:	d05a      	beq.n	8003506 <HAL_TIM_ConfigClockSource+0x15e>
 8003450:	e062      	b.n	8003518 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 fbc7 	bl	8003bf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003474:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	609a      	str	r2, [r3, #8]
      break;
 800347e:	e04f      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	6899      	ldr	r1, [r3, #8]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f000 fbb0 	bl	8003bf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a2:	609a      	str	r2, [r3, #8]
      break;
 80034a4:	e03c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6818      	ldr	r0, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	461a      	mov	r2, r3
 80034b4:	f000 fb24 	bl	8003b00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2150      	movs	r1, #80	; 0x50
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 fb7d 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80034c4:	e02c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6859      	ldr	r1, [r3, #4]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f000 fb43 	bl	8003b5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2160      	movs	r1, #96	; 0x60
 80034de:	4618      	mov	r0, r3
 80034e0:	f000 fb6d 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 80034e4:	e01c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f000 fb04 	bl	8003b00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2140      	movs	r1, #64	; 0x40
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fb5d 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003504:	e00c      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4619      	mov	r1, r3
 8003510:	4610      	mov	r0, r2
 8003512:	f000 fb54 	bl	8003bbe <TIM_ITRx_SetConfig>
      break;
 8003516:	e003      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
      break;
 800351c:	e000      	b.n	8003520 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800351e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003530:	7bfb      	ldrb	r3, [r7, #15]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
	...

0800353c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <TIM_Base_SetConfig+0xbc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x20>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <TIM_Base_SetConfig+0xbc>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0x52>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0x52>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <TIM_Base_SetConfig+0xc0>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0x52>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <TIM_Base_SetConfig+0xc4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0c      	ldr	r2, [pc, #48]	; (80035f8 <TIM_Base_SetConfig+0xbc>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <TIM_Base_SetConfig+0xa0>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <TIM_Base_SetConfig+0xc0>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_Base_SetConfig+0xa0>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <TIM_Base_SetConfig+0xc4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d103      	bne.n	80035e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	615a      	str	r2, [r3, #20]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40012c00 	.word	0x40012c00
 80035fc:	40014000 	.word	0x40014000
 8003600:	40014400 	.word	0x40014400

08003604 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0201 	bic.w	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f023 0303 	bic.w	r3, r3, #3
 800363e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f023 0302 	bic.w	r3, r3, #2
 8003650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a24      	ldr	r2, [pc, #144]	; (80036f0 <TIM_OC1_SetConfig+0xec>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d007      	beq.n	8003674 <TIM_OC1_SetConfig+0x70>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <TIM_OC1_SetConfig+0xf0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <TIM_OC1_SetConfig+0x70>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <TIM_OC1_SetConfig+0xf4>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d10c      	bne.n	800368e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	f023 0308 	bic.w	r3, r3, #8
 800367a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0304 	bic.w	r3, r3, #4
 800368c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a17      	ldr	r2, [pc, #92]	; (80036f0 <TIM_OC1_SetConfig+0xec>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d007      	beq.n	80036a6 <TIM_OC1_SetConfig+0xa2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a16      	ldr	r2, [pc, #88]	; (80036f4 <TIM_OC1_SetConfig+0xf0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d003      	beq.n	80036a6 <TIM_OC1_SetConfig+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <TIM_OC1_SetConfig+0xf4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40014000 	.word	0x40014000
 80036f8:	40014400 	.word	0x40014400

080036fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0210 	bic.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	f023 0320 	bic.w	r3, r3, #32
 800374a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4313      	orrs	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <TIM_OC2_SetConfig+0xe8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d10d      	bne.n	800377c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <TIM_OC2_SetConfig+0xe8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_OC2_SetConfig+0x98>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <TIM_OC2_SetConfig+0xec>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC2_SetConfig+0x98>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a17      	ldr	r2, [pc, #92]	; (80037ec <TIM_OC2_SetConfig+0xf0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d113      	bne.n	80037bc <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800379a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	40012c00 	.word	0x40012c00
 80037e8:	40014000 	.word	0x40014000
 80037ec:	40014400 	.word	0x40014400

080037f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b087      	sub	sp, #28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <TIM_OC3_SetConfig+0xe4>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10d      	bne.n	800386e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800386c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a18      	ldr	r2, [pc, #96]	; (80038d4 <TIM_OC3_SetConfig+0xe4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_OC3_SetConfig+0x96>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a17      	ldr	r2, [pc, #92]	; (80038d8 <TIM_OC3_SetConfig+0xe8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_OC3_SetConfig+0x96>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a16      	ldr	r2, [pc, #88]	; (80038dc <TIM_OC3_SetConfig+0xec>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d113      	bne.n	80038ae <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800388c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	bf00      	nop
 80038ca:	371c      	adds	r7, #28
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40012c00 	.word	0x40012c00
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400

080038e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	69db      	ldr	r3, [r3, #28]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	021b      	lsls	r3, r3, #8
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4313      	orrs	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800392e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	031b      	lsls	r3, r3, #12
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a14      	ldr	r2, [pc, #80]	; (8003990 <TIM_OC4_SetConfig+0xb0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_OC4_SetConfig+0x74>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a13      	ldr	r2, [pc, #76]	; (8003994 <TIM_OC4_SetConfig+0xb4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_OC4_SetConfig+0x74>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <TIM_OC4_SetConfig+0xb8>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d109      	bne.n	8003968 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800395a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	019b      	lsls	r3, r3, #6
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	621a      	str	r2, [r3, #32]
}
 8003982:	bf00      	nop
 8003984:	371c      	adds	r7, #28
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	40012c00 	.word	0x40012c00
 8003994:	40014000 	.word	0x40014000
 8003998:	40014400 	.word	0x40014400

0800399c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800399c:	b480      	push	{r7}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80039e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	041b      	lsls	r3, r3, #16
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <TIM_OC5_SetConfig+0xa4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <TIM_OC5_SetConfig+0x6a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <TIM_OC5_SetConfig+0xa8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_OC5_SetConfig+0x6a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <TIM_OC5_SetConfig+0xac>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d109      	bne.n	8003a1a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	621a      	str	r2, [r3, #32]
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	40012c00 	.word	0x40012c00
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400

08003a4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	021b      	lsls	r3, r3, #8
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	051b      	lsls	r3, r3, #20
 8003a9a:	693a      	ldr	r2, [r7, #16]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a14      	ldr	r2, [pc, #80]	; (8003af4 <TIM_OC6_SetConfig+0xa8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_OC6_SetConfig+0x6c>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <TIM_OC6_SetConfig+0xac>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_OC6_SetConfig+0x6c>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a12      	ldr	r2, [pc, #72]	; (8003afc <TIM_OC6_SetConfig+0xb0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d109      	bne.n	8003acc <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	029b      	lsls	r3, r3, #10
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400

08003b00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	f023 0201 	bic.w	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	f023 030a 	bic.w	r3, r3, #10
 8003b3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	621a      	str	r2, [r3, #32]
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b087      	sub	sp, #28
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	60f8      	str	r0, [r7, #12]
 8003b66:	60b9      	str	r1, [r7, #8]
 8003b68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	031b      	lsls	r3, r3, #12
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	621a      	str	r2, [r3, #32]
}
 8003bb2:	bf00      	nop
 8003bb4:	371c      	adds	r7, #28
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c94:	2302      	movs	r3, #2
 8003c96:	e04f      	b.n	8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a21      	ldr	r2, [pc, #132]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003cc8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a14      	ldr	r2, [pc, #80]	; (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d00:	d004      	beq.n	8003d0c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a10      	ldr	r2, [pc, #64]	; (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d10c      	bne.n	8003d26 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	68ba      	ldr	r2, [r7, #8]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3714      	adds	r7, #20
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40012c00 	.word	0x40012c00
 8003d48:	40014000 	.word	0x40014000

08003d4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e060      	b.n	8003e2a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	041b      	lsls	r3, r3, #16
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a14      	ldr	r2, [pc, #80]	; (8003e38 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d115      	bne.n	8003e18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	051b      	lsls	r3, r3, #20
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40012c00 	.word	0x40012c00

08003e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e040      	b.n	8003ed0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d106      	bne.n	8003e64 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7fd f994 	bl	800118c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2224      	movs	r2, #36	; 0x24
 8003e68:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f022 0201 	bic.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f8c0 	bl	8004000 <UART_SetConfig>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e022      	b.n	8003ed0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d002      	beq.n	8003e98 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 fb0e 	bl	80044b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fb95 	bl	80045f8 <UART_CheckIdleState>
 8003ece:	4603      	mov	r3, r0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	; 0x28
 8003edc:	af02      	add	r7, sp, #8
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	603b      	str	r3, [r7, #0]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	f040 8082 	bne.w	8003ff6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d002      	beq.n	8003efe <HAL_UART_Transmit+0x26>
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e07a      	b.n	8003ff8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Transmit+0x38>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e073      	b.n	8003ff8 <HAL_UART_Transmit+0x120>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2221      	movs	r2, #33	; 0x21
 8003f24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f26:	f7fd fa25 	bl	8001374 <HAL_GetTick>
 8003f2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	88fa      	ldrh	r2, [r7, #6]
 8003f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f44:	d108      	bne.n	8003f58 <HAL_UART_Transmit+0x80>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d104      	bne.n	8003f58 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61bb      	str	r3, [r7, #24]
 8003f56:	e003      	b.n	8003f60 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003f68:	e02d      	b.n	8003fc6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2200      	movs	r2, #0
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fb88 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e039      	b.n	8003ff8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10b      	bne.n	8003fa2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	881a      	ldrh	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f96:	b292      	uxth	r2, r2
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	3302      	adds	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	e008      	b.n	8003fb4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	b292      	uxth	r2, r2
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3301      	adds	r3, #1
 8003fb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1cb      	bne.n	8003f6a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2140      	movs	r1, #64	; 0x40
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fb54 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e005      	b.n	8003ff8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3720      	adds	r7, #32
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004004:	b08a      	sub	sp, #40	; 0x28
 8004006:	af00      	add	r7, sp, #0
 8004008:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	431a      	orrs	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	695b      	ldr	r3, [r3, #20]
 800401e:	431a      	orrs	r2, r3
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	69db      	ldr	r3, [r3, #28]
 8004024:	4313      	orrs	r3, r2
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	4b9e      	ldr	r3, [pc, #632]	; (80042a8 <UART_SetConfig+0x2a8>)
 8004030:	4013      	ands	r3, r2
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004038:	430b      	orrs	r3, r1
 800403a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a93      	ldr	r2, [pc, #588]	; (80042ac <UART_SetConfig+0x2ac>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004068:	4313      	orrs	r3, r2
 800406a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	430a      	orrs	r2, r1
 800407e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a8a      	ldr	r2, [pc, #552]	; (80042b0 <UART_SetConfig+0x2b0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d126      	bne.n	80040d8 <UART_SetConfig+0xd8>
 800408a:	4b8a      	ldr	r3, [pc, #552]	; (80042b4 <UART_SetConfig+0x2b4>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f003 0303 	and.w	r3, r3, #3
 8004094:	2b03      	cmp	r3, #3
 8004096:	d81b      	bhi.n	80040d0 <UART_SetConfig+0xd0>
 8004098:	a201      	add	r2, pc, #4	; (adr r2, 80040a0 <UART_SetConfig+0xa0>)
 800409a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409e:	bf00      	nop
 80040a0:	080040b1 	.word	0x080040b1
 80040a4:	080040c1 	.word	0x080040c1
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040c9 	.word	0x080040c9
 80040b0:	2301      	movs	r3, #1
 80040b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040b6:	e0ab      	b.n	8004210 <UART_SetConfig+0x210>
 80040b8:	2302      	movs	r3, #2
 80040ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040be:	e0a7      	b.n	8004210 <UART_SetConfig+0x210>
 80040c0:	2304      	movs	r3, #4
 80040c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040c6:	e0a3      	b.n	8004210 <UART_SetConfig+0x210>
 80040c8:	2308      	movs	r3, #8
 80040ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ce:	e09f      	b.n	8004210 <UART_SetConfig+0x210>
 80040d0:	2310      	movs	r3, #16
 80040d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040d6:	e09b      	b.n	8004210 <UART_SetConfig+0x210>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a76      	ldr	r2, [pc, #472]	; (80042b8 <UART_SetConfig+0x2b8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d138      	bne.n	8004154 <UART_SetConfig+0x154>
 80040e2:	4b74      	ldr	r3, [pc, #464]	; (80042b4 <UART_SetConfig+0x2b4>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b0c      	cmp	r3, #12
 80040ee:	d82d      	bhi.n	800414c <UART_SetConfig+0x14c>
 80040f0:	a201      	add	r2, pc, #4	; (adr r2, 80040f8 <UART_SetConfig+0xf8>)
 80040f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f6:	bf00      	nop
 80040f8:	0800412d 	.word	0x0800412d
 80040fc:	0800414d 	.word	0x0800414d
 8004100:	0800414d 	.word	0x0800414d
 8004104:	0800414d 	.word	0x0800414d
 8004108:	0800413d 	.word	0x0800413d
 800410c:	0800414d 	.word	0x0800414d
 8004110:	0800414d 	.word	0x0800414d
 8004114:	0800414d 	.word	0x0800414d
 8004118:	08004135 	.word	0x08004135
 800411c:	0800414d 	.word	0x0800414d
 8004120:	0800414d 	.word	0x0800414d
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004145 	.word	0x08004145
 800412c:	2300      	movs	r3, #0
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e06d      	b.n	8004210 <UART_SetConfig+0x210>
 8004134:	2302      	movs	r3, #2
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e069      	b.n	8004210 <UART_SetConfig+0x210>
 800413c:	2304      	movs	r3, #4
 800413e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004142:	e065      	b.n	8004210 <UART_SetConfig+0x210>
 8004144:	2308      	movs	r3, #8
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414a:	e061      	b.n	8004210 <UART_SetConfig+0x210>
 800414c:	2310      	movs	r3, #16
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004152:	e05d      	b.n	8004210 <UART_SetConfig+0x210>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a58      	ldr	r2, [pc, #352]	; (80042bc <UART_SetConfig+0x2bc>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d125      	bne.n	80041aa <UART_SetConfig+0x1aa>
 800415e:	4b55      	ldr	r3, [pc, #340]	; (80042b4 <UART_SetConfig+0x2b4>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004168:	2b30      	cmp	r3, #48	; 0x30
 800416a:	d016      	beq.n	800419a <UART_SetConfig+0x19a>
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	d818      	bhi.n	80041a2 <UART_SetConfig+0x1a2>
 8004170:	2b20      	cmp	r3, #32
 8004172:	d00a      	beq.n	800418a <UART_SetConfig+0x18a>
 8004174:	2b20      	cmp	r3, #32
 8004176:	d814      	bhi.n	80041a2 <UART_SetConfig+0x1a2>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d002      	beq.n	8004182 <UART_SetConfig+0x182>
 800417c:	2b10      	cmp	r3, #16
 800417e:	d008      	beq.n	8004192 <UART_SetConfig+0x192>
 8004180:	e00f      	b.n	80041a2 <UART_SetConfig+0x1a2>
 8004182:	2300      	movs	r3, #0
 8004184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004188:	e042      	b.n	8004210 <UART_SetConfig+0x210>
 800418a:	2302      	movs	r3, #2
 800418c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004190:	e03e      	b.n	8004210 <UART_SetConfig+0x210>
 8004192:	2304      	movs	r3, #4
 8004194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004198:	e03a      	b.n	8004210 <UART_SetConfig+0x210>
 800419a:	2308      	movs	r3, #8
 800419c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a0:	e036      	b.n	8004210 <UART_SetConfig+0x210>
 80041a2:	2310      	movs	r3, #16
 80041a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a8:	e032      	b.n	8004210 <UART_SetConfig+0x210>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a3f      	ldr	r2, [pc, #252]	; (80042ac <UART_SetConfig+0x2ac>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d12a      	bne.n	800420a <UART_SetConfig+0x20a>
 80041b4:	4b3f      	ldr	r3, [pc, #252]	; (80042b4 <UART_SetConfig+0x2b4>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c2:	d01a      	beq.n	80041fa <UART_SetConfig+0x1fa>
 80041c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c8:	d81b      	bhi.n	8004202 <UART_SetConfig+0x202>
 80041ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ce:	d00c      	beq.n	80041ea <UART_SetConfig+0x1ea>
 80041d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d4:	d815      	bhi.n	8004202 <UART_SetConfig+0x202>
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <UART_SetConfig+0x1e2>
 80041da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041de:	d008      	beq.n	80041f2 <UART_SetConfig+0x1f2>
 80041e0:	e00f      	b.n	8004202 <UART_SetConfig+0x202>
 80041e2:	2300      	movs	r3, #0
 80041e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e8:	e012      	b.n	8004210 <UART_SetConfig+0x210>
 80041ea:	2302      	movs	r3, #2
 80041ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f0:	e00e      	b.n	8004210 <UART_SetConfig+0x210>
 80041f2:	2304      	movs	r3, #4
 80041f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f8:	e00a      	b.n	8004210 <UART_SetConfig+0x210>
 80041fa:	2308      	movs	r3, #8
 80041fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004200:	e006      	b.n	8004210 <UART_SetConfig+0x210>
 8004202:	2310      	movs	r3, #16
 8004204:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004208:	e002      	b.n	8004210 <UART_SetConfig+0x210>
 800420a:	2310      	movs	r3, #16
 800420c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a25      	ldr	r2, [pc, #148]	; (80042ac <UART_SetConfig+0x2ac>)
 8004216:	4293      	cmp	r3, r2
 8004218:	f040 808a 	bne.w	8004330 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800421c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004220:	2b08      	cmp	r3, #8
 8004222:	d824      	bhi.n	800426e <UART_SetConfig+0x26e>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <UART_SetConfig+0x22c>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	08004251 	.word	0x08004251
 8004230:	0800426f 	.word	0x0800426f
 8004234:	08004259 	.word	0x08004259
 8004238:	0800426f 	.word	0x0800426f
 800423c:	0800425f 	.word	0x0800425f
 8004240:	0800426f 	.word	0x0800426f
 8004244:	0800426f 	.word	0x0800426f
 8004248:	0800426f 	.word	0x0800426f
 800424c:	08004267 	.word	0x08004267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe f948 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8004254:	61f8      	str	r0, [r7, #28]
        break;
 8004256:	e010      	b.n	800427a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <UART_SetConfig+0x2c0>)
 800425a:	61fb      	str	r3, [r7, #28]
        break;
 800425c:	e00d      	b.n	800427a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800425e:	f7fe f8a9 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8004262:	61f8      	str	r0, [r7, #28]
        break;
 8004264:	e009      	b.n	800427a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426a:	61fb      	str	r3, [r7, #28]
        break;
 800426c:	e005      	b.n	800427a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004278:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8109 	beq.w	8004494 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	429a      	cmp	r2, r3
 8004290:	d305      	bcc.n	800429e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	429a      	cmp	r2, r3
 800429c:	d912      	bls.n	80042c4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042a4:	e0f6      	b.n	8004494 <UART_SetConfig+0x494>
 80042a6:	bf00      	nop
 80042a8:	efff69f3 	.word	0xefff69f3
 80042ac:	40008000 	.word	0x40008000
 80042b0:	40013800 	.word	0x40013800
 80042b4:	40021000 	.word	0x40021000
 80042b8:	40004400 	.word	0x40004400
 80042bc:	40004800 	.word	0x40004800
 80042c0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2200      	movs	r2, #0
 80042c8:	461c      	mov	r4, r3
 80042ca:	4615      	mov	r5, r2
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	022b      	lsls	r3, r5, #8
 80042d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042da:	0222      	lsls	r2, r4, #8
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	6849      	ldr	r1, [r1, #4]
 80042e0:	0849      	lsrs	r1, r1, #1
 80042e2:	2000      	movs	r0, #0
 80042e4:	4688      	mov	r8, r1
 80042e6:	4681      	mov	r9, r0
 80042e8:	eb12 0a08 	adds.w	sl, r2, r8
 80042ec:	eb43 0b09 	adc.w	fp, r3, r9
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	607a      	str	r2, [r7, #4]
 80042fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042fe:	4650      	mov	r0, sl
 8004300:	4659      	mov	r1, fp
 8004302:	f7fb ffbd 	bl	8000280 <__aeabi_uldivmod>
 8004306:	4602      	mov	r2, r0
 8004308:	460b      	mov	r3, r1
 800430a:	4613      	mov	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004314:	d308      	bcc.n	8004328 <UART_SetConfig+0x328>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800431c:	d204      	bcs.n	8004328 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	60da      	str	r2, [r3, #12]
 8004326:	e0b5      	b.n	8004494 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800432e:	e0b1      	b.n	8004494 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004338:	d15d      	bne.n	80043f6 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800433a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800433e:	2b08      	cmp	r3, #8
 8004340:	d827      	bhi.n	8004392 <UART_SetConfig+0x392>
 8004342:	a201      	add	r2, pc, #4	; (adr r2, 8004348 <UART_SetConfig+0x348>)
 8004344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004348:	0800436d 	.word	0x0800436d
 800434c:	08004375 	.word	0x08004375
 8004350:	0800437d 	.word	0x0800437d
 8004354:	08004393 	.word	0x08004393
 8004358:	08004383 	.word	0x08004383
 800435c:	08004393 	.word	0x08004393
 8004360:	08004393 	.word	0x08004393
 8004364:	08004393 	.word	0x08004393
 8004368:	0800438b 	.word	0x0800438b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800436c:	f7fe f8ba 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8004370:	61f8      	str	r0, [r7, #28]
        break;
 8004372:	e014      	b.n	800439e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004374:	f7fe f8cc 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8004378:	61f8      	str	r0, [r7, #28]
        break;
 800437a:	e010      	b.n	800439e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800437c:	4b4c      	ldr	r3, [pc, #304]	; (80044b0 <UART_SetConfig+0x4b0>)
 800437e:	61fb      	str	r3, [r7, #28]
        break;
 8004380:	e00d      	b.n	800439e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004382:	f7fe f817 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8004386:	61f8      	str	r0, [r7, #28]
        break;
 8004388:	e009      	b.n	800439e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800438a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800438e:	61fb      	str	r3, [r7, #28]
        break;
 8004390:	e005      	b.n	800439e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004392:	2300      	movs	r3, #0
 8004394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800439c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d077      	beq.n	8004494 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	005a      	lsls	r2, r3, #1
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	441a      	add	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b0f      	cmp	r3, #15
 80043be:	d916      	bls.n	80043ee <UART_SetConfig+0x3ee>
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c6:	d212      	bcs.n	80043ee <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	f023 030f 	bic.w	r3, r3, #15
 80043d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	085b      	lsrs	r3, r3, #1
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	b29a      	uxth	r2, r3
 80043de:	8afb      	ldrh	r3, [r7, #22]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	8afa      	ldrh	r2, [r7, #22]
 80043ea:	60da      	str	r2, [r3, #12]
 80043ec:	e052      	b.n	8004494 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043f4:	e04e      	b.n	8004494 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043fa:	2b08      	cmp	r3, #8
 80043fc:	d827      	bhi.n	800444e <UART_SetConfig+0x44e>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x404>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	08004429 	.word	0x08004429
 8004408:	08004431 	.word	0x08004431
 800440c:	08004439 	.word	0x08004439
 8004410:	0800444f 	.word	0x0800444f
 8004414:	0800443f 	.word	0x0800443f
 8004418:	0800444f 	.word	0x0800444f
 800441c:	0800444f 	.word	0x0800444f
 8004420:	0800444f 	.word	0x0800444f
 8004424:	08004447 	.word	0x08004447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004428:	f7fe f85c 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800442c:	61f8      	str	r0, [r7, #28]
        break;
 800442e:	e014      	b.n	800445a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004430:	f7fe f86e 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8004434:	61f8      	str	r0, [r7, #28]
        break;
 8004436:	e010      	b.n	800445a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004438:	4b1d      	ldr	r3, [pc, #116]	; (80044b0 <UART_SetConfig+0x4b0>)
 800443a:	61fb      	str	r3, [r7, #28]
        break;
 800443c:	e00d      	b.n	800445a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443e:	f7fd ffb9 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8004442:	61f8      	str	r0, [r7, #28]
        break;
 8004444:	e009      	b.n	800445a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004446:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800444a:	61fb      	str	r3, [r7, #28]
        break;
 800444c:	e005      	b.n	800445a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004458:	bf00      	nop
    }

    if (pclk != 0U)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d019      	beq.n	8004494 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	085a      	lsrs	r2, r3, #1
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	441a      	add	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004472:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	2b0f      	cmp	r3, #15
 8004478:	d909      	bls.n	800448e <UART_SetConfig+0x48e>
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004480:	d205      	bcs.n	800448e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	b29a      	uxth	r2, r3
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60da      	str	r2, [r3, #12]
 800448c:	e002      	b.n	8004494 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80044a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ae:	bf00      	nop
 80044b0:	00f42400 	.word	0x00f42400

080044b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00a      	beq.n	80044de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00a      	beq.n	8004500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	f003 0304 	and.w	r3, r3, #4
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00a      	beq.n	8004522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00a      	beq.n	8004544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	430a      	orrs	r2, r1
 8004542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00a      	beq.n	8004588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01a      	beq.n	80045ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b2:	d10a      	bne.n	80045ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	605a      	str	r2, [r3, #4]
  }
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004608:	f7fc feb4 	bl	8001374 <HAL_GetTick>
 800460c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b08      	cmp	r3, #8
 800461a:	d10e      	bne.n	800463a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800461c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f82d 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e023      	b.n	8004682 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0304 	and.w	r3, r3, #4
 8004644:	2b04      	cmp	r3, #4
 8004646:	d10e      	bne.n	8004666 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004648:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 f817 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e00d      	b.n	8004682 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2220      	movs	r2, #32
 800466a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b09c      	sub	sp, #112	; 0x70
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469a:	e0a5      	b.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	f000 80a1 	beq.w	80047e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fc fe65 	bl	8001374 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <UART_WaitOnFlagUntilTimeout+0x32>
 80046b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d13e      	bne.n	800473a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d0:	667b      	str	r3, [r7, #100]	; 0x64
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	663b      	str	r3, [r7, #96]	; 0x60
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800470e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e5      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e067      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0304 	and.w	r3, r3, #4
 8004744:	2b00      	cmp	r3, #0
 8004746:	d04f      	beq.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69db      	ldr	r3, [r3, #28]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004756:	d147      	bne.n	80047e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004760:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476a:	e853 3f00 	ldrex	r3, [r3]
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004772:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004776:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
 8004782:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004784:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004786:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004788:	e841 2300 	strex	r3, r2, [r1]
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800478e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1e6      	bne.n	8004762 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	613b      	str	r3, [r7, #16]
   return(result);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	3308      	adds	r3, #8
 80047b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047b4:	623a      	str	r2, [r7, #32]
 80047b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	69f9      	ldr	r1, [r7, #28]
 80047ba:	6a3a      	ldr	r2, [r7, #32]
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e5      	bne.n	8004794 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e010      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	68ba      	ldr	r2, [r7, #8]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	f43f af4a 	beq.w	800469c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3770      	adds	r7, #112	; 0x70
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
	...

08004814 <__errno>:
 8004814:	4b01      	ldr	r3, [pc, #4]	; (800481c <__errno+0x8>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	2000000c 	.word	0x2000000c

08004820 <__libc_init_array>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4d0d      	ldr	r5, [pc, #52]	; (8004858 <__libc_init_array+0x38>)
 8004824:	4c0d      	ldr	r4, [pc, #52]	; (800485c <__libc_init_array+0x3c>)
 8004826:	1b64      	subs	r4, r4, r5
 8004828:	10a4      	asrs	r4, r4, #2
 800482a:	2600      	movs	r6, #0
 800482c:	42a6      	cmp	r6, r4
 800482e:	d109      	bne.n	8004844 <__libc_init_array+0x24>
 8004830:	4d0b      	ldr	r5, [pc, #44]	; (8004860 <__libc_init_array+0x40>)
 8004832:	4c0c      	ldr	r4, [pc, #48]	; (8004864 <__libc_init_array+0x44>)
 8004834:	f001 f998 	bl	8005b68 <_init>
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	2600      	movs	r6, #0
 800483e:	42a6      	cmp	r6, r4
 8004840:	d105      	bne.n	800484e <__libc_init_array+0x2e>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	f855 3b04 	ldr.w	r3, [r5], #4
 8004848:	4798      	blx	r3
 800484a:	3601      	adds	r6, #1
 800484c:	e7ee      	b.n	800482c <__libc_init_array+0xc>
 800484e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004852:	4798      	blx	r3
 8004854:	3601      	adds	r6, #1
 8004856:	e7f2      	b.n	800483e <__libc_init_array+0x1e>
 8004858:	08006318 	.word	0x08006318
 800485c:	08006318 	.word	0x08006318
 8004860:	08006318 	.word	0x08006318
 8004864:	0800631c 	.word	0x0800631c

08004868 <memset>:
 8004868:	4402      	add	r2, r0
 800486a:	4603      	mov	r3, r0
 800486c:	4293      	cmp	r3, r2
 800486e:	d100      	bne.n	8004872 <memset+0xa>
 8004870:	4770      	bx	lr
 8004872:	f803 1b01 	strb.w	r1, [r3], #1
 8004876:	e7f9      	b.n	800486c <memset+0x4>

08004878 <_free_r>:
 8004878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800487a:	2900      	cmp	r1, #0
 800487c:	d044      	beq.n	8004908 <_free_r+0x90>
 800487e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004882:	9001      	str	r0, [sp, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f1a1 0404 	sub.w	r4, r1, #4
 800488a:	bfb8      	it	lt
 800488c:	18e4      	addlt	r4, r4, r3
 800488e:	f000 fd97 	bl	80053c0 <__malloc_lock>
 8004892:	4a1e      	ldr	r2, [pc, #120]	; (800490c <_free_r+0x94>)
 8004894:	9801      	ldr	r0, [sp, #4]
 8004896:	6813      	ldr	r3, [r2, #0]
 8004898:	b933      	cbnz	r3, 80048a8 <_free_r+0x30>
 800489a:	6063      	str	r3, [r4, #4]
 800489c:	6014      	str	r4, [r2, #0]
 800489e:	b003      	add	sp, #12
 80048a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048a4:	f000 bd92 	b.w	80053cc <__malloc_unlock>
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d908      	bls.n	80048be <_free_r+0x46>
 80048ac:	6825      	ldr	r5, [r4, #0]
 80048ae:	1961      	adds	r1, r4, r5
 80048b0:	428b      	cmp	r3, r1
 80048b2:	bf01      	itttt	eq
 80048b4:	6819      	ldreq	r1, [r3, #0]
 80048b6:	685b      	ldreq	r3, [r3, #4]
 80048b8:	1949      	addeq	r1, r1, r5
 80048ba:	6021      	streq	r1, [r4, #0]
 80048bc:	e7ed      	b.n	800489a <_free_r+0x22>
 80048be:	461a      	mov	r2, r3
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	b10b      	cbz	r3, 80048c8 <_free_r+0x50>
 80048c4:	42a3      	cmp	r3, r4
 80048c6:	d9fa      	bls.n	80048be <_free_r+0x46>
 80048c8:	6811      	ldr	r1, [r2, #0]
 80048ca:	1855      	adds	r5, r2, r1
 80048cc:	42a5      	cmp	r5, r4
 80048ce:	d10b      	bne.n	80048e8 <_free_r+0x70>
 80048d0:	6824      	ldr	r4, [r4, #0]
 80048d2:	4421      	add	r1, r4
 80048d4:	1854      	adds	r4, r2, r1
 80048d6:	42a3      	cmp	r3, r4
 80048d8:	6011      	str	r1, [r2, #0]
 80048da:	d1e0      	bne.n	800489e <_free_r+0x26>
 80048dc:	681c      	ldr	r4, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	6053      	str	r3, [r2, #4]
 80048e2:	4421      	add	r1, r4
 80048e4:	6011      	str	r1, [r2, #0]
 80048e6:	e7da      	b.n	800489e <_free_r+0x26>
 80048e8:	d902      	bls.n	80048f0 <_free_r+0x78>
 80048ea:	230c      	movs	r3, #12
 80048ec:	6003      	str	r3, [r0, #0]
 80048ee:	e7d6      	b.n	800489e <_free_r+0x26>
 80048f0:	6825      	ldr	r5, [r4, #0]
 80048f2:	1961      	adds	r1, r4, r5
 80048f4:	428b      	cmp	r3, r1
 80048f6:	bf04      	itt	eq
 80048f8:	6819      	ldreq	r1, [r3, #0]
 80048fa:	685b      	ldreq	r3, [r3, #4]
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	bf04      	itt	eq
 8004900:	1949      	addeq	r1, r1, r5
 8004902:	6021      	streq	r1, [r4, #0]
 8004904:	6054      	str	r4, [r2, #4]
 8004906:	e7ca      	b.n	800489e <_free_r+0x26>
 8004908:	b003      	add	sp, #12
 800490a:	bd30      	pop	{r4, r5, pc}
 800490c:	200002dc 	.word	0x200002dc

08004910 <sbrk_aligned>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4e0e      	ldr	r6, [pc, #56]	; (800494c <sbrk_aligned+0x3c>)
 8004914:	460c      	mov	r4, r1
 8004916:	6831      	ldr	r1, [r6, #0]
 8004918:	4605      	mov	r5, r0
 800491a:	b911      	cbnz	r1, 8004922 <sbrk_aligned+0x12>
 800491c:	f000 f92e 	bl	8004b7c <_sbrk_r>
 8004920:	6030      	str	r0, [r6, #0]
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 f929 	bl	8004b7c <_sbrk_r>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d00a      	beq.n	8004944 <sbrk_aligned+0x34>
 800492e:	1cc4      	adds	r4, r0, #3
 8004930:	f024 0403 	bic.w	r4, r4, #3
 8004934:	42a0      	cmp	r0, r4
 8004936:	d007      	beq.n	8004948 <sbrk_aligned+0x38>
 8004938:	1a21      	subs	r1, r4, r0
 800493a:	4628      	mov	r0, r5
 800493c:	f000 f91e 	bl	8004b7c <_sbrk_r>
 8004940:	3001      	adds	r0, #1
 8004942:	d101      	bne.n	8004948 <sbrk_aligned+0x38>
 8004944:	f04f 34ff 	mov.w	r4, #4294967295
 8004948:	4620      	mov	r0, r4
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	200002e0 	.word	0x200002e0

08004950 <_malloc_r>:
 8004950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004954:	1ccd      	adds	r5, r1, #3
 8004956:	f025 0503 	bic.w	r5, r5, #3
 800495a:	3508      	adds	r5, #8
 800495c:	2d0c      	cmp	r5, #12
 800495e:	bf38      	it	cc
 8004960:	250c      	movcc	r5, #12
 8004962:	2d00      	cmp	r5, #0
 8004964:	4607      	mov	r7, r0
 8004966:	db01      	blt.n	800496c <_malloc_r+0x1c>
 8004968:	42a9      	cmp	r1, r5
 800496a:	d905      	bls.n	8004978 <_malloc_r+0x28>
 800496c:	230c      	movs	r3, #12
 800496e:	603b      	str	r3, [r7, #0]
 8004970:	2600      	movs	r6, #0
 8004972:	4630      	mov	r0, r6
 8004974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004978:	4e2e      	ldr	r6, [pc, #184]	; (8004a34 <_malloc_r+0xe4>)
 800497a:	f000 fd21 	bl	80053c0 <__malloc_lock>
 800497e:	6833      	ldr	r3, [r6, #0]
 8004980:	461c      	mov	r4, r3
 8004982:	bb34      	cbnz	r4, 80049d2 <_malloc_r+0x82>
 8004984:	4629      	mov	r1, r5
 8004986:	4638      	mov	r0, r7
 8004988:	f7ff ffc2 	bl	8004910 <sbrk_aligned>
 800498c:	1c43      	adds	r3, r0, #1
 800498e:	4604      	mov	r4, r0
 8004990:	d14d      	bne.n	8004a2e <_malloc_r+0xde>
 8004992:	6834      	ldr	r4, [r6, #0]
 8004994:	4626      	mov	r6, r4
 8004996:	2e00      	cmp	r6, #0
 8004998:	d140      	bne.n	8004a1c <_malloc_r+0xcc>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	4631      	mov	r1, r6
 800499e:	4638      	mov	r0, r7
 80049a0:	eb04 0803 	add.w	r8, r4, r3
 80049a4:	f000 f8ea 	bl	8004b7c <_sbrk_r>
 80049a8:	4580      	cmp	r8, r0
 80049aa:	d13a      	bne.n	8004a22 <_malloc_r+0xd2>
 80049ac:	6821      	ldr	r1, [r4, #0]
 80049ae:	3503      	adds	r5, #3
 80049b0:	1a6d      	subs	r5, r5, r1
 80049b2:	f025 0503 	bic.w	r5, r5, #3
 80049b6:	3508      	adds	r5, #8
 80049b8:	2d0c      	cmp	r5, #12
 80049ba:	bf38      	it	cc
 80049bc:	250c      	movcc	r5, #12
 80049be:	4629      	mov	r1, r5
 80049c0:	4638      	mov	r0, r7
 80049c2:	f7ff ffa5 	bl	8004910 <sbrk_aligned>
 80049c6:	3001      	adds	r0, #1
 80049c8:	d02b      	beq.n	8004a22 <_malloc_r+0xd2>
 80049ca:	6823      	ldr	r3, [r4, #0]
 80049cc:	442b      	add	r3, r5
 80049ce:	6023      	str	r3, [r4, #0]
 80049d0:	e00e      	b.n	80049f0 <_malloc_r+0xa0>
 80049d2:	6822      	ldr	r2, [r4, #0]
 80049d4:	1b52      	subs	r2, r2, r5
 80049d6:	d41e      	bmi.n	8004a16 <_malloc_r+0xc6>
 80049d8:	2a0b      	cmp	r2, #11
 80049da:	d916      	bls.n	8004a0a <_malloc_r+0xba>
 80049dc:	1961      	adds	r1, r4, r5
 80049de:	42a3      	cmp	r3, r4
 80049e0:	6025      	str	r5, [r4, #0]
 80049e2:	bf18      	it	ne
 80049e4:	6059      	strne	r1, [r3, #4]
 80049e6:	6863      	ldr	r3, [r4, #4]
 80049e8:	bf08      	it	eq
 80049ea:	6031      	streq	r1, [r6, #0]
 80049ec:	5162      	str	r2, [r4, r5]
 80049ee:	604b      	str	r3, [r1, #4]
 80049f0:	4638      	mov	r0, r7
 80049f2:	f104 060b 	add.w	r6, r4, #11
 80049f6:	f000 fce9 	bl	80053cc <__malloc_unlock>
 80049fa:	f026 0607 	bic.w	r6, r6, #7
 80049fe:	1d23      	adds	r3, r4, #4
 8004a00:	1af2      	subs	r2, r6, r3
 8004a02:	d0b6      	beq.n	8004972 <_malloc_r+0x22>
 8004a04:	1b9b      	subs	r3, r3, r6
 8004a06:	50a3      	str	r3, [r4, r2]
 8004a08:	e7b3      	b.n	8004972 <_malloc_r+0x22>
 8004a0a:	6862      	ldr	r2, [r4, #4]
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	bf0c      	ite	eq
 8004a10:	6032      	streq	r2, [r6, #0]
 8004a12:	605a      	strne	r2, [r3, #4]
 8004a14:	e7ec      	b.n	80049f0 <_malloc_r+0xa0>
 8004a16:	4623      	mov	r3, r4
 8004a18:	6864      	ldr	r4, [r4, #4]
 8004a1a:	e7b2      	b.n	8004982 <_malloc_r+0x32>
 8004a1c:	4634      	mov	r4, r6
 8004a1e:	6876      	ldr	r6, [r6, #4]
 8004a20:	e7b9      	b.n	8004996 <_malloc_r+0x46>
 8004a22:	230c      	movs	r3, #12
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	4638      	mov	r0, r7
 8004a28:	f000 fcd0 	bl	80053cc <__malloc_unlock>
 8004a2c:	e7a1      	b.n	8004972 <_malloc_r+0x22>
 8004a2e:	6025      	str	r5, [r4, #0]
 8004a30:	e7de      	b.n	80049f0 <_malloc_r+0xa0>
 8004a32:	bf00      	nop
 8004a34:	200002dc 	.word	0x200002dc

08004a38 <_perror_r>:
 8004a38:	6983      	ldr	r3, [r0, #24]
 8004a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a3c:	68c4      	ldr	r4, [r0, #12]
 8004a3e:	4605      	mov	r5, r0
 8004a40:	460e      	mov	r6, r1
 8004a42:	b90b      	cbnz	r3, 8004a48 <_perror_r+0x10>
 8004a44:	f000 fc1c 	bl	8005280 <__sinit>
 8004a48:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <_perror_r+0x120>)
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	d132      	bne.n	8004ab4 <_perror_r+0x7c>
 8004a4e:	686c      	ldr	r4, [r5, #4]
 8004a50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a52:	07d8      	lsls	r0, r3, #31
 8004a54:	d405      	bmi.n	8004a62 <_perror_r+0x2a>
 8004a56:	89a3      	ldrh	r3, [r4, #12]
 8004a58:	0599      	lsls	r1, r3, #22
 8004a5a:	d402      	bmi.n	8004a62 <_perror_r+0x2a>
 8004a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a5e:	f000 fcad 	bl	80053bc <__retarget_lock_acquire_recursive>
 8004a62:	4621      	mov	r1, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	f000 fb39 	bl	80050dc <_fflush_r>
 8004a6a:	bb6e      	cbnz	r6, 8004ac8 <_perror_r+0x90>
 8004a6c:	6829      	ldr	r1, [r5, #0]
 8004a6e:	ab01      	add	r3, sp, #4
 8004a70:	2201      	movs	r2, #1
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 f892 	bl	8004b9c <_strerror_r>
 8004a78:	4607      	mov	r7, r0
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d14f      	bne.n	8004b1e <_perror_r+0xe6>
 8004a7e:	4837      	ldr	r0, [pc, #220]	; (8004b5c <_perror_r+0x124>)
 8004a80:	4f36      	ldr	r7, [pc, #216]	; (8004b5c <_perror_r+0x124>)
 8004a82:	f7fb fba5 	bl	80001d0 <strlen>
 8004a86:	4606      	mov	r6, r0
 8004a88:	b156      	cbz	r6, 8004aa0 <_perror_r+0x68>
 8004a8a:	4620      	mov	r0, r4
 8004a8c:	f000 fb62 	bl	8005154 <fileno>
 8004a90:	4633      	mov	r3, r6
 8004a92:	4601      	mov	r1, r0
 8004a94:	463a      	mov	r2, r7
 8004a96:	4628      	mov	r0, r5
 8004a98:	f000 fa88 	bl	8004fac <_write_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	da51      	bge.n	8004b44 <_perror_r+0x10c>
 8004aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004aa4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004aa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aaa:	07d2      	lsls	r2, r2, #31
 8004aac:	81a3      	strh	r3, [r4, #12]
 8004aae:	d54c      	bpl.n	8004b4a <_perror_r+0x112>
 8004ab0:	b003      	add	sp, #12
 8004ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <_perror_r+0x128>)
 8004ab6:	429c      	cmp	r4, r3
 8004ab8:	d101      	bne.n	8004abe <_perror_r+0x86>
 8004aba:	68ac      	ldr	r4, [r5, #8]
 8004abc:	e7c8      	b.n	8004a50 <_perror_r+0x18>
 8004abe:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <_perror_r+0x12c>)
 8004ac0:	429c      	cmp	r4, r3
 8004ac2:	bf08      	it	eq
 8004ac4:	68ec      	ldreq	r4, [r5, #12]
 8004ac6:	e7c3      	b.n	8004a50 <_perror_r+0x18>
 8004ac8:	7833      	ldrb	r3, [r6, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0ce      	beq.n	8004a6c <_perror_r+0x34>
 8004ace:	4630      	mov	r0, r6
 8004ad0:	f7fb fb7e 	bl	80001d0 <strlen>
 8004ad4:	4607      	mov	r7, r0
 8004ad6:	b157      	cbz	r7, 8004aee <_perror_r+0xb6>
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f000 fb3b 	bl	8005154 <fileno>
 8004ade:	463b      	mov	r3, r7
 8004ae0:	4601      	mov	r1, r0
 8004ae2:	4632      	mov	r2, r6
 8004ae4:	4628      	mov	r0, r5
 8004ae6:	f000 fa61 	bl	8004fac <_write_r>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	da14      	bge.n	8004b18 <_perror_r+0xe0>
 8004aee:	481e      	ldr	r0, [pc, #120]	; (8004b68 <_perror_r+0x130>)
 8004af0:	4f1d      	ldr	r7, [pc, #116]	; (8004b68 <_perror_r+0x130>)
 8004af2:	f7fb fb6d 	bl	80001d0 <strlen>
 8004af6:	4606      	mov	r6, r0
 8004af8:	2e00      	cmp	r6, #0
 8004afa:	d0b7      	beq.n	8004a6c <_perror_r+0x34>
 8004afc:	4620      	mov	r0, r4
 8004afe:	f000 fb29 	bl	8005154 <fileno>
 8004b02:	4633      	mov	r3, r6
 8004b04:	4601      	mov	r1, r0
 8004b06:	463a      	mov	r2, r7
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 fa4f 	bl	8004fac <_write_r>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	dbac      	blt.n	8004a6c <_perror_r+0x34>
 8004b12:	1a36      	subs	r6, r6, r0
 8004b14:	4407      	add	r7, r0
 8004b16:	e7ef      	b.n	8004af8 <_perror_r+0xc0>
 8004b18:	1a3f      	subs	r7, r7, r0
 8004b1a:	4406      	add	r6, r0
 8004b1c:	e7db      	b.n	8004ad6 <_perror_r+0x9e>
 8004b1e:	f7fb fb57 	bl	80001d0 <strlen>
 8004b22:	4606      	mov	r6, r0
 8004b24:	2e00      	cmp	r6, #0
 8004b26:	d0aa      	beq.n	8004a7e <_perror_r+0x46>
 8004b28:	4620      	mov	r0, r4
 8004b2a:	f000 fb13 	bl	8005154 <fileno>
 8004b2e:	4633      	mov	r3, r6
 8004b30:	4601      	mov	r1, r0
 8004b32:	463a      	mov	r2, r7
 8004b34:	4628      	mov	r0, r5
 8004b36:	f000 fa39 	bl	8004fac <_write_r>
 8004b3a:	2800      	cmp	r0, #0
 8004b3c:	db9f      	blt.n	8004a7e <_perror_r+0x46>
 8004b3e:	1a36      	subs	r6, r6, r0
 8004b40:	4407      	add	r7, r0
 8004b42:	e7ef      	b.n	8004b24 <_perror_r+0xec>
 8004b44:	1a36      	subs	r6, r6, r0
 8004b46:	4407      	add	r7, r0
 8004b48:	e79e      	b.n	8004a88 <_perror_r+0x50>
 8004b4a:	059b      	lsls	r3, r3, #22
 8004b4c:	d4b0      	bmi.n	8004ab0 <_perror_r+0x78>
 8004b4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b50:	f000 fc35 	bl	80053be <__retarget_lock_release_recursive>
 8004b54:	e7ac      	b.n	8004ab0 <_perror_r+0x78>
 8004b56:	bf00      	nop
 8004b58:	0800629c 	.word	0x0800629c
 8004b5c:	08005be3 	.word	0x08005be3
 8004b60:	080062bc 	.word	0x080062bc
 8004b64:	0800627c 	.word	0x0800627c
 8004b68:	08005be0 	.word	0x08005be0

08004b6c <perror>:
 8004b6c:	4b02      	ldr	r3, [pc, #8]	; (8004b78 <perror+0xc>)
 8004b6e:	4601      	mov	r1, r0
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	f7ff bf61 	b.w	8004a38 <_perror_r>
 8004b76:	bf00      	nop
 8004b78:	2000000c 	.word	0x2000000c

08004b7c <_sbrk_r>:
 8004b7c:	b538      	push	{r3, r4, r5, lr}
 8004b7e:	4d06      	ldr	r5, [pc, #24]	; (8004b98 <_sbrk_r+0x1c>)
 8004b80:	2300      	movs	r3, #0
 8004b82:	4604      	mov	r4, r0
 8004b84:	4608      	mov	r0, r1
 8004b86:	602b      	str	r3, [r5, #0]
 8004b88:	f7fc f8d8 	bl	8000d3c <_sbrk>
 8004b8c:	1c43      	adds	r3, r0, #1
 8004b8e:	d102      	bne.n	8004b96 <_sbrk_r+0x1a>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	b103      	cbz	r3, 8004b96 <_sbrk_r+0x1a>
 8004b94:	6023      	str	r3, [r4, #0]
 8004b96:	bd38      	pop	{r3, r4, r5, pc}
 8004b98:	200002e8 	.word	0x200002e8

08004b9c <_strerror_r>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4604      	mov	r4, r0
 8004ba0:	4608      	mov	r0, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	288e      	cmp	r0, #142	; 0x8e
 8004ba6:	f200 8130 	bhi.w	8004e0a <_strerror_r+0x26e>
 8004baa:	e8df f010 	tbh	[pc, r0, lsl #1]
 8004bae:	0139      	.short	0x0139
 8004bb0:	0092008f 	.word	0x0092008f
 8004bb4:	00960094 	.word	0x00960094
 8004bb8:	009a0098 	.word	0x009a0098
 8004bbc:	009e009c 	.word	0x009e009c
 8004bc0:	00a400a2 	.word	0x00a400a2
 8004bc4:	00aa00a8 	.word	0x00aa00a8
 8004bc8:	00ae00ac 	.word	0x00ae00ac
 8004bcc:	00b0012e 	.word	0x00b0012e
 8004bd0:	00b400b2 	.word	0x00b400b2
 8004bd4:	00b800b6 	.word	0x00b800b6
 8004bd8:	00c000be 	.word	0x00c000be
 8004bdc:	00c800c6 	.word	0x00c800c6
 8004be0:	00cc00ca 	.word	0x00cc00ca
 8004be4:	00d200ce 	.word	0x00d200ce
 8004be8:	00d800d6 	.word	0x00d800d6
 8004bec:	00dc00da 	.word	0x00dc00da
 8004bf0:	00e000de 	.word	0x00e000de
 8004bf4:	00e400e2 	.word	0x00e400e2
 8004bf8:	012e012e 	.word	0x012e012e
 8004bfc:	012e012e 	.word	0x012e012e
 8004c00:	012e012e 	.word	0x012e012e
 8004c04:	012e012e 	.word	0x012e012e
 8004c08:	00ec00e8 	.word	0x00ec00e8
 8004c0c:	012e012e 	.word	0x012e012e
 8004c10:	012e012e 	.word	0x012e012e
 8004c14:	012e012e 	.word	0x012e012e
 8004c18:	012e012e 	.word	0x012e012e
 8004c1c:	012e012e 	.word	0x012e012e
 8004c20:	012e012e 	.word	0x012e012e
 8004c24:	00ee012e 	.word	0x00ee012e
 8004c28:	00f00108 	.word	0x00f00108
 8004c2c:	012e00f2 	.word	0x012e00f2
 8004c30:	012e012e 	.word	0x012e012e
 8004c34:	012e00f4 	.word	0x012e00f4
 8004c38:	012e012e 	.word	0x012e012e
 8004c3c:	012e00f6 	.word	0x012e00f6
 8004c40:	00fa012e 	.word	0x00fa012e
 8004c44:	012e012e 	.word	0x012e012e
 8004c48:	012e00fc 	.word	0x012e00fc
 8004c4c:	012e012e 	.word	0x012e012e
 8004c50:	012e012e 	.word	0x012e012e
 8004c54:	012e012e 	.word	0x012e012e
 8004c58:	012e012e 	.word	0x012e012e
 8004c5c:	00fe012e 	.word	0x00fe012e
 8004c60:	0100012e 	.word	0x0100012e
 8004c64:	01040102 	.word	0x01040102
 8004c68:	012e012e 	.word	0x012e012e
 8004c6c:	012e0126 	.word	0x012e0126
 8004c70:	012e012e 	.word	0x012e012e
 8004c74:	012e012e 	.word	0x012e012e
 8004c78:	012e012e 	.word	0x012e012e
 8004c7c:	0114012e 	.word	0x0114012e
 8004c80:	010a0106 	.word	0x010a0106
 8004c84:	010e010c 	.word	0x010e010c
 8004c88:	012e0110 	.word	0x012e0110
 8004c8c:	01160112 	.word	0x01160112
 8004c90:	00ea011a 	.word	0x00ea011a
 8004c94:	012c00c2 	.word	0x012c00c2
 8004c98:	00d000ba 	.word	0x00d000ba
 8004c9c:	00a000bc 	.word	0x00a000bc
 8004ca0:	012a00a6 	.word	0x012a00a6
 8004ca4:	012e00f8 	.word	0x012e00f8
 8004ca8:	00c40118 	.word	0x00c40118
 8004cac:	011c011e 	.word	0x011c011e
 8004cb0:	012e012e 	.word	0x012e012e
 8004cb4:	012e012e 	.word	0x012e012e
 8004cb8:	00d4012e 	.word	0x00d4012e
 8004cbc:	012e012e 	.word	0x012e012e
 8004cc0:	00e6012e 	.word	0x00e6012e
 8004cc4:	01200128 	.word	0x01200128
 8004cc8:	01240122 	.word	0x01240122
 8004ccc:	4b55      	ldr	r3, [pc, #340]	; (8004e24 <_strerror_r+0x288>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	bd10      	pop	{r4, pc}
 8004cd2:	4b55      	ldr	r3, [pc, #340]	; (8004e28 <_strerror_r+0x28c>)
 8004cd4:	e7fb      	b.n	8004cce <_strerror_r+0x132>
 8004cd6:	4b55      	ldr	r3, [pc, #340]	; (8004e2c <_strerror_r+0x290>)
 8004cd8:	e7f9      	b.n	8004cce <_strerror_r+0x132>
 8004cda:	4b55      	ldr	r3, [pc, #340]	; (8004e30 <_strerror_r+0x294>)
 8004cdc:	e7f7      	b.n	8004cce <_strerror_r+0x132>
 8004cde:	4b55      	ldr	r3, [pc, #340]	; (8004e34 <_strerror_r+0x298>)
 8004ce0:	e7f5      	b.n	8004cce <_strerror_r+0x132>
 8004ce2:	4b55      	ldr	r3, [pc, #340]	; (8004e38 <_strerror_r+0x29c>)
 8004ce4:	e7f3      	b.n	8004cce <_strerror_r+0x132>
 8004ce6:	4b55      	ldr	r3, [pc, #340]	; (8004e3c <_strerror_r+0x2a0>)
 8004ce8:	e7f1      	b.n	8004cce <_strerror_r+0x132>
 8004cea:	4b55      	ldr	r3, [pc, #340]	; (8004e40 <_strerror_r+0x2a4>)
 8004cec:	e7ef      	b.n	8004cce <_strerror_r+0x132>
 8004cee:	4b55      	ldr	r3, [pc, #340]	; (8004e44 <_strerror_r+0x2a8>)
 8004cf0:	e7ed      	b.n	8004cce <_strerror_r+0x132>
 8004cf2:	4b55      	ldr	r3, [pc, #340]	; (8004e48 <_strerror_r+0x2ac>)
 8004cf4:	e7eb      	b.n	8004cce <_strerror_r+0x132>
 8004cf6:	4b55      	ldr	r3, [pc, #340]	; (8004e4c <_strerror_r+0x2b0>)
 8004cf8:	e7e9      	b.n	8004cce <_strerror_r+0x132>
 8004cfa:	4b55      	ldr	r3, [pc, #340]	; (8004e50 <_strerror_r+0x2b4>)
 8004cfc:	e7e7      	b.n	8004cce <_strerror_r+0x132>
 8004cfe:	4b55      	ldr	r3, [pc, #340]	; (8004e54 <_strerror_r+0x2b8>)
 8004d00:	e7e5      	b.n	8004cce <_strerror_r+0x132>
 8004d02:	4b55      	ldr	r3, [pc, #340]	; (8004e58 <_strerror_r+0x2bc>)
 8004d04:	e7e3      	b.n	8004cce <_strerror_r+0x132>
 8004d06:	4b55      	ldr	r3, [pc, #340]	; (8004e5c <_strerror_r+0x2c0>)
 8004d08:	e7e1      	b.n	8004cce <_strerror_r+0x132>
 8004d0a:	4b55      	ldr	r3, [pc, #340]	; (8004e60 <_strerror_r+0x2c4>)
 8004d0c:	e7df      	b.n	8004cce <_strerror_r+0x132>
 8004d0e:	4b55      	ldr	r3, [pc, #340]	; (8004e64 <_strerror_r+0x2c8>)
 8004d10:	e7dd      	b.n	8004cce <_strerror_r+0x132>
 8004d12:	4b55      	ldr	r3, [pc, #340]	; (8004e68 <_strerror_r+0x2cc>)
 8004d14:	e7db      	b.n	8004cce <_strerror_r+0x132>
 8004d16:	4b55      	ldr	r3, [pc, #340]	; (8004e6c <_strerror_r+0x2d0>)
 8004d18:	e7d9      	b.n	8004cce <_strerror_r+0x132>
 8004d1a:	4b55      	ldr	r3, [pc, #340]	; (8004e70 <_strerror_r+0x2d4>)
 8004d1c:	e7d7      	b.n	8004cce <_strerror_r+0x132>
 8004d1e:	4b55      	ldr	r3, [pc, #340]	; (8004e74 <_strerror_r+0x2d8>)
 8004d20:	e7d5      	b.n	8004cce <_strerror_r+0x132>
 8004d22:	4b55      	ldr	r3, [pc, #340]	; (8004e78 <_strerror_r+0x2dc>)
 8004d24:	e7d3      	b.n	8004cce <_strerror_r+0x132>
 8004d26:	4b55      	ldr	r3, [pc, #340]	; (8004e7c <_strerror_r+0x2e0>)
 8004d28:	e7d1      	b.n	8004cce <_strerror_r+0x132>
 8004d2a:	4b55      	ldr	r3, [pc, #340]	; (8004e80 <_strerror_r+0x2e4>)
 8004d2c:	e7cf      	b.n	8004cce <_strerror_r+0x132>
 8004d2e:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <_strerror_r+0x2e8>)
 8004d30:	e7cd      	b.n	8004cce <_strerror_r+0x132>
 8004d32:	4b55      	ldr	r3, [pc, #340]	; (8004e88 <_strerror_r+0x2ec>)
 8004d34:	e7cb      	b.n	8004cce <_strerror_r+0x132>
 8004d36:	4b55      	ldr	r3, [pc, #340]	; (8004e8c <_strerror_r+0x2f0>)
 8004d38:	e7c9      	b.n	8004cce <_strerror_r+0x132>
 8004d3a:	4b55      	ldr	r3, [pc, #340]	; (8004e90 <_strerror_r+0x2f4>)
 8004d3c:	e7c7      	b.n	8004cce <_strerror_r+0x132>
 8004d3e:	4b55      	ldr	r3, [pc, #340]	; (8004e94 <_strerror_r+0x2f8>)
 8004d40:	e7c5      	b.n	8004cce <_strerror_r+0x132>
 8004d42:	4b55      	ldr	r3, [pc, #340]	; (8004e98 <_strerror_r+0x2fc>)
 8004d44:	e7c3      	b.n	8004cce <_strerror_r+0x132>
 8004d46:	4b55      	ldr	r3, [pc, #340]	; (8004e9c <_strerror_r+0x300>)
 8004d48:	e7c1      	b.n	8004cce <_strerror_r+0x132>
 8004d4a:	4b55      	ldr	r3, [pc, #340]	; (8004ea0 <_strerror_r+0x304>)
 8004d4c:	e7bf      	b.n	8004cce <_strerror_r+0x132>
 8004d4e:	4b55      	ldr	r3, [pc, #340]	; (8004ea4 <_strerror_r+0x308>)
 8004d50:	e7bd      	b.n	8004cce <_strerror_r+0x132>
 8004d52:	4b55      	ldr	r3, [pc, #340]	; (8004ea8 <_strerror_r+0x30c>)
 8004d54:	e7bb      	b.n	8004cce <_strerror_r+0x132>
 8004d56:	4b55      	ldr	r3, [pc, #340]	; (8004eac <_strerror_r+0x310>)
 8004d58:	e7b9      	b.n	8004cce <_strerror_r+0x132>
 8004d5a:	4b55      	ldr	r3, [pc, #340]	; (8004eb0 <_strerror_r+0x314>)
 8004d5c:	e7b7      	b.n	8004cce <_strerror_r+0x132>
 8004d5e:	4b55      	ldr	r3, [pc, #340]	; (8004eb4 <_strerror_r+0x318>)
 8004d60:	e7b5      	b.n	8004cce <_strerror_r+0x132>
 8004d62:	4b55      	ldr	r3, [pc, #340]	; (8004eb8 <_strerror_r+0x31c>)
 8004d64:	e7b3      	b.n	8004cce <_strerror_r+0x132>
 8004d66:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <_strerror_r+0x320>)
 8004d68:	e7b1      	b.n	8004cce <_strerror_r+0x132>
 8004d6a:	4b55      	ldr	r3, [pc, #340]	; (8004ec0 <_strerror_r+0x324>)
 8004d6c:	e7af      	b.n	8004cce <_strerror_r+0x132>
 8004d6e:	4b55      	ldr	r3, [pc, #340]	; (8004ec4 <_strerror_r+0x328>)
 8004d70:	e7ad      	b.n	8004cce <_strerror_r+0x132>
 8004d72:	4b55      	ldr	r3, [pc, #340]	; (8004ec8 <_strerror_r+0x32c>)
 8004d74:	e7ab      	b.n	8004cce <_strerror_r+0x132>
 8004d76:	4b55      	ldr	r3, [pc, #340]	; (8004ecc <_strerror_r+0x330>)
 8004d78:	e7a9      	b.n	8004cce <_strerror_r+0x132>
 8004d7a:	4b55      	ldr	r3, [pc, #340]	; (8004ed0 <_strerror_r+0x334>)
 8004d7c:	e7a7      	b.n	8004cce <_strerror_r+0x132>
 8004d7e:	4b55      	ldr	r3, [pc, #340]	; (8004ed4 <_strerror_r+0x338>)
 8004d80:	e7a5      	b.n	8004cce <_strerror_r+0x132>
 8004d82:	4b55      	ldr	r3, [pc, #340]	; (8004ed8 <_strerror_r+0x33c>)
 8004d84:	e7a3      	b.n	8004cce <_strerror_r+0x132>
 8004d86:	4b55      	ldr	r3, [pc, #340]	; (8004edc <_strerror_r+0x340>)
 8004d88:	e7a1      	b.n	8004cce <_strerror_r+0x132>
 8004d8a:	4b55      	ldr	r3, [pc, #340]	; (8004ee0 <_strerror_r+0x344>)
 8004d8c:	e79f      	b.n	8004cce <_strerror_r+0x132>
 8004d8e:	4b55      	ldr	r3, [pc, #340]	; (8004ee4 <_strerror_r+0x348>)
 8004d90:	e79d      	b.n	8004cce <_strerror_r+0x132>
 8004d92:	4b55      	ldr	r3, [pc, #340]	; (8004ee8 <_strerror_r+0x34c>)
 8004d94:	e79b      	b.n	8004cce <_strerror_r+0x132>
 8004d96:	4b55      	ldr	r3, [pc, #340]	; (8004eec <_strerror_r+0x350>)
 8004d98:	e799      	b.n	8004cce <_strerror_r+0x132>
 8004d9a:	4b55      	ldr	r3, [pc, #340]	; (8004ef0 <_strerror_r+0x354>)
 8004d9c:	e797      	b.n	8004cce <_strerror_r+0x132>
 8004d9e:	4b55      	ldr	r3, [pc, #340]	; (8004ef4 <_strerror_r+0x358>)
 8004da0:	e795      	b.n	8004cce <_strerror_r+0x132>
 8004da2:	4b55      	ldr	r3, [pc, #340]	; (8004ef8 <_strerror_r+0x35c>)
 8004da4:	e793      	b.n	8004cce <_strerror_r+0x132>
 8004da6:	4b55      	ldr	r3, [pc, #340]	; (8004efc <_strerror_r+0x360>)
 8004da8:	e791      	b.n	8004cce <_strerror_r+0x132>
 8004daa:	4b55      	ldr	r3, [pc, #340]	; (8004f00 <_strerror_r+0x364>)
 8004dac:	e78f      	b.n	8004cce <_strerror_r+0x132>
 8004dae:	4b55      	ldr	r3, [pc, #340]	; (8004f04 <_strerror_r+0x368>)
 8004db0:	e78d      	b.n	8004cce <_strerror_r+0x132>
 8004db2:	4b55      	ldr	r3, [pc, #340]	; (8004f08 <_strerror_r+0x36c>)
 8004db4:	e78b      	b.n	8004cce <_strerror_r+0x132>
 8004db6:	4b55      	ldr	r3, [pc, #340]	; (8004f0c <_strerror_r+0x370>)
 8004db8:	e789      	b.n	8004cce <_strerror_r+0x132>
 8004dba:	4b55      	ldr	r3, [pc, #340]	; (8004f10 <_strerror_r+0x374>)
 8004dbc:	e787      	b.n	8004cce <_strerror_r+0x132>
 8004dbe:	4b55      	ldr	r3, [pc, #340]	; (8004f14 <_strerror_r+0x378>)
 8004dc0:	e785      	b.n	8004cce <_strerror_r+0x132>
 8004dc2:	4b55      	ldr	r3, [pc, #340]	; (8004f18 <_strerror_r+0x37c>)
 8004dc4:	e783      	b.n	8004cce <_strerror_r+0x132>
 8004dc6:	4b55      	ldr	r3, [pc, #340]	; (8004f1c <_strerror_r+0x380>)
 8004dc8:	e781      	b.n	8004cce <_strerror_r+0x132>
 8004dca:	4b55      	ldr	r3, [pc, #340]	; (8004f20 <_strerror_r+0x384>)
 8004dcc:	e77f      	b.n	8004cce <_strerror_r+0x132>
 8004dce:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <_strerror_r+0x388>)
 8004dd0:	e77d      	b.n	8004cce <_strerror_r+0x132>
 8004dd2:	4b55      	ldr	r3, [pc, #340]	; (8004f28 <_strerror_r+0x38c>)
 8004dd4:	e77b      	b.n	8004cce <_strerror_r+0x132>
 8004dd6:	4b55      	ldr	r3, [pc, #340]	; (8004f2c <_strerror_r+0x390>)
 8004dd8:	e779      	b.n	8004cce <_strerror_r+0x132>
 8004dda:	4b55      	ldr	r3, [pc, #340]	; (8004f30 <_strerror_r+0x394>)
 8004ddc:	e777      	b.n	8004cce <_strerror_r+0x132>
 8004dde:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <_strerror_r+0x398>)
 8004de0:	e775      	b.n	8004cce <_strerror_r+0x132>
 8004de2:	4b55      	ldr	r3, [pc, #340]	; (8004f38 <_strerror_r+0x39c>)
 8004de4:	e773      	b.n	8004cce <_strerror_r+0x132>
 8004de6:	4b55      	ldr	r3, [pc, #340]	; (8004f3c <_strerror_r+0x3a0>)
 8004de8:	e771      	b.n	8004cce <_strerror_r+0x132>
 8004dea:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <_strerror_r+0x3a4>)
 8004dec:	e76f      	b.n	8004cce <_strerror_r+0x132>
 8004dee:	4b55      	ldr	r3, [pc, #340]	; (8004f44 <_strerror_r+0x3a8>)
 8004df0:	e76d      	b.n	8004cce <_strerror_r+0x132>
 8004df2:	4b55      	ldr	r3, [pc, #340]	; (8004f48 <_strerror_r+0x3ac>)
 8004df4:	e76b      	b.n	8004cce <_strerror_r+0x132>
 8004df6:	4b55      	ldr	r3, [pc, #340]	; (8004f4c <_strerror_r+0x3b0>)
 8004df8:	e769      	b.n	8004cce <_strerror_r+0x132>
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <_strerror_r+0x3b4>)
 8004dfc:	e767      	b.n	8004cce <_strerror_r+0x132>
 8004dfe:	4b55      	ldr	r3, [pc, #340]	; (8004f54 <_strerror_r+0x3b8>)
 8004e00:	e765      	b.n	8004cce <_strerror_r+0x132>
 8004e02:	4b55      	ldr	r3, [pc, #340]	; (8004f58 <_strerror_r+0x3bc>)
 8004e04:	e763      	b.n	8004cce <_strerror_r+0x132>
 8004e06:	4b55      	ldr	r3, [pc, #340]	; (8004f5c <_strerror_r+0x3c0>)
 8004e08:	e761      	b.n	8004cce <_strerror_r+0x132>
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf14      	ite	ne
 8004e0e:	461a      	movne	r2, r3
 8004e10:	4622      	moveq	r2, r4
 8004e12:	f000 f8a9 	bl	8004f68 <_user_strerror>
 8004e16:	4b52      	ldr	r3, [pc, #328]	; (8004f60 <_strerror_r+0x3c4>)
 8004e18:	2800      	cmp	r0, #0
 8004e1a:	bf18      	it	ne
 8004e1c:	4603      	movne	r3, r0
 8004e1e:	e756      	b.n	8004cce <_strerror_r+0x132>
 8004e20:	4b50      	ldr	r3, [pc, #320]	; (8004f64 <_strerror_r+0x3c8>)
 8004e22:	e754      	b.n	8004cce <_strerror_r+0x132>
 8004e24:	08005be5 	.word	0x08005be5
 8004e28:	08005bef 	.word	0x08005bef
 8004e2c:	08005c09 	.word	0x08005c09
 8004e30:	08005c19 	.word	0x08005c19
 8004e34:	08005c31 	.word	0x08005c31
 8004e38:	08005c3b 	.word	0x08005c3b
 8004e3c:	08005c55 	.word	0x08005c55
 8004e40:	08005c67 	.word	0x08005c67
 8004e44:	08005c79 	.word	0x08005c79
 8004e48:	08005c92 	.word	0x08005c92
 8004e4c:	08005ca2 	.word	0x08005ca2
 8004e50:	08005cae 	.word	0x08005cae
 8004e54:	08005ccb 	.word	0x08005ccb
 8004e58:	08005cdd 	.word	0x08005cdd
 8004e5c:	08005cee 	.word	0x08005cee
 8004e60:	08005d00 	.word	0x08005d00
 8004e64:	08005d0c 	.word	0x08005d0c
 8004e68:	08005d24 	.word	0x08005d24
 8004e6c:	08005d30 	.word	0x08005d30
 8004e70:	08005d42 	.word	0x08005d42
 8004e74:	08005d51 	.word	0x08005d51
 8004e78:	08005d61 	.word	0x08005d61
 8004e7c:	08005d6e 	.word	0x08005d6e
 8004e80:	08005d8d 	.word	0x08005d8d
 8004e84:	08005d9c 	.word	0x08005d9c
 8004e88:	08005dad 	.word	0x08005dad
 8004e8c:	08005dd1 	.word	0x08005dd1
 8004e90:	08005def 	.word	0x08005def
 8004e94:	08005e0d 	.word	0x08005e0d
 8004e98:	08005e2d 	.word	0x08005e2d
 8004e9c:	08005e44 	.word	0x08005e44
 8004ea0:	08005e53 	.word	0x08005e53
 8004ea4:	08005e62 	.word	0x08005e62
 8004ea8:	08005e76 	.word	0x08005e76
 8004eac:	08005e8e 	.word	0x08005e8e
 8004eb0:	08005e9c 	.word	0x08005e9c
 8004eb4:	08005ea9 	.word	0x08005ea9
 8004eb8:	08005ebf 	.word	0x08005ebf
 8004ebc:	08005ece 	.word	0x08005ece
 8004ec0:	08005eda 	.word	0x08005eda
 8004ec4:	08005f09 	.word	0x08005f09
 8004ec8:	08005f1a 	.word	0x08005f1a
 8004ecc:	08005f35 	.word	0x08005f35
 8004ed0:	08005f48 	.word	0x08005f48
 8004ed4:	08005f5e 	.word	0x08005f5e
 8004ed8:	08005f67 	.word	0x08005f67
 8004edc:	08005f7e 	.word	0x08005f7e
 8004ee0:	08005f86 	.word	0x08005f86
 8004ee4:	08005f93 	.word	0x08005f93
 8004ee8:	08005fa8 	.word	0x08005fa8
 8004eec:	08005fbc 	.word	0x08005fbc
 8004ef0:	08005fd4 	.word	0x08005fd4
 8004ef4:	08005fe3 	.word	0x08005fe3
 8004ef8:	08005ff4 	.word	0x08005ff4
 8004efc:	08006007 	.word	0x08006007
 8004f00:	08006013 	.word	0x08006013
 8004f04:	0800602c 	.word	0x0800602c
 8004f08:	08006040 	.word	0x08006040
 8004f0c:	0800605b 	.word	0x0800605b
 8004f10:	08006073 	.word	0x08006073
 8004f14:	0800608d 	.word	0x0800608d
 8004f18:	08006095 	.word	0x08006095
 8004f1c:	080060c5 	.word	0x080060c5
 8004f20:	080060e4 	.word	0x080060e4
 8004f24:	08006103 	.word	0x08006103
 8004f28:	0800611a 	.word	0x0800611a
 8004f2c:	0800612d 	.word	0x0800612d
 8004f30:	08006146 	.word	0x08006146
 8004f34:	0800615d 	.word	0x0800615d
 8004f38:	08006173 	.word	0x08006173
 8004f3c:	08006194 	.word	0x08006194
 8004f40:	080061ac 	.word	0x080061ac
 8004f44:	080061c8 	.word	0x080061c8
 8004f48:	080061db 	.word	0x080061db
 8004f4c:	080061f1 	.word	0x080061f1
 8004f50:	08006205 	.word	0x08006205
 8004f54:	08006227 	.word	0x08006227
 8004f58:	0800624d 	.word	0x0800624d
 8004f5c:	0800625e 	.word	0x0800625e
 8004f60:	08005be4 	.word	0x08005be4
 8004f64:	08006273 	.word	0x08006273

08004f68 <_user_strerror>:
 8004f68:	2000      	movs	r0, #0
 8004f6a:	4770      	bx	lr

08004f6c <_vsiprintf_r>:
 8004f6c:	b500      	push	{lr}
 8004f6e:	b09b      	sub	sp, #108	; 0x6c
 8004f70:	9100      	str	r1, [sp, #0]
 8004f72:	9104      	str	r1, [sp, #16]
 8004f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f78:	9105      	str	r1, [sp, #20]
 8004f7a:	9102      	str	r1, [sp, #8]
 8004f7c:	4905      	ldr	r1, [pc, #20]	; (8004f94 <_vsiprintf_r+0x28>)
 8004f7e:	9103      	str	r1, [sp, #12]
 8004f80:	4669      	mov	r1, sp
 8004f82:	f000 fa85 	bl	8005490 <_svfiprintf_r>
 8004f86:	9b00      	ldr	r3, [sp, #0]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
 8004f8c:	b01b      	add	sp, #108	; 0x6c
 8004f8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f92:	bf00      	nop
 8004f94:	ffff0208 	.word	0xffff0208

08004f98 <vsiprintf>:
 8004f98:	4613      	mov	r3, r2
 8004f9a:	460a      	mov	r2, r1
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	4802      	ldr	r0, [pc, #8]	; (8004fa8 <vsiprintf+0x10>)
 8004fa0:	6800      	ldr	r0, [r0, #0]
 8004fa2:	f7ff bfe3 	b.w	8004f6c <_vsiprintf_r>
 8004fa6:	bf00      	nop
 8004fa8:	2000000c 	.word	0x2000000c

08004fac <_write_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d07      	ldr	r5, [pc, #28]	; (8004fcc <_write_r+0x20>)
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	602a      	str	r2, [r5, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fb fe89 	bl	8000cd2 <_write>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_write_r+0x1e>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_write_r+0x1e>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	200002e8 	.word	0x200002e8

08004fd0 <__sflush_r>:
 8004fd0:	898a      	ldrh	r2, [r1, #12]
 8004fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd6:	4605      	mov	r5, r0
 8004fd8:	0710      	lsls	r0, r2, #28
 8004fda:	460c      	mov	r4, r1
 8004fdc:	d458      	bmi.n	8005090 <__sflush_r+0xc0>
 8004fde:	684b      	ldr	r3, [r1, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	dc05      	bgt.n	8004ff0 <__sflush_r+0x20>
 8004fe4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dc02      	bgt.n	8004ff0 <__sflush_r+0x20>
 8004fea:	2000      	movs	r0, #0
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	d0f9      	beq.n	8004fea <__sflush_r+0x1a>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ffc:	682f      	ldr	r7, [r5, #0]
 8004ffe:	602b      	str	r3, [r5, #0]
 8005000:	d032      	beq.n	8005068 <__sflush_r+0x98>
 8005002:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	075a      	lsls	r2, r3, #29
 8005008:	d505      	bpl.n	8005016 <__sflush_r+0x46>
 800500a:	6863      	ldr	r3, [r4, #4]
 800500c:	1ac0      	subs	r0, r0, r3
 800500e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005010:	b10b      	cbz	r3, 8005016 <__sflush_r+0x46>
 8005012:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005014:	1ac0      	subs	r0, r0, r3
 8005016:	2300      	movs	r3, #0
 8005018:	4602      	mov	r2, r0
 800501a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800501c:	6a21      	ldr	r1, [r4, #32]
 800501e:	4628      	mov	r0, r5
 8005020:	47b0      	blx	r6
 8005022:	1c43      	adds	r3, r0, #1
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	d106      	bne.n	8005036 <__sflush_r+0x66>
 8005028:	6829      	ldr	r1, [r5, #0]
 800502a:	291d      	cmp	r1, #29
 800502c:	d82c      	bhi.n	8005088 <__sflush_r+0xb8>
 800502e:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <__sflush_r+0x108>)
 8005030:	40ca      	lsrs	r2, r1
 8005032:	07d6      	lsls	r6, r2, #31
 8005034:	d528      	bpl.n	8005088 <__sflush_r+0xb8>
 8005036:	2200      	movs	r2, #0
 8005038:	6062      	str	r2, [r4, #4]
 800503a:	04d9      	lsls	r1, r3, #19
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	6022      	str	r2, [r4, #0]
 8005040:	d504      	bpl.n	800504c <__sflush_r+0x7c>
 8005042:	1c42      	adds	r2, r0, #1
 8005044:	d101      	bne.n	800504a <__sflush_r+0x7a>
 8005046:	682b      	ldr	r3, [r5, #0]
 8005048:	b903      	cbnz	r3, 800504c <__sflush_r+0x7c>
 800504a:	6560      	str	r0, [r4, #84]	; 0x54
 800504c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800504e:	602f      	str	r7, [r5, #0]
 8005050:	2900      	cmp	r1, #0
 8005052:	d0ca      	beq.n	8004fea <__sflush_r+0x1a>
 8005054:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005058:	4299      	cmp	r1, r3
 800505a:	d002      	beq.n	8005062 <__sflush_r+0x92>
 800505c:	4628      	mov	r0, r5
 800505e:	f7ff fc0b 	bl	8004878 <_free_r>
 8005062:	2000      	movs	r0, #0
 8005064:	6360      	str	r0, [r4, #52]	; 0x34
 8005066:	e7c1      	b.n	8004fec <__sflush_r+0x1c>
 8005068:	6a21      	ldr	r1, [r4, #32]
 800506a:	2301      	movs	r3, #1
 800506c:	4628      	mov	r0, r5
 800506e:	47b0      	blx	r6
 8005070:	1c41      	adds	r1, r0, #1
 8005072:	d1c7      	bne.n	8005004 <__sflush_r+0x34>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0c4      	beq.n	8005004 <__sflush_r+0x34>
 800507a:	2b1d      	cmp	r3, #29
 800507c:	d001      	beq.n	8005082 <__sflush_r+0xb2>
 800507e:	2b16      	cmp	r3, #22
 8005080:	d101      	bne.n	8005086 <__sflush_r+0xb6>
 8005082:	602f      	str	r7, [r5, #0]
 8005084:	e7b1      	b.n	8004fea <__sflush_r+0x1a>
 8005086:	89a3      	ldrh	r3, [r4, #12]
 8005088:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800508c:	81a3      	strh	r3, [r4, #12]
 800508e:	e7ad      	b.n	8004fec <__sflush_r+0x1c>
 8005090:	690f      	ldr	r7, [r1, #16]
 8005092:	2f00      	cmp	r7, #0
 8005094:	d0a9      	beq.n	8004fea <__sflush_r+0x1a>
 8005096:	0793      	lsls	r3, r2, #30
 8005098:	680e      	ldr	r6, [r1, #0]
 800509a:	bf08      	it	eq
 800509c:	694b      	ldreq	r3, [r1, #20]
 800509e:	600f      	str	r7, [r1, #0]
 80050a0:	bf18      	it	ne
 80050a2:	2300      	movne	r3, #0
 80050a4:	eba6 0807 	sub.w	r8, r6, r7
 80050a8:	608b      	str	r3, [r1, #8]
 80050aa:	f1b8 0f00 	cmp.w	r8, #0
 80050ae:	dd9c      	ble.n	8004fea <__sflush_r+0x1a>
 80050b0:	6a21      	ldr	r1, [r4, #32]
 80050b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050b4:	4643      	mov	r3, r8
 80050b6:	463a      	mov	r2, r7
 80050b8:	4628      	mov	r0, r5
 80050ba:	47b0      	blx	r6
 80050bc:	2800      	cmp	r0, #0
 80050be:	dc06      	bgt.n	80050ce <__sflush_r+0xfe>
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050c6:	81a3      	strh	r3, [r4, #12]
 80050c8:	f04f 30ff 	mov.w	r0, #4294967295
 80050cc:	e78e      	b.n	8004fec <__sflush_r+0x1c>
 80050ce:	4407      	add	r7, r0
 80050d0:	eba8 0800 	sub.w	r8, r8, r0
 80050d4:	e7e9      	b.n	80050aa <__sflush_r+0xda>
 80050d6:	bf00      	nop
 80050d8:	20400001 	.word	0x20400001

080050dc <_fflush_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	4605      	mov	r5, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	b913      	cbnz	r3, 80050ec <_fflush_r+0x10>
 80050e6:	2500      	movs	r5, #0
 80050e8:	4628      	mov	r0, r5
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	b118      	cbz	r0, 80050f6 <_fflush_r+0x1a>
 80050ee:	6983      	ldr	r3, [r0, #24]
 80050f0:	b90b      	cbnz	r3, 80050f6 <_fflush_r+0x1a>
 80050f2:	f000 f8c5 	bl	8005280 <__sinit>
 80050f6:	4b14      	ldr	r3, [pc, #80]	; (8005148 <_fflush_r+0x6c>)
 80050f8:	429c      	cmp	r4, r3
 80050fa:	d11b      	bne.n	8005134 <_fflush_r+0x58>
 80050fc:	686c      	ldr	r4, [r5, #4]
 80050fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0ef      	beq.n	80050e6 <_fflush_r+0xa>
 8005106:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005108:	07d0      	lsls	r0, r2, #31
 800510a:	d404      	bmi.n	8005116 <_fflush_r+0x3a>
 800510c:	0599      	lsls	r1, r3, #22
 800510e:	d402      	bmi.n	8005116 <_fflush_r+0x3a>
 8005110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005112:	f000 f953 	bl	80053bc <__retarget_lock_acquire_recursive>
 8005116:	4628      	mov	r0, r5
 8005118:	4621      	mov	r1, r4
 800511a:	f7ff ff59 	bl	8004fd0 <__sflush_r>
 800511e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005120:	07da      	lsls	r2, r3, #31
 8005122:	4605      	mov	r5, r0
 8005124:	d4e0      	bmi.n	80050e8 <_fflush_r+0xc>
 8005126:	89a3      	ldrh	r3, [r4, #12]
 8005128:	059b      	lsls	r3, r3, #22
 800512a:	d4dd      	bmi.n	80050e8 <_fflush_r+0xc>
 800512c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800512e:	f000 f946 	bl	80053be <__retarget_lock_release_recursive>
 8005132:	e7d9      	b.n	80050e8 <_fflush_r+0xc>
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <_fflush_r+0x70>)
 8005136:	429c      	cmp	r4, r3
 8005138:	d101      	bne.n	800513e <_fflush_r+0x62>
 800513a:	68ac      	ldr	r4, [r5, #8]
 800513c:	e7df      	b.n	80050fe <_fflush_r+0x22>
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <_fflush_r+0x74>)
 8005140:	429c      	cmp	r4, r3
 8005142:	bf08      	it	eq
 8005144:	68ec      	ldreq	r4, [r5, #12]
 8005146:	e7da      	b.n	80050fe <_fflush_r+0x22>
 8005148:	0800629c 	.word	0x0800629c
 800514c:	080062bc 	.word	0x080062bc
 8005150:	0800627c 	.word	0x0800627c

08005154 <fileno>:
 8005154:	b570      	push	{r4, r5, r6, lr}
 8005156:	4e1a      	ldr	r6, [pc, #104]	; (80051c0 <fileno+0x6c>)
 8005158:	6835      	ldr	r5, [r6, #0]
 800515a:	4604      	mov	r4, r0
 800515c:	b125      	cbz	r5, 8005168 <fileno+0x14>
 800515e:	69ab      	ldr	r3, [r5, #24]
 8005160:	b913      	cbnz	r3, 8005168 <fileno+0x14>
 8005162:	4628      	mov	r0, r5
 8005164:	f000 f88c 	bl	8005280 <__sinit>
 8005168:	4b16      	ldr	r3, [pc, #88]	; (80051c4 <fileno+0x70>)
 800516a:	429c      	cmp	r4, r3
 800516c:	d118      	bne.n	80051a0 <fileno+0x4c>
 800516e:	686c      	ldr	r4, [r5, #4]
 8005170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005172:	07d8      	lsls	r0, r3, #31
 8005174:	d405      	bmi.n	8005182 <fileno+0x2e>
 8005176:	89a3      	ldrh	r3, [r4, #12]
 8005178:	0599      	lsls	r1, r3, #22
 800517a:	d402      	bmi.n	8005182 <fileno+0x2e>
 800517c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517e:	f000 f91d 	bl	80053bc <__retarget_lock_acquire_recursive>
 8005182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005186:	b1ab      	cbz	r3, 80051b4 <fileno+0x60>
 8005188:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 800518c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800518e:	07d2      	lsls	r2, r2, #31
 8005190:	d404      	bmi.n	800519c <fileno+0x48>
 8005192:	059b      	lsls	r3, r3, #22
 8005194:	d402      	bmi.n	800519c <fileno+0x48>
 8005196:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005198:	f000 f911 	bl	80053be <__retarget_lock_release_recursive>
 800519c:	4628      	mov	r0, r5
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	4b09      	ldr	r3, [pc, #36]	; (80051c8 <fileno+0x74>)
 80051a2:	429c      	cmp	r4, r3
 80051a4:	d101      	bne.n	80051aa <fileno+0x56>
 80051a6:	68ac      	ldr	r4, [r5, #8]
 80051a8:	e7e2      	b.n	8005170 <fileno+0x1c>
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <fileno+0x78>)
 80051ac:	429c      	cmp	r4, r3
 80051ae:	bf08      	it	eq
 80051b0:	68ec      	ldreq	r4, [r5, #12]
 80051b2:	e7dd      	b.n	8005170 <fileno+0x1c>
 80051b4:	6832      	ldr	r2, [r6, #0]
 80051b6:	2109      	movs	r1, #9
 80051b8:	6011      	str	r1, [r2, #0]
 80051ba:	f04f 35ff 	mov.w	r5, #4294967295
 80051be:	e7e5      	b.n	800518c <fileno+0x38>
 80051c0:	2000000c 	.word	0x2000000c
 80051c4:	0800629c 	.word	0x0800629c
 80051c8:	080062bc 	.word	0x080062bc
 80051cc:	0800627c 	.word	0x0800627c

080051d0 <std>:
 80051d0:	2300      	movs	r3, #0
 80051d2:	b510      	push	{r4, lr}
 80051d4:	4604      	mov	r4, r0
 80051d6:	e9c0 3300 	strd	r3, r3, [r0]
 80051da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051de:	6083      	str	r3, [r0, #8]
 80051e0:	8181      	strh	r1, [r0, #12]
 80051e2:	6643      	str	r3, [r0, #100]	; 0x64
 80051e4:	81c2      	strh	r2, [r0, #14]
 80051e6:	6183      	str	r3, [r0, #24]
 80051e8:	4619      	mov	r1, r3
 80051ea:	2208      	movs	r2, #8
 80051ec:	305c      	adds	r0, #92	; 0x5c
 80051ee:	f7ff fb3b 	bl	8004868 <memset>
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <std+0x38>)
 80051f4:	6263      	str	r3, [r4, #36]	; 0x24
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <std+0x3c>)
 80051f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x40>)
 80051fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x44>)
 8005200:	6224      	str	r4, [r4, #32]
 8005202:	6323      	str	r3, [r4, #48]	; 0x30
 8005204:	bd10      	pop	{r4, pc}
 8005206:	bf00      	nop
 8005208:	080059b9 	.word	0x080059b9
 800520c:	080059db 	.word	0x080059db
 8005210:	08005a13 	.word	0x08005a13
 8005214:	08005a37 	.word	0x08005a37

08005218 <_cleanup_r>:
 8005218:	4901      	ldr	r1, [pc, #4]	; (8005220 <_cleanup_r+0x8>)
 800521a:	f000 b8af 	b.w	800537c <_fwalk_reent>
 800521e:	bf00      	nop
 8005220:	080050dd 	.word	0x080050dd

08005224 <__sfmoreglue>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	2268      	movs	r2, #104	; 0x68
 8005228:	1e4d      	subs	r5, r1, #1
 800522a:	4355      	muls	r5, r2
 800522c:	460e      	mov	r6, r1
 800522e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005232:	f7ff fb8d 	bl	8004950 <_malloc_r>
 8005236:	4604      	mov	r4, r0
 8005238:	b140      	cbz	r0, 800524c <__sfmoreglue+0x28>
 800523a:	2100      	movs	r1, #0
 800523c:	e9c0 1600 	strd	r1, r6, [r0]
 8005240:	300c      	adds	r0, #12
 8005242:	60a0      	str	r0, [r4, #8]
 8005244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005248:	f7ff fb0e 	bl	8004868 <memset>
 800524c:	4620      	mov	r0, r4
 800524e:	bd70      	pop	{r4, r5, r6, pc}

08005250 <__sfp_lock_acquire>:
 8005250:	4801      	ldr	r0, [pc, #4]	; (8005258 <__sfp_lock_acquire+0x8>)
 8005252:	f000 b8b3 	b.w	80053bc <__retarget_lock_acquire_recursive>
 8005256:	bf00      	nop
 8005258:	200002e5 	.word	0x200002e5

0800525c <__sfp_lock_release>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__sfp_lock_release+0x8>)
 800525e:	f000 b8ae 	b.w	80053be <__retarget_lock_release_recursive>
 8005262:	bf00      	nop
 8005264:	200002e5 	.word	0x200002e5

08005268 <__sinit_lock_acquire>:
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <__sinit_lock_acquire+0x8>)
 800526a:	f000 b8a7 	b.w	80053bc <__retarget_lock_acquire_recursive>
 800526e:	bf00      	nop
 8005270:	200002e6 	.word	0x200002e6

08005274 <__sinit_lock_release>:
 8005274:	4801      	ldr	r0, [pc, #4]	; (800527c <__sinit_lock_release+0x8>)
 8005276:	f000 b8a2 	b.w	80053be <__retarget_lock_release_recursive>
 800527a:	bf00      	nop
 800527c:	200002e6 	.word	0x200002e6

08005280 <__sinit>:
 8005280:	b510      	push	{r4, lr}
 8005282:	4604      	mov	r4, r0
 8005284:	f7ff fff0 	bl	8005268 <__sinit_lock_acquire>
 8005288:	69a3      	ldr	r3, [r4, #24]
 800528a:	b11b      	cbz	r3, 8005294 <__sinit+0x14>
 800528c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005290:	f7ff bff0 	b.w	8005274 <__sinit_lock_release>
 8005294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005298:	6523      	str	r3, [r4, #80]	; 0x50
 800529a:	4b13      	ldr	r3, [pc, #76]	; (80052e8 <__sinit+0x68>)
 800529c:	4a13      	ldr	r2, [pc, #76]	; (80052ec <__sinit+0x6c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80052a2:	42a3      	cmp	r3, r4
 80052a4:	bf04      	itt	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	61a3      	streq	r3, [r4, #24]
 80052aa:	4620      	mov	r0, r4
 80052ac:	f000 f820 	bl	80052f0 <__sfp>
 80052b0:	6060      	str	r0, [r4, #4]
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f81c 	bl	80052f0 <__sfp>
 80052b8:	60a0      	str	r0, [r4, #8]
 80052ba:	4620      	mov	r0, r4
 80052bc:	f000 f818 	bl	80052f0 <__sfp>
 80052c0:	2200      	movs	r2, #0
 80052c2:	60e0      	str	r0, [r4, #12]
 80052c4:	2104      	movs	r1, #4
 80052c6:	6860      	ldr	r0, [r4, #4]
 80052c8:	f7ff ff82 	bl	80051d0 <std>
 80052cc:	68a0      	ldr	r0, [r4, #8]
 80052ce:	2201      	movs	r2, #1
 80052d0:	2109      	movs	r1, #9
 80052d2:	f7ff ff7d 	bl	80051d0 <std>
 80052d6:	68e0      	ldr	r0, [r4, #12]
 80052d8:	2202      	movs	r2, #2
 80052da:	2112      	movs	r1, #18
 80052dc:	f7ff ff78 	bl	80051d0 <std>
 80052e0:	2301      	movs	r3, #1
 80052e2:	61a3      	str	r3, [r4, #24]
 80052e4:	e7d2      	b.n	800528c <__sinit+0xc>
 80052e6:	bf00      	nop
 80052e8:	08005bdc 	.word	0x08005bdc
 80052ec:	08005219 	.word	0x08005219

080052f0 <__sfp>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	4607      	mov	r7, r0
 80052f4:	f7ff ffac 	bl	8005250 <__sfp_lock_acquire>
 80052f8:	4b1e      	ldr	r3, [pc, #120]	; (8005374 <__sfp+0x84>)
 80052fa:	681e      	ldr	r6, [r3, #0]
 80052fc:	69b3      	ldr	r3, [r6, #24]
 80052fe:	b913      	cbnz	r3, 8005306 <__sfp+0x16>
 8005300:	4630      	mov	r0, r6
 8005302:	f7ff ffbd 	bl	8005280 <__sinit>
 8005306:	3648      	adds	r6, #72	; 0x48
 8005308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800530c:	3b01      	subs	r3, #1
 800530e:	d503      	bpl.n	8005318 <__sfp+0x28>
 8005310:	6833      	ldr	r3, [r6, #0]
 8005312:	b30b      	cbz	r3, 8005358 <__sfp+0x68>
 8005314:	6836      	ldr	r6, [r6, #0]
 8005316:	e7f7      	b.n	8005308 <__sfp+0x18>
 8005318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800531c:	b9d5      	cbnz	r5, 8005354 <__sfp+0x64>
 800531e:	4b16      	ldr	r3, [pc, #88]	; (8005378 <__sfp+0x88>)
 8005320:	60e3      	str	r3, [r4, #12]
 8005322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005326:	6665      	str	r5, [r4, #100]	; 0x64
 8005328:	f000 f847 	bl	80053ba <__retarget_lock_init_recursive>
 800532c:	f7ff ff96 	bl	800525c <__sfp_lock_release>
 8005330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005338:	6025      	str	r5, [r4, #0]
 800533a:	61a5      	str	r5, [r4, #24]
 800533c:	2208      	movs	r2, #8
 800533e:	4629      	mov	r1, r5
 8005340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005344:	f7ff fa90 	bl	8004868 <memset>
 8005348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800534c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005350:	4620      	mov	r0, r4
 8005352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005354:	3468      	adds	r4, #104	; 0x68
 8005356:	e7d9      	b.n	800530c <__sfp+0x1c>
 8005358:	2104      	movs	r1, #4
 800535a:	4638      	mov	r0, r7
 800535c:	f7ff ff62 	bl	8005224 <__sfmoreglue>
 8005360:	4604      	mov	r4, r0
 8005362:	6030      	str	r0, [r6, #0]
 8005364:	2800      	cmp	r0, #0
 8005366:	d1d5      	bne.n	8005314 <__sfp+0x24>
 8005368:	f7ff ff78 	bl	800525c <__sfp_lock_release>
 800536c:	230c      	movs	r3, #12
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	e7ee      	b.n	8005350 <__sfp+0x60>
 8005372:	bf00      	nop
 8005374:	08005bdc 	.word	0x08005bdc
 8005378:	ffff0001 	.word	0xffff0001

0800537c <_fwalk_reent>:
 800537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005380:	4606      	mov	r6, r0
 8005382:	4688      	mov	r8, r1
 8005384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005388:	2700      	movs	r7, #0
 800538a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800538e:	f1b9 0901 	subs.w	r9, r9, #1
 8005392:	d505      	bpl.n	80053a0 <_fwalk_reent+0x24>
 8005394:	6824      	ldr	r4, [r4, #0]
 8005396:	2c00      	cmp	r4, #0
 8005398:	d1f7      	bne.n	800538a <_fwalk_reent+0xe>
 800539a:	4638      	mov	r0, r7
 800539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a0:	89ab      	ldrh	r3, [r5, #12]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d907      	bls.n	80053b6 <_fwalk_reent+0x3a>
 80053a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053aa:	3301      	adds	r3, #1
 80053ac:	d003      	beq.n	80053b6 <_fwalk_reent+0x3a>
 80053ae:	4629      	mov	r1, r5
 80053b0:	4630      	mov	r0, r6
 80053b2:	47c0      	blx	r8
 80053b4:	4307      	orrs	r7, r0
 80053b6:	3568      	adds	r5, #104	; 0x68
 80053b8:	e7e9      	b.n	800538e <_fwalk_reent+0x12>

080053ba <__retarget_lock_init_recursive>:
 80053ba:	4770      	bx	lr

080053bc <__retarget_lock_acquire_recursive>:
 80053bc:	4770      	bx	lr

080053be <__retarget_lock_release_recursive>:
 80053be:	4770      	bx	lr

080053c0 <__malloc_lock>:
 80053c0:	4801      	ldr	r0, [pc, #4]	; (80053c8 <__malloc_lock+0x8>)
 80053c2:	f7ff bffb 	b.w	80053bc <__retarget_lock_acquire_recursive>
 80053c6:	bf00      	nop
 80053c8:	200002e4 	.word	0x200002e4

080053cc <__malloc_unlock>:
 80053cc:	4801      	ldr	r0, [pc, #4]	; (80053d4 <__malloc_unlock+0x8>)
 80053ce:	f7ff bff6 	b.w	80053be <__retarget_lock_release_recursive>
 80053d2:	bf00      	nop
 80053d4:	200002e4 	.word	0x200002e4

080053d8 <__ssputs_r>:
 80053d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053dc:	688e      	ldr	r6, [r1, #8]
 80053de:	429e      	cmp	r6, r3
 80053e0:	4682      	mov	sl, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	4690      	mov	r8, r2
 80053e6:	461f      	mov	r7, r3
 80053e8:	d838      	bhi.n	800545c <__ssputs_r+0x84>
 80053ea:	898a      	ldrh	r2, [r1, #12]
 80053ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053f0:	d032      	beq.n	8005458 <__ssputs_r+0x80>
 80053f2:	6825      	ldr	r5, [r4, #0]
 80053f4:	6909      	ldr	r1, [r1, #16]
 80053f6:	eba5 0901 	sub.w	r9, r5, r1
 80053fa:	6965      	ldr	r5, [r4, #20]
 80053fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005404:	3301      	adds	r3, #1
 8005406:	444b      	add	r3, r9
 8005408:	106d      	asrs	r5, r5, #1
 800540a:	429d      	cmp	r5, r3
 800540c:	bf38      	it	cc
 800540e:	461d      	movcc	r5, r3
 8005410:	0553      	lsls	r3, r2, #21
 8005412:	d531      	bpl.n	8005478 <__ssputs_r+0xa0>
 8005414:	4629      	mov	r1, r5
 8005416:	f7ff fa9b 	bl	8004950 <_malloc_r>
 800541a:	4606      	mov	r6, r0
 800541c:	b950      	cbnz	r0, 8005434 <__ssputs_r+0x5c>
 800541e:	230c      	movs	r3, #12
 8005420:	f8ca 3000 	str.w	r3, [sl]
 8005424:	89a3      	ldrh	r3, [r4, #12]
 8005426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542a:	81a3      	strh	r3, [r4, #12]
 800542c:	f04f 30ff 	mov.w	r0, #4294967295
 8005430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005434:	6921      	ldr	r1, [r4, #16]
 8005436:	464a      	mov	r2, r9
 8005438:	f000 fb24 	bl	8005a84 <memcpy>
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005446:	81a3      	strh	r3, [r4, #12]
 8005448:	6126      	str	r6, [r4, #16]
 800544a:	6165      	str	r5, [r4, #20]
 800544c:	444e      	add	r6, r9
 800544e:	eba5 0509 	sub.w	r5, r5, r9
 8005452:	6026      	str	r6, [r4, #0]
 8005454:	60a5      	str	r5, [r4, #8]
 8005456:	463e      	mov	r6, r7
 8005458:	42be      	cmp	r6, r7
 800545a:	d900      	bls.n	800545e <__ssputs_r+0x86>
 800545c:	463e      	mov	r6, r7
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	4632      	mov	r2, r6
 8005462:	4641      	mov	r1, r8
 8005464:	f000 fb1c 	bl	8005aa0 <memmove>
 8005468:	68a3      	ldr	r3, [r4, #8]
 800546a:	1b9b      	subs	r3, r3, r6
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	4433      	add	r3, r6
 8005472:	6023      	str	r3, [r4, #0]
 8005474:	2000      	movs	r0, #0
 8005476:	e7db      	b.n	8005430 <__ssputs_r+0x58>
 8005478:	462a      	mov	r2, r5
 800547a:	f000 fb2b 	bl	8005ad4 <_realloc_r>
 800547e:	4606      	mov	r6, r0
 8005480:	2800      	cmp	r0, #0
 8005482:	d1e1      	bne.n	8005448 <__ssputs_r+0x70>
 8005484:	6921      	ldr	r1, [r4, #16]
 8005486:	4650      	mov	r0, sl
 8005488:	f7ff f9f6 	bl	8004878 <_free_r>
 800548c:	e7c7      	b.n	800541e <__ssputs_r+0x46>
	...

08005490 <_svfiprintf_r>:
 8005490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005494:	4698      	mov	r8, r3
 8005496:	898b      	ldrh	r3, [r1, #12]
 8005498:	061b      	lsls	r3, r3, #24
 800549a:	b09d      	sub	sp, #116	; 0x74
 800549c:	4607      	mov	r7, r0
 800549e:	460d      	mov	r5, r1
 80054a0:	4614      	mov	r4, r2
 80054a2:	d50e      	bpl.n	80054c2 <_svfiprintf_r+0x32>
 80054a4:	690b      	ldr	r3, [r1, #16]
 80054a6:	b963      	cbnz	r3, 80054c2 <_svfiprintf_r+0x32>
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	f7ff fa51 	bl	8004950 <_malloc_r>
 80054ae:	6028      	str	r0, [r5, #0]
 80054b0:	6128      	str	r0, [r5, #16]
 80054b2:	b920      	cbnz	r0, 80054be <_svfiprintf_r+0x2e>
 80054b4:	230c      	movs	r3, #12
 80054b6:	603b      	str	r3, [r7, #0]
 80054b8:	f04f 30ff 	mov.w	r0, #4294967295
 80054bc:	e0d1      	b.n	8005662 <_svfiprintf_r+0x1d2>
 80054be:	2340      	movs	r3, #64	; 0x40
 80054c0:	616b      	str	r3, [r5, #20]
 80054c2:	2300      	movs	r3, #0
 80054c4:	9309      	str	r3, [sp, #36]	; 0x24
 80054c6:	2320      	movs	r3, #32
 80054c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80054d0:	2330      	movs	r3, #48	; 0x30
 80054d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800567c <_svfiprintf_r+0x1ec>
 80054d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054da:	f04f 0901 	mov.w	r9, #1
 80054de:	4623      	mov	r3, r4
 80054e0:	469a      	mov	sl, r3
 80054e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054e6:	b10a      	cbz	r2, 80054ec <_svfiprintf_r+0x5c>
 80054e8:	2a25      	cmp	r2, #37	; 0x25
 80054ea:	d1f9      	bne.n	80054e0 <_svfiprintf_r+0x50>
 80054ec:	ebba 0b04 	subs.w	fp, sl, r4
 80054f0:	d00b      	beq.n	800550a <_svfiprintf_r+0x7a>
 80054f2:	465b      	mov	r3, fp
 80054f4:	4622      	mov	r2, r4
 80054f6:	4629      	mov	r1, r5
 80054f8:	4638      	mov	r0, r7
 80054fa:	f7ff ff6d 	bl	80053d8 <__ssputs_r>
 80054fe:	3001      	adds	r0, #1
 8005500:	f000 80aa 	beq.w	8005658 <_svfiprintf_r+0x1c8>
 8005504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005506:	445a      	add	r2, fp
 8005508:	9209      	str	r2, [sp, #36]	; 0x24
 800550a:	f89a 3000 	ldrb.w	r3, [sl]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80a2 	beq.w	8005658 <_svfiprintf_r+0x1c8>
 8005514:	2300      	movs	r3, #0
 8005516:	f04f 32ff 	mov.w	r2, #4294967295
 800551a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800551e:	f10a 0a01 	add.w	sl, sl, #1
 8005522:	9304      	str	r3, [sp, #16]
 8005524:	9307      	str	r3, [sp, #28]
 8005526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800552a:	931a      	str	r3, [sp, #104]	; 0x68
 800552c:	4654      	mov	r4, sl
 800552e:	2205      	movs	r2, #5
 8005530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005534:	4851      	ldr	r0, [pc, #324]	; (800567c <_svfiprintf_r+0x1ec>)
 8005536:	f7fa fe53 	bl	80001e0 <memchr>
 800553a:	9a04      	ldr	r2, [sp, #16]
 800553c:	b9d8      	cbnz	r0, 8005576 <_svfiprintf_r+0xe6>
 800553e:	06d0      	lsls	r0, r2, #27
 8005540:	bf44      	itt	mi
 8005542:	2320      	movmi	r3, #32
 8005544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005548:	0711      	lsls	r1, r2, #28
 800554a:	bf44      	itt	mi
 800554c:	232b      	movmi	r3, #43	; 0x2b
 800554e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005552:	f89a 3000 	ldrb.w	r3, [sl]
 8005556:	2b2a      	cmp	r3, #42	; 0x2a
 8005558:	d015      	beq.n	8005586 <_svfiprintf_r+0xf6>
 800555a:	9a07      	ldr	r2, [sp, #28]
 800555c:	4654      	mov	r4, sl
 800555e:	2000      	movs	r0, #0
 8005560:	f04f 0c0a 	mov.w	ip, #10
 8005564:	4621      	mov	r1, r4
 8005566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800556a:	3b30      	subs	r3, #48	; 0x30
 800556c:	2b09      	cmp	r3, #9
 800556e:	d94e      	bls.n	800560e <_svfiprintf_r+0x17e>
 8005570:	b1b0      	cbz	r0, 80055a0 <_svfiprintf_r+0x110>
 8005572:	9207      	str	r2, [sp, #28]
 8005574:	e014      	b.n	80055a0 <_svfiprintf_r+0x110>
 8005576:	eba0 0308 	sub.w	r3, r0, r8
 800557a:	fa09 f303 	lsl.w	r3, r9, r3
 800557e:	4313      	orrs	r3, r2
 8005580:	9304      	str	r3, [sp, #16]
 8005582:	46a2      	mov	sl, r4
 8005584:	e7d2      	b.n	800552c <_svfiprintf_r+0x9c>
 8005586:	9b03      	ldr	r3, [sp, #12]
 8005588:	1d19      	adds	r1, r3, #4
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	9103      	str	r1, [sp, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	bfbb      	ittet	lt
 8005592:	425b      	neglt	r3, r3
 8005594:	f042 0202 	orrlt.w	r2, r2, #2
 8005598:	9307      	strge	r3, [sp, #28]
 800559a:	9307      	strlt	r3, [sp, #28]
 800559c:	bfb8      	it	lt
 800559e:	9204      	strlt	r2, [sp, #16]
 80055a0:	7823      	ldrb	r3, [r4, #0]
 80055a2:	2b2e      	cmp	r3, #46	; 0x2e
 80055a4:	d10c      	bne.n	80055c0 <_svfiprintf_r+0x130>
 80055a6:	7863      	ldrb	r3, [r4, #1]
 80055a8:	2b2a      	cmp	r3, #42	; 0x2a
 80055aa:	d135      	bne.n	8005618 <_svfiprintf_r+0x188>
 80055ac:	9b03      	ldr	r3, [sp, #12]
 80055ae:	1d1a      	adds	r2, r3, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	9203      	str	r2, [sp, #12]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bfb8      	it	lt
 80055b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80055bc:	3402      	adds	r4, #2
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800568c <_svfiprintf_r+0x1fc>
 80055c4:	7821      	ldrb	r1, [r4, #0]
 80055c6:	2203      	movs	r2, #3
 80055c8:	4650      	mov	r0, sl
 80055ca:	f7fa fe09 	bl	80001e0 <memchr>
 80055ce:	b140      	cbz	r0, 80055e2 <_svfiprintf_r+0x152>
 80055d0:	2340      	movs	r3, #64	; 0x40
 80055d2:	eba0 000a 	sub.w	r0, r0, sl
 80055d6:	fa03 f000 	lsl.w	r0, r3, r0
 80055da:	9b04      	ldr	r3, [sp, #16]
 80055dc:	4303      	orrs	r3, r0
 80055de:	3401      	adds	r4, #1
 80055e0:	9304      	str	r3, [sp, #16]
 80055e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055e6:	4826      	ldr	r0, [pc, #152]	; (8005680 <_svfiprintf_r+0x1f0>)
 80055e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055ec:	2206      	movs	r2, #6
 80055ee:	f7fa fdf7 	bl	80001e0 <memchr>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d038      	beq.n	8005668 <_svfiprintf_r+0x1d8>
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <_svfiprintf_r+0x1f4>)
 80055f8:	bb1b      	cbnz	r3, 8005642 <_svfiprintf_r+0x1b2>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	3307      	adds	r3, #7
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	3308      	adds	r3, #8
 8005604:	9303      	str	r3, [sp, #12]
 8005606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005608:	4433      	add	r3, r6
 800560a:	9309      	str	r3, [sp, #36]	; 0x24
 800560c:	e767      	b.n	80054de <_svfiprintf_r+0x4e>
 800560e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005612:	460c      	mov	r4, r1
 8005614:	2001      	movs	r0, #1
 8005616:	e7a5      	b.n	8005564 <_svfiprintf_r+0xd4>
 8005618:	2300      	movs	r3, #0
 800561a:	3401      	adds	r4, #1
 800561c:	9305      	str	r3, [sp, #20]
 800561e:	4619      	mov	r1, r3
 8005620:	f04f 0c0a 	mov.w	ip, #10
 8005624:	4620      	mov	r0, r4
 8005626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800562a:	3a30      	subs	r2, #48	; 0x30
 800562c:	2a09      	cmp	r2, #9
 800562e:	d903      	bls.n	8005638 <_svfiprintf_r+0x1a8>
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0c5      	beq.n	80055c0 <_svfiprintf_r+0x130>
 8005634:	9105      	str	r1, [sp, #20]
 8005636:	e7c3      	b.n	80055c0 <_svfiprintf_r+0x130>
 8005638:	fb0c 2101 	mla	r1, ip, r1, r2
 800563c:	4604      	mov	r4, r0
 800563e:	2301      	movs	r3, #1
 8005640:	e7f0      	b.n	8005624 <_svfiprintf_r+0x194>
 8005642:	ab03      	add	r3, sp, #12
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	462a      	mov	r2, r5
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <_svfiprintf_r+0x1f8>)
 800564a:	a904      	add	r1, sp, #16
 800564c:	4638      	mov	r0, r7
 800564e:	f3af 8000 	nop.w
 8005652:	1c42      	adds	r2, r0, #1
 8005654:	4606      	mov	r6, r0
 8005656:	d1d6      	bne.n	8005606 <_svfiprintf_r+0x176>
 8005658:	89ab      	ldrh	r3, [r5, #12]
 800565a:	065b      	lsls	r3, r3, #25
 800565c:	f53f af2c 	bmi.w	80054b8 <_svfiprintf_r+0x28>
 8005660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005662:	b01d      	add	sp, #116	; 0x74
 8005664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005668:	ab03      	add	r3, sp, #12
 800566a:	9300      	str	r3, [sp, #0]
 800566c:	462a      	mov	r2, r5
 800566e:	4b06      	ldr	r3, [pc, #24]	; (8005688 <_svfiprintf_r+0x1f8>)
 8005670:	a904      	add	r1, sp, #16
 8005672:	4638      	mov	r0, r7
 8005674:	f000 f87a 	bl	800576c <_printf_i>
 8005678:	e7eb      	b.n	8005652 <_svfiprintf_r+0x1c2>
 800567a:	bf00      	nop
 800567c:	080062dc 	.word	0x080062dc
 8005680:	080062e6 	.word	0x080062e6
 8005684:	00000000 	.word	0x00000000
 8005688:	080053d9 	.word	0x080053d9
 800568c:	080062e2 	.word	0x080062e2

08005690 <_printf_common>:
 8005690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005694:	4616      	mov	r6, r2
 8005696:	4699      	mov	r9, r3
 8005698:	688a      	ldr	r2, [r1, #8]
 800569a:	690b      	ldr	r3, [r1, #16]
 800569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056a0:	4293      	cmp	r3, r2
 80056a2:	bfb8      	it	lt
 80056a4:	4613      	movlt	r3, r2
 80056a6:	6033      	str	r3, [r6, #0]
 80056a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056ac:	4607      	mov	r7, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	b10a      	cbz	r2, 80056b6 <_printf_common+0x26>
 80056b2:	3301      	adds	r3, #1
 80056b4:	6033      	str	r3, [r6, #0]
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	0699      	lsls	r1, r3, #26
 80056ba:	bf42      	ittt	mi
 80056bc:	6833      	ldrmi	r3, [r6, #0]
 80056be:	3302      	addmi	r3, #2
 80056c0:	6033      	strmi	r3, [r6, #0]
 80056c2:	6825      	ldr	r5, [r4, #0]
 80056c4:	f015 0506 	ands.w	r5, r5, #6
 80056c8:	d106      	bne.n	80056d8 <_printf_common+0x48>
 80056ca:	f104 0a19 	add.w	sl, r4, #25
 80056ce:	68e3      	ldr	r3, [r4, #12]
 80056d0:	6832      	ldr	r2, [r6, #0]
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	42ab      	cmp	r3, r5
 80056d6:	dc26      	bgt.n	8005726 <_printf_common+0x96>
 80056d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056dc:	1e13      	subs	r3, r2, #0
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	bf18      	it	ne
 80056e2:	2301      	movne	r3, #1
 80056e4:	0692      	lsls	r2, r2, #26
 80056e6:	d42b      	bmi.n	8005740 <_printf_common+0xb0>
 80056e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056ec:	4649      	mov	r1, r9
 80056ee:	4638      	mov	r0, r7
 80056f0:	47c0      	blx	r8
 80056f2:	3001      	adds	r0, #1
 80056f4:	d01e      	beq.n	8005734 <_printf_common+0xa4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	68e5      	ldr	r5, [r4, #12]
 80056fa:	6832      	ldr	r2, [r6, #0]
 80056fc:	f003 0306 	and.w	r3, r3, #6
 8005700:	2b04      	cmp	r3, #4
 8005702:	bf08      	it	eq
 8005704:	1aad      	subeq	r5, r5, r2
 8005706:	68a3      	ldr	r3, [r4, #8]
 8005708:	6922      	ldr	r2, [r4, #16]
 800570a:	bf0c      	ite	eq
 800570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005710:	2500      	movne	r5, #0
 8005712:	4293      	cmp	r3, r2
 8005714:	bfc4      	itt	gt
 8005716:	1a9b      	subgt	r3, r3, r2
 8005718:	18ed      	addgt	r5, r5, r3
 800571a:	2600      	movs	r6, #0
 800571c:	341a      	adds	r4, #26
 800571e:	42b5      	cmp	r5, r6
 8005720:	d11a      	bne.n	8005758 <_printf_common+0xc8>
 8005722:	2000      	movs	r0, #0
 8005724:	e008      	b.n	8005738 <_printf_common+0xa8>
 8005726:	2301      	movs	r3, #1
 8005728:	4652      	mov	r2, sl
 800572a:	4649      	mov	r1, r9
 800572c:	4638      	mov	r0, r7
 800572e:	47c0      	blx	r8
 8005730:	3001      	adds	r0, #1
 8005732:	d103      	bne.n	800573c <_printf_common+0xac>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800573c:	3501      	adds	r5, #1
 800573e:	e7c6      	b.n	80056ce <_printf_common+0x3e>
 8005740:	18e1      	adds	r1, r4, r3
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	2030      	movs	r0, #48	; 0x30
 8005746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800574a:	4422      	add	r2, r4
 800574c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005754:	3302      	adds	r3, #2
 8005756:	e7c7      	b.n	80056e8 <_printf_common+0x58>
 8005758:	2301      	movs	r3, #1
 800575a:	4622      	mov	r2, r4
 800575c:	4649      	mov	r1, r9
 800575e:	4638      	mov	r0, r7
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d0e6      	beq.n	8005734 <_printf_common+0xa4>
 8005766:	3601      	adds	r6, #1
 8005768:	e7d9      	b.n	800571e <_printf_common+0x8e>
	...

0800576c <_printf_i>:
 800576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005770:	7e0f      	ldrb	r7, [r1, #24]
 8005772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005774:	2f78      	cmp	r7, #120	; 0x78
 8005776:	4691      	mov	r9, r2
 8005778:	4680      	mov	r8, r0
 800577a:	460c      	mov	r4, r1
 800577c:	469a      	mov	sl, r3
 800577e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005782:	d807      	bhi.n	8005794 <_printf_i+0x28>
 8005784:	2f62      	cmp	r7, #98	; 0x62
 8005786:	d80a      	bhi.n	800579e <_printf_i+0x32>
 8005788:	2f00      	cmp	r7, #0
 800578a:	f000 80d8 	beq.w	800593e <_printf_i+0x1d2>
 800578e:	2f58      	cmp	r7, #88	; 0x58
 8005790:	f000 80a3 	beq.w	80058da <_printf_i+0x16e>
 8005794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800579c:	e03a      	b.n	8005814 <_printf_i+0xa8>
 800579e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80057a2:	2b15      	cmp	r3, #21
 80057a4:	d8f6      	bhi.n	8005794 <_printf_i+0x28>
 80057a6:	a101      	add	r1, pc, #4	; (adr r1, 80057ac <_printf_i+0x40>)
 80057a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005819 	.word	0x08005819
 80057b4:	08005795 	.word	0x08005795
 80057b8:	08005795 	.word	0x08005795
 80057bc:	08005795 	.word	0x08005795
 80057c0:	08005795 	.word	0x08005795
 80057c4:	08005819 	.word	0x08005819
 80057c8:	08005795 	.word	0x08005795
 80057cc:	08005795 	.word	0x08005795
 80057d0:	08005795 	.word	0x08005795
 80057d4:	08005795 	.word	0x08005795
 80057d8:	08005925 	.word	0x08005925
 80057dc:	08005849 	.word	0x08005849
 80057e0:	08005907 	.word	0x08005907
 80057e4:	08005795 	.word	0x08005795
 80057e8:	08005795 	.word	0x08005795
 80057ec:	08005947 	.word	0x08005947
 80057f0:	08005795 	.word	0x08005795
 80057f4:	08005849 	.word	0x08005849
 80057f8:	08005795 	.word	0x08005795
 80057fc:	08005795 	.word	0x08005795
 8005800:	0800590f 	.word	0x0800590f
 8005804:	682b      	ldr	r3, [r5, #0]
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	602a      	str	r2, [r5, #0]
 800580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005814:	2301      	movs	r3, #1
 8005816:	e0a3      	b.n	8005960 <_printf_i+0x1f4>
 8005818:	6820      	ldr	r0, [r4, #0]
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	0606      	lsls	r6, r0, #24
 800581e:	f101 0304 	add.w	r3, r1, #4
 8005822:	d50a      	bpl.n	800583a <_printf_i+0xce>
 8005824:	680e      	ldr	r6, [r1, #0]
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	2e00      	cmp	r6, #0
 800582a:	da03      	bge.n	8005834 <_printf_i+0xc8>
 800582c:	232d      	movs	r3, #45	; 0x2d
 800582e:	4276      	negs	r6, r6
 8005830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005834:	485e      	ldr	r0, [pc, #376]	; (80059b0 <_printf_i+0x244>)
 8005836:	230a      	movs	r3, #10
 8005838:	e019      	b.n	800586e <_printf_i+0x102>
 800583a:	680e      	ldr	r6, [r1, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005842:	bf18      	it	ne
 8005844:	b236      	sxthne	r6, r6
 8005846:	e7ef      	b.n	8005828 <_printf_i+0xbc>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	6820      	ldr	r0, [r4, #0]
 800584c:	1d19      	adds	r1, r3, #4
 800584e:	6029      	str	r1, [r5, #0]
 8005850:	0601      	lsls	r1, r0, #24
 8005852:	d501      	bpl.n	8005858 <_printf_i+0xec>
 8005854:	681e      	ldr	r6, [r3, #0]
 8005856:	e002      	b.n	800585e <_printf_i+0xf2>
 8005858:	0646      	lsls	r6, r0, #25
 800585a:	d5fb      	bpl.n	8005854 <_printf_i+0xe8>
 800585c:	881e      	ldrh	r6, [r3, #0]
 800585e:	4854      	ldr	r0, [pc, #336]	; (80059b0 <_printf_i+0x244>)
 8005860:	2f6f      	cmp	r7, #111	; 0x6f
 8005862:	bf0c      	ite	eq
 8005864:	2308      	moveq	r3, #8
 8005866:	230a      	movne	r3, #10
 8005868:	2100      	movs	r1, #0
 800586a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800586e:	6865      	ldr	r5, [r4, #4]
 8005870:	60a5      	str	r5, [r4, #8]
 8005872:	2d00      	cmp	r5, #0
 8005874:	bfa2      	ittt	ge
 8005876:	6821      	ldrge	r1, [r4, #0]
 8005878:	f021 0104 	bicge.w	r1, r1, #4
 800587c:	6021      	strge	r1, [r4, #0]
 800587e:	b90e      	cbnz	r6, 8005884 <_printf_i+0x118>
 8005880:	2d00      	cmp	r5, #0
 8005882:	d04d      	beq.n	8005920 <_printf_i+0x1b4>
 8005884:	4615      	mov	r5, r2
 8005886:	fbb6 f1f3 	udiv	r1, r6, r3
 800588a:	fb03 6711 	mls	r7, r3, r1, r6
 800588e:	5dc7      	ldrb	r7, [r0, r7]
 8005890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005894:	4637      	mov	r7, r6
 8005896:	42bb      	cmp	r3, r7
 8005898:	460e      	mov	r6, r1
 800589a:	d9f4      	bls.n	8005886 <_printf_i+0x11a>
 800589c:	2b08      	cmp	r3, #8
 800589e:	d10b      	bne.n	80058b8 <_printf_i+0x14c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	07de      	lsls	r6, r3, #31
 80058a4:	d508      	bpl.n	80058b8 <_printf_i+0x14c>
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	6861      	ldr	r1, [r4, #4]
 80058aa:	4299      	cmp	r1, r3
 80058ac:	bfde      	ittt	le
 80058ae:	2330      	movle	r3, #48	; 0x30
 80058b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058b8:	1b52      	subs	r2, r2, r5
 80058ba:	6122      	str	r2, [r4, #16]
 80058bc:	f8cd a000 	str.w	sl, [sp]
 80058c0:	464b      	mov	r3, r9
 80058c2:	aa03      	add	r2, sp, #12
 80058c4:	4621      	mov	r1, r4
 80058c6:	4640      	mov	r0, r8
 80058c8:	f7ff fee2 	bl	8005690 <_printf_common>
 80058cc:	3001      	adds	r0, #1
 80058ce:	d14c      	bne.n	800596a <_printf_i+0x1fe>
 80058d0:	f04f 30ff 	mov.w	r0, #4294967295
 80058d4:	b004      	add	sp, #16
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	4835      	ldr	r0, [pc, #212]	; (80059b0 <_printf_i+0x244>)
 80058dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	6823      	ldr	r3, [r4, #0]
 80058e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e8:	6029      	str	r1, [r5, #0]
 80058ea:	061d      	lsls	r5, r3, #24
 80058ec:	d514      	bpl.n	8005918 <_printf_i+0x1ac>
 80058ee:	07df      	lsls	r7, r3, #31
 80058f0:	bf44      	itt	mi
 80058f2:	f043 0320 	orrmi.w	r3, r3, #32
 80058f6:	6023      	strmi	r3, [r4, #0]
 80058f8:	b91e      	cbnz	r6, 8005902 <_printf_i+0x196>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	f023 0320 	bic.w	r3, r3, #32
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	2310      	movs	r3, #16
 8005904:	e7b0      	b.n	8005868 <_printf_i+0xfc>
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	f043 0320 	orr.w	r3, r3, #32
 800590c:	6023      	str	r3, [r4, #0]
 800590e:	2378      	movs	r3, #120	; 0x78
 8005910:	4828      	ldr	r0, [pc, #160]	; (80059b4 <_printf_i+0x248>)
 8005912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005916:	e7e3      	b.n	80058e0 <_printf_i+0x174>
 8005918:	0659      	lsls	r1, r3, #25
 800591a:	bf48      	it	mi
 800591c:	b2b6      	uxthmi	r6, r6
 800591e:	e7e6      	b.n	80058ee <_printf_i+0x182>
 8005920:	4615      	mov	r5, r2
 8005922:	e7bb      	b.n	800589c <_printf_i+0x130>
 8005924:	682b      	ldr	r3, [r5, #0]
 8005926:	6826      	ldr	r6, [r4, #0]
 8005928:	6961      	ldr	r1, [r4, #20]
 800592a:	1d18      	adds	r0, r3, #4
 800592c:	6028      	str	r0, [r5, #0]
 800592e:	0635      	lsls	r5, r6, #24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	d501      	bpl.n	8005938 <_printf_i+0x1cc>
 8005934:	6019      	str	r1, [r3, #0]
 8005936:	e002      	b.n	800593e <_printf_i+0x1d2>
 8005938:	0670      	lsls	r0, r6, #25
 800593a:	d5fb      	bpl.n	8005934 <_printf_i+0x1c8>
 800593c:	8019      	strh	r1, [r3, #0]
 800593e:	2300      	movs	r3, #0
 8005940:	6123      	str	r3, [r4, #16]
 8005942:	4615      	mov	r5, r2
 8005944:	e7ba      	b.n	80058bc <_printf_i+0x150>
 8005946:	682b      	ldr	r3, [r5, #0]
 8005948:	1d1a      	adds	r2, r3, #4
 800594a:	602a      	str	r2, [r5, #0]
 800594c:	681d      	ldr	r5, [r3, #0]
 800594e:	6862      	ldr	r2, [r4, #4]
 8005950:	2100      	movs	r1, #0
 8005952:	4628      	mov	r0, r5
 8005954:	f7fa fc44 	bl	80001e0 <memchr>
 8005958:	b108      	cbz	r0, 800595e <_printf_i+0x1f2>
 800595a:	1b40      	subs	r0, r0, r5
 800595c:	6060      	str	r0, [r4, #4]
 800595e:	6863      	ldr	r3, [r4, #4]
 8005960:	6123      	str	r3, [r4, #16]
 8005962:	2300      	movs	r3, #0
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	e7a8      	b.n	80058bc <_printf_i+0x150>
 800596a:	6923      	ldr	r3, [r4, #16]
 800596c:	462a      	mov	r2, r5
 800596e:	4649      	mov	r1, r9
 8005970:	4640      	mov	r0, r8
 8005972:	47d0      	blx	sl
 8005974:	3001      	adds	r0, #1
 8005976:	d0ab      	beq.n	80058d0 <_printf_i+0x164>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	079b      	lsls	r3, r3, #30
 800597c:	d413      	bmi.n	80059a6 <_printf_i+0x23a>
 800597e:	68e0      	ldr	r0, [r4, #12]
 8005980:	9b03      	ldr	r3, [sp, #12]
 8005982:	4298      	cmp	r0, r3
 8005984:	bfb8      	it	lt
 8005986:	4618      	movlt	r0, r3
 8005988:	e7a4      	b.n	80058d4 <_printf_i+0x168>
 800598a:	2301      	movs	r3, #1
 800598c:	4632      	mov	r2, r6
 800598e:	4649      	mov	r1, r9
 8005990:	4640      	mov	r0, r8
 8005992:	47d0      	blx	sl
 8005994:	3001      	adds	r0, #1
 8005996:	d09b      	beq.n	80058d0 <_printf_i+0x164>
 8005998:	3501      	adds	r5, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	9903      	ldr	r1, [sp, #12]
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	42ab      	cmp	r3, r5
 80059a2:	dcf2      	bgt.n	800598a <_printf_i+0x21e>
 80059a4:	e7eb      	b.n	800597e <_printf_i+0x212>
 80059a6:	2500      	movs	r5, #0
 80059a8:	f104 0619 	add.w	r6, r4, #25
 80059ac:	e7f5      	b.n	800599a <_printf_i+0x22e>
 80059ae:	bf00      	nop
 80059b0:	080062ed 	.word	0x080062ed
 80059b4:	080062fe 	.word	0x080062fe

080059b8 <__sread>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	460c      	mov	r4, r1
 80059bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c0:	f000 f8b8 	bl	8005b34 <_read_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	bfab      	itete	ge
 80059c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059ca:	89a3      	ldrhlt	r3, [r4, #12]
 80059cc:	181b      	addge	r3, r3, r0
 80059ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059d2:	bfac      	ite	ge
 80059d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80059d6:	81a3      	strhlt	r3, [r4, #12]
 80059d8:	bd10      	pop	{r4, pc}

080059da <__swrite>:
 80059da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059de:	461f      	mov	r7, r3
 80059e0:	898b      	ldrh	r3, [r1, #12]
 80059e2:	05db      	lsls	r3, r3, #23
 80059e4:	4605      	mov	r5, r0
 80059e6:	460c      	mov	r4, r1
 80059e8:	4616      	mov	r6, r2
 80059ea:	d505      	bpl.n	80059f8 <__swrite+0x1e>
 80059ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f0:	2302      	movs	r3, #2
 80059f2:	2200      	movs	r2, #0
 80059f4:	f000 f834 	bl	8005a60 <_lseek_r>
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a02:	81a3      	strh	r3, [r4, #12]
 8005a04:	4632      	mov	r2, r6
 8005a06:	463b      	mov	r3, r7
 8005a08:	4628      	mov	r0, r5
 8005a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0e:	f7ff bacd 	b.w	8004fac <_write_r>

08005a12 <__sseek>:
 8005a12:	b510      	push	{r4, lr}
 8005a14:	460c      	mov	r4, r1
 8005a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a1a:	f000 f821 	bl	8005a60 <_lseek_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	89a3      	ldrh	r3, [r4, #12]
 8005a22:	bf15      	itete	ne
 8005a24:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a2e:	81a3      	strheq	r3, [r4, #12]
 8005a30:	bf18      	it	ne
 8005a32:	81a3      	strhne	r3, [r4, #12]
 8005a34:	bd10      	pop	{r4, pc}

08005a36 <__sclose>:
 8005a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a3a:	f000 b801 	b.w	8005a40 <_close_r>
	...

08005a40 <_close_r>:
 8005a40:	b538      	push	{r3, r4, r5, lr}
 8005a42:	4d06      	ldr	r5, [pc, #24]	; (8005a5c <_close_r+0x1c>)
 8005a44:	2300      	movs	r3, #0
 8005a46:	4604      	mov	r4, r0
 8005a48:	4608      	mov	r0, r1
 8005a4a:	602b      	str	r3, [r5, #0]
 8005a4c:	f7fb f95d 	bl	8000d0a <_close>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_close_r+0x1a>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_close_r+0x1a>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	200002e8 	.word	0x200002e8

08005a60 <_lseek_r>:
 8005a60:	b538      	push	{r3, r4, r5, lr}
 8005a62:	4d07      	ldr	r5, [pc, #28]	; (8005a80 <_lseek_r+0x20>)
 8005a64:	4604      	mov	r4, r0
 8005a66:	4608      	mov	r0, r1
 8005a68:	4611      	mov	r1, r2
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	602a      	str	r2, [r5, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	f7fb f957 	bl	8000d22 <_lseek>
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	d102      	bne.n	8005a7e <_lseek_r+0x1e>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	b103      	cbz	r3, 8005a7e <_lseek_r+0x1e>
 8005a7c:	6023      	str	r3, [r4, #0]
 8005a7e:	bd38      	pop	{r3, r4, r5, pc}
 8005a80:	200002e8 	.word	0x200002e8

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <memmove>:
 8005aa0:	4288      	cmp	r0, r1
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	eb01 0402 	add.w	r4, r1, r2
 8005aa8:	d902      	bls.n	8005ab0 <memmove+0x10>
 8005aaa:	4284      	cmp	r4, r0
 8005aac:	4623      	mov	r3, r4
 8005aae:	d807      	bhi.n	8005ac0 <memmove+0x20>
 8005ab0:	1e43      	subs	r3, r0, #1
 8005ab2:	42a1      	cmp	r1, r4
 8005ab4:	d008      	beq.n	8005ac8 <memmove+0x28>
 8005ab6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005aba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005abe:	e7f8      	b.n	8005ab2 <memmove+0x12>
 8005ac0:	4402      	add	r2, r0
 8005ac2:	4601      	mov	r1, r0
 8005ac4:	428a      	cmp	r2, r1
 8005ac6:	d100      	bne.n	8005aca <memmove+0x2a>
 8005ac8:	bd10      	pop	{r4, pc}
 8005aca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005ace:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ad2:	e7f7      	b.n	8005ac4 <memmove+0x24>

08005ad4 <_realloc_r>:
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4614      	mov	r4, r2
 8005adc:	460e      	mov	r6, r1
 8005ade:	b921      	cbnz	r1, 8005aea <_realloc_r+0x16>
 8005ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	f7fe bf33 	b.w	8004950 <_malloc_r>
 8005aea:	b92a      	cbnz	r2, 8005af8 <_realloc_r+0x24>
 8005aec:	f7fe fec4 	bl	8004878 <_free_r>
 8005af0:	4625      	mov	r5, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af8:	f000 f82e 	bl	8005b58 <_malloc_usable_size_r>
 8005afc:	4284      	cmp	r4, r0
 8005afe:	4607      	mov	r7, r0
 8005b00:	d802      	bhi.n	8005b08 <_realloc_r+0x34>
 8005b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b06:	d812      	bhi.n	8005b2e <_realloc_r+0x5a>
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7fe ff20 	bl	8004950 <_malloc_r>
 8005b10:	4605      	mov	r5, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0ed      	beq.n	8005af2 <_realloc_r+0x1e>
 8005b16:	42bc      	cmp	r4, r7
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	bf28      	it	cs
 8005b1e:	463a      	movcs	r2, r7
 8005b20:	f7ff ffb0 	bl	8005a84 <memcpy>
 8005b24:	4631      	mov	r1, r6
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7fe fea6 	bl	8004878 <_free_r>
 8005b2c:	e7e1      	b.n	8005af2 <_realloc_r+0x1e>
 8005b2e:	4635      	mov	r5, r6
 8005b30:	e7df      	b.n	8005af2 <_realloc_r+0x1e>
	...

08005b34 <_read_r>:
 8005b34:	b538      	push	{r3, r4, r5, lr}
 8005b36:	4d07      	ldr	r5, [pc, #28]	; (8005b54 <_read_r+0x20>)
 8005b38:	4604      	mov	r4, r0
 8005b3a:	4608      	mov	r0, r1
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	2200      	movs	r2, #0
 8005b40:	602a      	str	r2, [r5, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	f7fb f8a8 	bl	8000c98 <_read>
 8005b48:	1c43      	adds	r3, r0, #1
 8005b4a:	d102      	bne.n	8005b52 <_read_r+0x1e>
 8005b4c:	682b      	ldr	r3, [r5, #0]
 8005b4e:	b103      	cbz	r3, 8005b52 <_read_r+0x1e>
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	bd38      	pop	{r3, r4, r5, pc}
 8005b54:	200002e8 	.word	0x200002e8

08005b58 <_malloc_usable_size_r>:
 8005b58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5c:	1f18      	subs	r0, r3, #4
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bfbc      	itt	lt
 8005b62:	580b      	ldrlt	r3, [r1, r0]
 8005b64:	18c0      	addlt	r0, r0, r3
 8005b66:	4770      	bx	lr

08005b68 <_init>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	bf00      	nop
 8005b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b6e:	bc08      	pop	{r3}
 8005b70:	469e      	mov	lr, r3
 8005b72:	4770      	bx	lr

08005b74 <_fini>:
 8005b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b76:	bf00      	nop
 8005b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b7a:	bc08      	pop	{r3}
 8005b7c:	469e      	mov	lr, r3
 8005b7e:	4770      	bx	lr
