
nucleo_l433_rover_arduino_port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065dc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  0800676c  0800676c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f4c  08006f4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006f4c  08006f4c  00016f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f54  08006f54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f58  08006f58  00016f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006f5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000070  08006fcc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08006fcc  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013fc0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028f3  00000000  00000000  00034060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00036958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00037b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bbe  00000000  00000000  00038b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015777  00000000  00000000  0005f74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db836  00000000  00000000  00074ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001506fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000519c  00000000  00000000  0015074c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006754 	.word	0x08006754

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006754 	.word	0x08006754

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2200      	movs	r2, #0
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	605a      	str	r2, [r3, #4]
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	60da      	str	r2, [r3, #12]
 8000598:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059a:	4b46      	ldr	r3, [pc, #280]	; (80006b4 <MX_GPIO_Init+0x130>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	4a45      	ldr	r2, [pc, #276]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a6:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	4b40      	ldr	r3, [pc, #256]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005be:	4b3d      	ldr	r3, [pc, #244]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b3a      	ldr	r3, [pc, #232]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a39      	ldr	r2, [pc, #228]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d0:	f043 0301 	orr.w	r3, r3, #1
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b37      	ldr	r3, [pc, #220]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0301 	and.w	r3, r3, #1
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b31      	ldr	r3, [pc, #196]	; (80006b4 <MX_GPIO_Init+0x130>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 80005fa:	2200      	movs	r2, #0
 80005fc:	f248 11b0 	movw	r1, #33200	; 0x81b0
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 fa76 	bl	8001af4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000608:	2200      	movs	r2, #0
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	482a      	ldr	r0, [pc, #168]	; (80006b8 <MX_GPIO_Init+0x134>)
 800060e:	f001 fa71 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2160      	movs	r1, #96	; 0x60
 8000616:	4829      	ldr	r0, [pc, #164]	; (80006bc <MX_GPIO_Init+0x138>)
 8000618:	f001 fa6c 	bl	8001af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000622:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <MX_GPIO_Init+0x134>)
 8000634:	f001 f8e4 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PA15 */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|SPI3_CS_D9_Pin
 8000638:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800063c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f001 f8d4 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000658:	2340      	movs	r3, #64	; 0x40
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f001 f8c7 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000672:	2380      	movs	r3, #128	; 0x80
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	480b      	ldr	r0, [pc, #44]	; (80006b8 <MX_GPIO_Init+0x134>)
 800068a:	f001 f8b9 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = CYTRON_DIR_1_Pin|SPI2_CS_D8_Pin;
 800068e:	2360      	movs	r3, #96	; 0x60
 8000690:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <MX_GPIO_Init+0x138>)
 80006a6:	f001 f8ab 	bl	8001800 <HAL_GPIO_Init>

}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	; 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40021000 	.word	0x40021000
 80006b8:	48000800 	.word	0x48000800
 80006bc:	48000400 	.word	0x48000400

080006c0 <_Z5printPKc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void print(const char* s){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
//	#ifdef PRINT
	HAL_StatusTypeDef code = HAL_UART_Transmit(&huart2, (uint8_t*) s, strlen(s), HAL_MAX_DELAY);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff fd81 	bl	80001d0 <strlen>
 80006ce:	4603      	mov	r3, r0
 80006d0:	b29a      	uxth	r2, r3
 80006d2:	f04f 33ff 	mov.w	r3, #4294967295
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <_Z5printPKc+0x2c>)
 80006da:	f004 f82d 	bl	8004738 <HAL_UART_Transmit>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]
//	#endif
}
 80006e2:	bf00      	nop
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000254 	.word	0x20000254

080006f0 <printf>:
int printf(const char* s, ...){
 80006f0:	b40f      	push	{r0, r1, r2, r3}
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b0c2      	sub	sp, #264	; 0x108
 80006f6:	af00      	add	r7, sp, #0
	char buffer[256];
//	#ifdef PRINT
	va_list args;
	va_start(args, s);
 80006f8:	f507 728a 	add.w	r2, r7, #276	; 0x114
 80006fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000704:	601a      	str	r2, [r3, #0]
	vsprintf(buffer, s, args);
 8000706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800070a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800070e:	f107 0008 	add.w	r0, r7, #8
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000718:	f005 fa34 	bl	8005b84 <vsiprintf>
	perror(buffer);
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	4618      	mov	r0, r3
 8000722:	f005 f819 	bl	8005758 <perror>
	print(buffer);
 8000726:	f107 0308 	add.w	r3, r7, #8
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffc8 	bl	80006c0 <_Z5printPKc>
	va_end(args);
//	#endif
	return strlen(buffer);
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff fd4b 	bl	80001d0 <strlen>
 800073a:	4603      	mov	r3, r0
}
 800073c:	4618      	mov	r0, r3
 800073e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000750:	b09a      	sub	sp, #104	; 0x68
 8000752:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000754:	f000 fece 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000758:	f000 fa34 	bl	8000bc4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800075c:	f7ff ff12 	bl	8000584 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000760:	f000 fe14 	bl	800138c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000764:	f000 fa94 	bl	8000c90 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000768:	f000 fad0 	bl	8000d0c <MX_SPI2_Init>
  MX_SPI3_Init();
 800076c:	f000 fb0c 	bl	8000d88 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000770:	f000 fcda 	bl	8001128 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000774:	f000 fd2c 	bl	80011d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  int16_t encoderData_1 = 99;
 8000778:	2363      	movs	r3, #99	; 0x63
 800077a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  int16_t encoderTurns_1 = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	857b      	strh	r3, [r7, #42]	; 0x2a

  int16_t encoderData_2 = 99;
 8000780:	2363      	movs	r3, #99	; 0x63
 8000782:	853b      	strh	r3, [r7, #40]	; 0x28
  int16_t encoderTurns_2 = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	84fb      	strh	r3, [r7, #38]	; 0x26

  int16_t encoderData_3 = 99;
 8000788:	2363      	movs	r3, #99	; 0x63
 800078a:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t encoderTurns_3 = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	847b      	strh	r3, [r7, #34]	; 0x22


  // TODO: Initialize other PWM modules to expand functionality to
  // different motors with different pins
  HAL_TIM_Base_Start(&htim1);
 8000790:	48ad      	ldr	r0, [pc, #692]	; (8000a48 <main+0x2fc>)
 8000792:	f003 f811 	bl	80037b8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000796:	2104      	movs	r1, #4
 8000798:	48ac      	ldr	r0, [pc, #688]	; (8000a4c <main+0x300>)
 800079a:	f003 f8bb 	bl	8003914 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800079e:	4bab      	ldr	r3, [pc, #684]	; (8000a4c <main+0x300>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2200      	movs	r2, #0
 80007a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  resetAMT22(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 80007a6:	4ba8      	ldr	r3, [pc, #672]	; (8000a48 <main+0x2fc>)
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	49a9      	ldr	r1, [pc, #676]	; (8000a50 <main+0x304>)
 80007ac:	48a9      	ldr	r0, [pc, #676]	; (8000a54 <main+0x308>)
 80007ae:	f004 fde5 	bl	800537c <resetAMT22>

  // Reverse direction
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	48a8      	ldr	r0, [pc, #672]	; (8000a58 <main+0x30c>)
 80007b8:	f001 f99c 	bl	8001af4 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t cycle = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  setZeroSPI(&hspi1, GPIOC, GPIO_PIN_7, &htim1);
 80007c2:	4ba1      	ldr	r3, [pc, #644]	; (8000a48 <main+0x2fc>)
 80007c4:	2280      	movs	r2, #128	; 0x80
 80007c6:	49a2      	ldr	r1, [pc, #648]	; (8000a50 <main+0x304>)
 80007c8:	48a2      	ldr	r0, [pc, #648]	; (8000a54 <main+0x308>)
 80007ca:	f004 fdaf 	bl	800532c <setZeroSPI>

  // Meant to sweep through speeds and print out the position and turn counter. You can go to
  // Device Manager > COM Ports to find the Nucleo, then open PuTTY or any other terminal emulator
  // you like, then set the Port = Nucleo's port and Baud rate = 115200.

  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 100);
 80007ce:	4b9f      	ldr	r3, [pc, #636]	; (8000a4c <main+0x300>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2264      	movs	r2, #100	; 0x64
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
  int16_t pos[2];

  while (1)
  {
	  while((cycle < 100))
 80007d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007da:	2b63      	cmp	r3, #99	; 0x63
 80007dc:	f200 80ed 	bhi.w	80009ba <main+0x26e>
	  {
		  // PWM cycle set function: 0-100 maps to 0-100% duty cycle
		  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, cycle);

		  getTurnCounterSPI(pos, &hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 80007e0:	f107 001c 	add.w	r0, r7, #28
 80007e4:	4b98      	ldr	r3, [pc, #608]	; (8000a48 <main+0x2fc>)
 80007e6:	9301      	str	r3, [sp, #4]
 80007e8:	230c      	movs	r3, #12
 80007ea:	9300      	str	r3, [sp, #0]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	4a98      	ldr	r2, [pc, #608]	; (8000a50 <main+0x304>)
 80007f0:	4998      	ldr	r1, [pc, #608]	; (8000a54 <main+0x308>)
 80007f2:	f004 fc7c 	bl	80050ee <getTurnCounterSPI>

		  // TODO: Fix bug with the turn counter, try to find form posts because datasheet
		  // is ass
		  encoderTurns_1 = pos[1];
 80007f6:	8bfb      	ldrh	r3, [r7, #30]
 80007f8:	857b      	strh	r3, [r7, #42]	; 0x2a
		  // encoderData_1 = pos[0];
		  // encoderTurns_1 = pos[1];
		  // encoderData_2 = getPositionSPI(&hspi2, GPIOB, GPIO_PIN_6, 12, &htim1);
		  // encoderData_3 = getPositionSPI(&hspi3, GPIOA, GPIO_PIN_8, 12, &htim1);

		  printf("encoder 1 gives %d\r\n", pos[0]);
 80007fa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80007fe:	4619      	mov	r1, r3
 8000800:	4896      	ldr	r0, [pc, #600]	; (8000a5c <main+0x310>)
 8000802:	f7ff ff75 	bl	80006f0 <printf>
		  printf("encoder 1 turns %d\r\n", encoderTurns_1);
 8000806:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800080a:	4619      	mov	r1, r3
 800080c:	4894      	ldr	r0, [pc, #592]	; (8000a60 <main+0x314>)
 800080e:	f7ff ff6f 	bl	80006f0 <printf>
//		  printf("encoderData_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
//				  BYTE_TO_BINARY(encoderData_1>>24), BYTE_TO_BINARY(encoderData_1>>16), BYTE_TO_BINARY(encoderData_1>>8), BYTE_TO_BINARY(encoderData_1));
//
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000812:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000816:	121b      	asrs	r3, r3, #8
 8000818:	b21b      	sxth	r3, r3
 800081a:	b29b      	uxth	r3, r3
 800081c:	f003 0380 	and.w	r3, r3, #128	; 0x80
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000820:	2b00      	cmp	r3, #0
 8000822:	d002      	beq.n	800082a <main+0xde>
 8000824:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000828:	e001      	b.n	800082e <main+0xe2>
 800082a:	f04f 0c30 	mov.w	ip, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 800082e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000832:	121b      	asrs	r3, r3, #8
 8000834:	b21b      	sxth	r3, r3
 8000836:	b29b      	uxth	r3, r3
 8000838:	f003 0340 	and.w	r3, r3, #64	; 0x40
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <main+0xfa>
 8000840:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8000844:	e001      	b.n	800084a <main+0xfe>
 8000846:	f04f 0e30 	mov.w	lr, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 800084a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800084e:	121b      	asrs	r3, r3, #8
 8000850:	b21b      	sxth	r3, r3
 8000852:	b29b      	uxth	r3, r3
 8000854:	f003 0320 	and.w	r3, r3, #32
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000858:	2b00      	cmp	r3, #0
 800085a:	d002      	beq.n	8000862 <main+0x116>
 800085c:	f04f 0831 	mov.w	r8, #49	; 0x31
 8000860:	e001      	b.n	8000866 <main+0x11a>
 8000862:	f04f 0830 	mov.w	r8, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000866:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800086a:	121b      	asrs	r3, r3, #8
 800086c:	b21b      	sxth	r3, r3
 800086e:	b29b      	uxth	r3, r3
 8000870:	f003 0310 	and.w	r3, r3, #16
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <main+0x130>
 8000878:	2031      	movs	r0, #49	; 0x31
 800087a:	e000      	b.n	800087e <main+0x132>
 800087c:	2030      	movs	r0, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 800087e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000882:	121b      	asrs	r3, r3, #8
 8000884:	b21b      	sxth	r3, r3
 8000886:	b29b      	uxth	r3, r3
 8000888:	f003 0308 	and.w	r3, r3, #8
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <main+0x148>
 8000890:	2431      	movs	r4, #49	; 0x31
 8000892:	e000      	b.n	8000896 <main+0x14a>
 8000894:	2430      	movs	r4, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000896:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800089a:	121b      	asrs	r3, r3, #8
 800089c:	b21b      	sxth	r3, r3
 800089e:	b29b      	uxth	r3, r3
 80008a0:	f003 0304 	and.w	r3, r3, #4
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <main+0x160>
 80008a8:	2531      	movs	r5, #49	; 0x31
 80008aa:	e000      	b.n	80008ae <main+0x162>
 80008ac:	2530      	movs	r5, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 80008ae:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80008b2:	121b      	asrs	r3, r3, #8
 80008b4:	b21b      	sxth	r3, r3
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	f003 0302 	and.w	r3, r3, #2
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <main+0x178>
 80008c0:	2631      	movs	r6, #49	; 0x31
 80008c2:	e000      	b.n	80008c6 <main+0x17a>
 80008c4:	2630      	movs	r6, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 80008c6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80008ca:	121b      	asrs	r3, r3, #8
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <main+0x192>
 80008d8:	2331      	movs	r3, #49	; 0x31
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e001      	b.n	80008e2 <main+0x196>
 80008de:	2330      	movs	r3, #48	; 0x30
 80008e0:	617b      	str	r3, [r7, #20]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 80008e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d002      	beq.n	80008f2 <main+0x1a6>
 80008ec:	2331      	movs	r3, #49	; 0x31
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	e001      	b.n	80008f6 <main+0x1aa>
 80008f2:	2330      	movs	r3, #48	; 0x30
 80008f4:	613b      	str	r3, [r7, #16]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 80008f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80008f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <main+0x1ba>
 8000900:	2331      	movs	r3, #49	; 0x31
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	e001      	b.n	800090a <main+0x1be>
 8000906:	2330      	movs	r3, #48	; 0x30
 8000908:	60fb      	str	r3, [r7, #12]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 800090a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800090c:	f003 0320 	and.w	r3, r3, #32
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000910:	2b00      	cmp	r3, #0
 8000912:	d002      	beq.n	800091a <main+0x1ce>
 8000914:	2331      	movs	r3, #49	; 0x31
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	e001      	b.n	800091e <main+0x1d2>
 800091a:	2330      	movs	r3, #48	; 0x30
 800091c:	60bb      	str	r3, [r7, #8]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 800091e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000920:	f003 0310 	and.w	r3, r3, #16
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000924:	2b00      	cmp	r3, #0
 8000926:	d002      	beq.n	800092e <main+0x1e2>
 8000928:	2331      	movs	r3, #49	; 0x31
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	e001      	b.n	8000932 <main+0x1e6>
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	607b      	str	r3, [r7, #4]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000932:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000934:	f003 0308 	and.w	r3, r3, #8
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000938:	2b00      	cmp	r3, #0
 800093a:	d002      	beq.n	8000942 <main+0x1f6>
 800093c:	2331      	movs	r3, #49	; 0x31
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	e001      	b.n	8000946 <main+0x1fa>
 8000942:	2330      	movs	r3, #48	; 0x30
 8000944:	603b      	str	r3, [r7, #0]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000946:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000948:	f003 0304 	and.w	r3, r3, #4
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <main+0x208>
 8000950:	2131      	movs	r1, #49	; 0x31
 8000952:	e000      	b.n	8000956 <main+0x20a>
 8000954:	2130      	movs	r1, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000958:	f003 0302 	and.w	r3, r3, #2
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <main+0x218>
 8000960:	2231      	movs	r2, #49	; 0x31
 8000962:	e000      	b.n	8000966 <main+0x21a>
 8000964:	2230      	movs	r2, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000968:	f003 0301 	and.w	r3, r3, #1
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <main+0x228>
 8000970:	2331      	movs	r3, #49	; 0x31
 8000972:	e000      	b.n	8000976 <main+0x22a>
 8000974:	2330      	movs	r3, #48	; 0x30
 8000976:	930c      	str	r3, [sp, #48]	; 0x30
 8000978:	920b      	str	r2, [sp, #44]	; 0x2c
 800097a:	910a      	str	r1, [sp, #40]	; 0x28
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	9309      	str	r3, [sp, #36]	; 0x24
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	9308      	str	r3, [sp, #32]
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	9307      	str	r3, [sp, #28]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	9306      	str	r3, [sp, #24]
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	9305      	str	r3, [sp, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	9304      	str	r3, [sp, #16]
 8000994:	9603      	str	r6, [sp, #12]
 8000996:	9502      	str	r5, [sp, #8]
 8000998:	9401      	str	r4, [sp, #4]
 800099a:	9000      	str	r0, [sp, #0]
 800099c:	4643      	mov	r3, r8
 800099e:	4672      	mov	r2, lr
 80009a0:	4661      	mov	r1, ip
 80009a2:	4830      	ldr	r0, [pc, #192]	; (8000a64 <main+0x318>)
 80009a4:	f7ff fea4 	bl	80006f0 <printf>
		  cycle--;
 80009a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009ac:	3b01      	subs	r3, #1
 80009ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  HAL_Delay(100);
 80009b2:	2064      	movs	r0, #100	; 0x64
 80009b4:	f000 fe1a 	bl	80015ec <HAL_Delay>
	  while((cycle < 100))
 80009b8:	e70d      	b.n	80007d6 <main+0x8a>
	  }

	  while(cycle > 0)
 80009ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f43f af09 	beq.w	80007d6 <main+0x8a>
	  {
		  // __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, cycle);
		  getTurnCounterSPI(pos, &hspi1, GPIOC, GPIO_PIN_7, 12, &htim1);
 80009c4:	f107 001c 	add.w	r0, r7, #28
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <main+0x2fc>)
 80009ca:	9301      	str	r3, [sp, #4]
 80009cc:	230c      	movs	r3, #12
 80009ce:	9300      	str	r3, [sp, #0]
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <main+0x304>)
 80009d4:	491f      	ldr	r1, [pc, #124]	; (8000a54 <main+0x308>)
 80009d6:	f004 fb8a 	bl	80050ee <getTurnCounterSPI>

		  // TODO: Fix bug with the turn counter, try to find form posts because datasheet
		  // is ass
		  encoderTurns_1 = pos[1];
 80009da:	8bfb      	ldrh	r3, [r7, #30]
 80009dc:	857b      	strh	r3, [r7, #42]	; 0x2a
		  // encoderData_1 = pos[0];
		  // encoderTurns_1 = pos[1];
		  // encoderData_2 = getPositionSPI(&hspi2, GPIOB, GPIO_PIN_6, 12, &htim1);
		  // encoderData_3 = getPositionSPI(&hspi3, GPIOA, GPIO_PIN_8, 12, &htim1);

		  printf("encoder 1 gives %d\r\n", pos[0]);
 80009de:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80009e2:	4619      	mov	r1, r3
 80009e4:	481d      	ldr	r0, [pc, #116]	; (8000a5c <main+0x310>)
 80009e6:	f7ff fe83 	bl	80006f0 <printf>
		  printf("encoder 1 turns %d\r\n", encoderTurns_1);
 80009ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80009ee:	4619      	mov	r1, r3
 80009f0:	481b      	ldr	r0, [pc, #108]	; (8000a60 <main+0x314>)
 80009f2:	f7ff fe7d 	bl	80006f0 <printf>
//		  printf("encoderData_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
//				  BYTE_TO_BINARY(encoderData_1>>24), BYTE_TO_BINARY(encoderData_1>>16), BYTE_TO_BINARY(encoderData_1>>8), BYTE_TO_BINARY(encoderData_1));
//
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 80009f6:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80009fa:	121b      	asrs	r3, r3, #8
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <main+0x2c2>
 8000a08:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8000a0c:	e001      	b.n	8000a12 <main+0x2c6>
 8000a0e:	f04f 0c30 	mov.w	ip, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000a12:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a16:	121b      	asrs	r3, r3, #8
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d002      	beq.n	8000a2a <main+0x2de>
 8000a24:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8000a28:	e001      	b.n	8000a2e <main+0x2e2>
 8000a2a:	f04f 0e30 	mov.w	lr, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000a2e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a32:	121b      	asrs	r3, r3, #8
 8000a34:	b21b      	sxth	r3, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	f003 0320 	and.w	r3, r3, #32
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d013      	beq.n	8000a68 <main+0x31c>
 8000a40:	f04f 0831 	mov.w	r8, #49	; 0x31
 8000a44:	e012      	b.n	8000a6c <main+0x320>
 8000a46:	bf00      	nop
 8000a48:	200001bc 	.word	0x200001bc
 8000a4c:	20000208 	.word	0x20000208
 8000a50:	48000800 	.word	0x48000800
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	48000400 	.word	0x48000400
 8000a5c:	0800676c 	.word	0x0800676c
 8000a60:	08006784 	.word	0x08006784
 8000a64:	0800679c 	.word	0x0800679c
 8000a68:	f04f 0830 	mov.w	r8, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000a6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a70:	121b      	asrs	r3, r3, #8
 8000a72:	b21b      	sxth	r3, r3
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	f003 0310 	and.w	r3, r3, #16
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <main+0x336>
 8000a7e:	2031      	movs	r0, #49	; 0x31
 8000a80:	e000      	b.n	8000a84 <main+0x338>
 8000a82:	2030      	movs	r0, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000a84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000a88:	121b      	asrs	r3, r3, #8
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	f003 0308 	and.w	r3, r3, #8
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <main+0x34e>
 8000a96:	2431      	movs	r4, #49	; 0x31
 8000a98:	e000      	b.n	8000a9c <main+0x350>
 8000a9a:	2430      	movs	r4, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000a9c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000aa0:	121b      	asrs	r3, r3, #8
 8000aa2:	b21b      	sxth	r3, r3
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	f003 0304 	and.w	r3, r3, #4
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <main+0x366>
 8000aae:	2531      	movs	r5, #49	; 0x31
 8000ab0:	e000      	b.n	8000ab4 <main+0x368>
 8000ab2:	2530      	movs	r5, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000ab4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000ab8:	121b      	asrs	r3, r3, #8
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f003 0302 	and.w	r3, r3, #2
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <main+0x37e>
 8000ac6:	2631      	movs	r6, #49	; 0x31
 8000ac8:	e000      	b.n	8000acc <main+0x380>
 8000aca:	2630      	movs	r6, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000acc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8000ad0:	121b      	asrs	r3, r3, #8
 8000ad2:	b21b      	sxth	r3, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <main+0x398>
 8000ade:	2331      	movs	r3, #49	; 0x31
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e001      	b.n	8000ae8 <main+0x39c>
 8000ae4:	2330      	movs	r3, #48	; 0x30
 8000ae6:	617b      	str	r3, [r7, #20]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000ae8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <main+0x3ac>
 8000af2:	2331      	movs	r3, #49	; 0x31
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	e001      	b.n	8000afc <main+0x3b0>
 8000af8:	2330      	movs	r3, #48	; 0x30
 8000afa:	613b      	str	r3, [r7, #16]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000afc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <main+0x3c0>
 8000b06:	2331      	movs	r3, #49	; 0x31
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	e001      	b.n	8000b10 <main+0x3c4>
 8000b0c:	2330      	movs	r3, #48	; 0x30
 8000b0e:	60fb      	str	r3, [r7, #12]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b12:	f003 0320 	and.w	r3, r3, #32
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <main+0x3d4>
 8000b1a:	2331      	movs	r3, #49	; 0x31
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	e001      	b.n	8000b24 <main+0x3d8>
 8000b20:	2330      	movs	r3, #48	; 0x30
 8000b22:	60bb      	str	r3, [r7, #8]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000b24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b26:	f003 0310 	and.w	r3, r3, #16
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d002      	beq.n	8000b34 <main+0x3e8>
 8000b2e:	2331      	movs	r3, #49	; 0x31
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	e001      	b.n	8000b38 <main+0x3ec>
 8000b34:	2330      	movs	r3, #48	; 0x30
 8000b36:	607b      	str	r3, [r7, #4]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000b38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b3a:	f003 0308 	and.w	r3, r3, #8
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <main+0x3fc>
 8000b42:	2331      	movs	r3, #49	; 0x31
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	e001      	b.n	8000b4c <main+0x400>
 8000b48:	2330      	movs	r3, #48	; 0x30
 8000b4a:	603b      	str	r3, [r7, #0]
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000b4c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b4e:	f003 0304 	and.w	r3, r3, #4
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <main+0x40e>
 8000b56:	2131      	movs	r1, #49	; 0x31
 8000b58:	e000      	b.n	8000b5c <main+0x410>
 8000b5a:	2130      	movs	r1, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000b5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b5e:	f003 0302 	and.w	r3, r3, #2
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <main+0x41e>
 8000b66:	2231      	movs	r2, #49	; 0x31
 8000b68:	e000      	b.n	8000b6c <main+0x420>
 8000b6a:	2230      	movs	r2, #48	; 0x30
				  BYTE_TO_BINARY(encoderTurns_1>>8), BYTE_TO_BINARY(encoderTurns_1));
 8000b6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000b6e:	f003 0301 	and.w	r3, r3, #1
		  printf("encoderTurns_1: "BYTE_TO_BINARY_PATTERN" "BYTE_TO_BINARY_PATTERN"\r\n",
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <main+0x42e>
 8000b76:	2331      	movs	r3, #49	; 0x31
 8000b78:	e000      	b.n	8000b7c <main+0x430>
 8000b7a:	2330      	movs	r3, #48	; 0x30
 8000b7c:	930c      	str	r3, [sp, #48]	; 0x30
 8000b7e:	920b      	str	r2, [sp, #44]	; 0x2c
 8000b80:	910a      	str	r1, [sp, #40]	; 0x28
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	9309      	str	r3, [sp, #36]	; 0x24
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	9308      	str	r3, [sp, #32]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	9307      	str	r3, [sp, #28]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	9306      	str	r3, [sp, #24]
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	9305      	str	r3, [sp, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	9304      	str	r3, [sp, #16]
 8000b9a:	9603      	str	r6, [sp, #12]
 8000b9c:	9502      	str	r5, [sp, #8]
 8000b9e:	9401      	str	r4, [sp, #4]
 8000ba0:	9000      	str	r0, [sp, #0]
 8000ba2:	4643      	mov	r3, r8
 8000ba4:	4672      	mov	r2, lr
 8000ba6:	4661      	mov	r1, ip
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <main+0x474>)
 8000baa:	f7ff fda1 	bl	80006f0 <printf>
		  cycle--;
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  HAL_Delay(100);
 8000bb8:	2064      	movs	r0, #100	; 0x64
 8000bba:	f000 fd17 	bl	80015ec <HAL_Delay>
	  while(cycle > 0)
 8000bbe:	e6fc      	b.n	80009ba <main+0x26e>
 8000bc0:	0800679c 	.word	0x0800679c

08000bc4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b096      	sub	sp, #88	; 0x58
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	2244      	movs	r2, #68	; 0x44
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f004 fc3e 	bl	8005454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	463b      	mov	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000be6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bea:	f000 ffa9 	bl	8001b40 <HAL_PWREx_ControlVoltageScaling>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	bf14      	ite	ne
 8000bf4:	2301      	movne	r3, #1
 8000bf6:	2300      	moveq	r3, #0
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8000bfe:	f000 f841 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c02:	2302      	movs	r3, #2
 8000c04:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0c:	2310      	movs	r3, #16
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c10:	2302      	movs	r3, #2
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c1c:	230a      	movs	r3, #10
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c20:	2307      	movs	r3, #7
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 ffdb 	bl	8001bec <HAL_RCC_OscConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	bf14      	ite	ne
 8000c3c:	2301      	movne	r3, #1
 8000c3e:	2300      	moveq	r3, #0
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8000c46:	f000 f81d 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c5e:	463b      	mov	r3, r7
 8000c60:	2104      	movs	r1, #4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fbd6 	bl	8002414 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	bf14      	ite	ne
 8000c6e:	2301      	movne	r3, #1
 8000c70:	2300      	moveq	r3, #0
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8000c78:	f000 f804 	bl	8000c84 <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3758      	adds	r7, #88	; 0x58
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <Error_Handler+0x8>
	...

08000c90 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_SPI1_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000c9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000caa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cbc:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cde:	2207      	movs	r2, #7
 8000ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cea:	2208      	movs	r2, #8
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_SPI1_Init+0x74>)
 8000cf0:	f002 f8f0 	bl	8002ed4 <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f7ff ffc3 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000008c 	.word	0x2000008c
 8000d08:	40013000 	.word	0x40013000

08000d0c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <MX_SPI2_Init+0x78>)
 8000d14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d16:	4b1a      	ldr	r3, [pc, #104]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d24:	4b16      	ldr	r3, [pc, #88]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d38:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d42:	2220      	movs	r2, #32
 8000d44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_SPI2_Init+0x74>)
 8000d6c:	f002 f8b2 	bl	8002ed4 <HAL_SPI_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000d76:	f7ff ff85 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000f0 	.word	0x200000f0
 8000d84:	40003800 	.word	0x40003800

08000d88 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d8c:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	; (8000e00 <MX_SPI3_Init+0x78>)
 8000d90:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000d94:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d98:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d9a:	4b18      	ldr	r3, [pc, #96]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000da2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000da6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000de2:	2208      	movs	r2, #8
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_SPI3_Init+0x74>)
 8000de8:	f002 f874 	bl	8002ed4 <HAL_SPI_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000df2:	f7ff ff47 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000154 	.word	0x20000154
 8000e00:	40003c00 	.word	0x40003c00

08000e04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08e      	sub	sp, #56	; 0x38
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a47      	ldr	r2, [pc, #284]	; (8000f40 <HAL_SPI_MspInit+0x13c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d12a      	bne.n	8000e7c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	4a46      	ldr	r2, [pc, #280]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e30:	6613      	str	r3, [r2, #96]	; 0x60
 8000e32:	4b44      	ldr	r3, [pc, #272]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3a:	623b      	str	r3, [r7, #32]
 8000e3c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b41      	ldr	r3, [pc, #260]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a40      	ldr	r2, [pc, #256]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b3e      	ldr	r3, [pc, #248]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000e56:	f641 0302 	movw	r3, #6146	; 0x1802
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e68:	2305      	movs	r3, #5
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e76:	f000 fcc3 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e7a:	e05c      	b.n	8000f36 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a31      	ldr	r2, [pc, #196]	; (8000f48 <HAL_SPI_MspInit+0x144>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d129      	bne.n	8000eda <HAL_SPI_MspInit+0xd6>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e86:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6593      	str	r3, [r2, #88]	; 0x58
 8000e92:	4b2c      	ldr	r3, [pc, #176]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	61bb      	str	r3, [r7, #24]
 8000e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a28      	ldr	r2, [pc, #160]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000eb6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481e      	ldr	r0, [pc, #120]	; (8000f4c <HAL_SPI_MspInit+0x148>)
 8000ed4:	f000 fc94 	bl	8001800 <HAL_GPIO_Init>
}
 8000ed8:	e02d      	b.n	8000f36 <HAL_SPI_MspInit+0x132>
  else if(spiHandle->Instance==SPI3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <HAL_SPI_MspInit+0x14c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d128      	bne.n	8000f36 <HAL_SPI_MspInit+0x132>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee8:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000eea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eee:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f00:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_SPI_MspInit+0x140>)
 8000f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000f14:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f26:	2306      	movs	r3, #6
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4808      	ldr	r0, [pc, #32]	; (8000f54 <HAL_SPI_MspInit+0x150>)
 8000f32:	f000 fc65 	bl	8001800 <HAL_GPIO_Init>
}
 8000f36:	bf00      	nop
 8000f38:	3738      	adds	r7, #56	; 0x38
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	40013000 	.word	0x40013000
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40003800 	.word	0x40003800
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	40003c00 	.word	0x40003c00
 8000f54:	48000800 	.word	0x48000800

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <HAL_MspInit+0x44>)
 8000f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <HAL_MspInit+0x44>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <HAL_MspInit+0x44>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <HAL_MspInit+0x44>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <HAL_MspInit+0x44>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_MspInit+0x44>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <NMI_Handler+0x4>

08000fa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <HardFault_Handler+0x4>

08000fac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <MemManage_Handler+0x4>

08000fb2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fb2:	b480      	push	{r7}
 8000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <BusFault_Handler+0x4>

08000fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fbc:	e7fe      	b.n	8000fbc <UsageFault_Handler+0x4>

08000fbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fec:	f000 fade 	bl	80015ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e00a      	b.n	800101c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001006:	f3af 8000 	nop.w
 800100a:	4601      	mov	r1, r0
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	60ba      	str	r2, [r7, #8]
 8001012:	b2ca      	uxtb	r2, r1
 8001014:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbf0      	blt.n	8001006 <_read+0x12>
  }

  return len;
 8001024:	687b      	ldr	r3, [r7, #4]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	e009      	b.n	8001054 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	60ba      	str	r2, [r7, #8]
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3301      	adds	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	429a      	cmp	r2, r3
 800105a:	dbf1      	blt.n	8001040 <_write+0x12>
  }
  return len;
 800105c:	687b      	ldr	r3, [r7, #4]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3718      	adds	r7, #24
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <_close>:

int _close(int file)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800106e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr

0800107e <_lseek>:
  (void)file;
  return 1;
}

int _lseek(int file, int ptr, int dir)
{
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	60f8      	str	r0, [r7, #12]
 8001086:	60b9      	str	r1, [r7, #8]
 8001088:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <_sbrk+0x5c>)
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <_sbrk+0x60>)
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ac:	4b13      	ldr	r3, [pc, #76]	; (80010fc <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <_sbrk+0x64>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <_sbrk+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d207      	bcs.n	80010d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c8:	f004 f99a 	bl	8005400 <__errno>
 80010cc:	4603      	mov	r3, r0
 80010ce:	220c      	movs	r2, #12
 80010d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	e009      	b.n	80010ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <_sbrk+0x64>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010de:	4b07      	ldr	r3, [pc, #28]	; (80010fc <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	4a05      	ldr	r2, [pc, #20]	; (80010fc <_sbrk+0x64>)
 80010e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20010000 	.word	0x20010000
 80010f8:	00000400 	.word	0x00000400
 80010fc:	200001b8 	.word	0x200001b8
 8001100:	200002f0 	.word	0x200002f0

08001104 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <SystemInit+0x20>)
 800110a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <SystemInit+0x20>)
 8001110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0310 	add.w	r3, r7, #16
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001148:	4a20      	ldr	r2, [pc, #128]	; (80011cc <MX_TIM1_Init+0xa4>)
 800114a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800114e:	224f      	movs	r2, #79	; 0x4f
 8001150:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001152:	4b1d      	ldr	r3, [pc, #116]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800115a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800115e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001166:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <MX_TIM1_Init+0xa0>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001172:	4815      	ldr	r0, [pc, #84]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001174:	f002 fac8 	bl	8003708 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800117e:	f7ff fd81 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0310 	add.w	r3, r7, #16
 800118c:	4619      	mov	r1, r3
 800118e:	480e      	ldr	r0, [pc, #56]	; (80011c8 <MX_TIM1_Init+0xa0>)
 8001190:	f002 fdb2 	bl	8003cf8 <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800119a:	f7ff fd73 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	4619      	mov	r1, r3
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <MX_TIM1_Init+0xa0>)
 80011b0:	f003 fa0e 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ba:	f7ff fd63 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200001bc 	.word	0x200001bc
 80011cc:	40012c00 	.word	0x40012c00

080011d0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f0:	463b      	mov	r3, r7
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
 80011fc:	611a      	str	r2, [r3, #16]
 80011fe:	615a      	str	r2, [r3, #20]
 8001200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001202:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <MX_TIM2_Init+0xe8>)
 800120c:	224f      	movs	r2, #79	; 0x4f
 800120e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001216:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001218:	2263      	movs	r2, #99	; 0x63
 800121a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <MX_TIM2_Init+0xe8>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001228:	4823      	ldr	r0, [pc, #140]	; (80012b8 <MX_TIM2_Init+0xe8>)
 800122a:	f002 fa6d 	bl	8003708 <HAL_TIM_Base_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001234:	f7ff fd26 	bl	8000c84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800123e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001242:	4619      	mov	r1, r3
 8001244:	481c      	ldr	r0, [pc, #112]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001246:	f002 fd57 	bl	8003cf8 <HAL_TIM_ConfigClockSource>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001250:	f7ff fd18 	bl	8000c84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001254:	4818      	ldr	r0, [pc, #96]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001256:	f002 fafb 	bl	8003850 <HAL_TIM_PWM_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001260:	f7ff fd10 	bl	8000c84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001268:	2300      	movs	r3, #0
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	4619      	mov	r1, r3
 8001272:	4811      	ldr	r0, [pc, #68]	; (80012b8 <MX_TIM2_Init+0xe8>)
 8001274:	f003 f9ac 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800127e:	f7ff fd01 	bl	8000c84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001282:	2360      	movs	r3, #96	; 0x60
 8001284:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001292:	463b      	mov	r3, r7
 8001294:	2204      	movs	r2, #4
 8001296:	4619      	mov	r1, r3
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <MX_TIM2_Init+0xe8>)
 800129a:	f002 fc19 	bl	8003ad0 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80012a4:	f7ff fcee 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <MX_TIM2_Init+0xe8>)
 80012aa:	f000 f839 	bl	8001320 <HAL_TIM_MspPostInit>

}
 80012ae:	bf00      	nop
 80012b0:	3738      	adds	r7, #56	; 0x38
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000208 	.word	0x20000208

080012bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a13      	ldr	r2, [pc, #76]	; (8001318 <HAL_TIM_Base_MspInit+0x5c>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d10c      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <HAL_TIM_Base_MspInit+0x60>)
 80012d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <HAL_TIM_Base_MspInit+0x60>)
 80012d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012d8:	6613      	str	r3, [r2, #96]	; 0x60
 80012da:	4b10      	ldr	r3, [pc, #64]	; (800131c <HAL_TIM_Base_MspInit+0x60>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80012e6:	e010      	b.n	800130a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012f0:	d10b      	bne.n	800130a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012f2:	4b0a      	ldr	r3, [pc, #40]	; (800131c <HAL_TIM_Base_MspInit+0x60>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4a09      	ldr	r2, [pc, #36]	; (800131c <HAL_TIM_Base_MspInit+0x60>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4b07      	ldr	r3, [pc, #28]	; (800131c <HAL_TIM_Base_MspInit+0x60>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40012c00 	.word	0x40012c00
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b088      	sub	sp, #32
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001340:	d11b      	bne.n	800137a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <HAL_TIM_MspPostInit+0x64>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <HAL_TIM_MspPostInit+0x64>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <HAL_TIM_MspPostInit+0x64>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = CYTRON_PWM_1_Pin;
 800135a:	2308      	movs	r3, #8
 800135c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800136a:	2301      	movs	r3, #1
 800136c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CYTRON_PWM_1_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 030c 	add.w	r3, r7, #12
 8001372:	4619      	mov	r1, r3
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <HAL_TIM_MspPostInit+0x68>)
 8001376:	f000 fa43 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000
 8001388:	48000400 	.word	0x48000400

0800138c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001392:	4a15      	ldr	r2, [pc, #84]	; (80013e8 <MX_USART2_UART_Init+0x5c>)
 8001394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 8001398:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800139c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b2:	220c      	movs	r2, #12
 80013b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013be:	2200      	movs	r2, #0
 80013c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c8:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_USART2_UART_Init+0x58>)
 80013d0:	f003 f964 	bl	800469c <HAL_UART_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013da:	f7ff fc53 	bl	8000c84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000254 	.word	0x20000254
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0a2      	sub	sp, #136	; 0x88
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2260      	movs	r2, #96	; 0x60
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f004 f821 	bl	8005454 <memset>
  if(uartHandle->Instance==USART2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a20      	ldr	r2, [pc, #128]	; (8001498 <HAL_UART_MspInit+0xac>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d138      	bne.n	800148e <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fa17 	bl	800285c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff fc26 	bl	8000c84 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001438:	4b18      	ldr	r3, [pc, #96]	; (800149c <HAL_UART_MspInit+0xb0>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143c:	4a17      	ldr	r2, [pc, #92]	; (800149c <HAL_UART_MspInit+0xb0>)
 800143e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001442:	6593      	str	r3, [r2, #88]	; 0x58
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <HAL_UART_MspInit+0xb0>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001448:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_UART_MspInit+0xb0>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	4a11      	ldr	r2, [pc, #68]	; (800149c <HAL_UART_MspInit+0xb0>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_UART_MspInit+0xb0>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001468:	230c      	movs	r3, #12
 800146a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001474:	2303      	movs	r3, #3
 8001476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147a:	2307      	movs	r3, #7
 800147c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148a:	f000 f9b9 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800148e:	bf00      	nop
 8001490:	3788      	adds	r7, #136	; 0x88
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40004400 	.word	0x40004400
 800149c:	40021000 	.word	0x40021000

080014a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014a4:	f7ff fe2e 	bl	8001104 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <LoopForever+0x6>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <LoopForever+0xe>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	; (80014ec <LoopForever+0x16>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ce:	f003 ff9d 	bl	800540c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014d2:	f7ff f93b 	bl	800074c <main>

080014d6 <LoopForever>:

LoopForever:
    b LoopForever
 80014d6:	e7fe      	b.n	80014d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014e4:	08006f5c 	.word	0x08006f5c
  ldr r2, =_sbss
 80014e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014ec:	200002ec 	.word	0x200002ec

080014f0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC1_IRQHandler>
	...

080014f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fe:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_Init+0x3c>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_Init+0x3c>)
 8001504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150a:	2003      	movs	r0, #3
 800150c:	f000 f944 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001510:	2000      	movs	r0, #0
 8001512:	f000 f80f 	bl	8001534 <HAL_InitTick>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	71fb      	strb	r3, [r7, #7]
 8001520:	e001      	b.n	8001526 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001522:	f7ff fd19 	bl	8000f58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001526:	79fb      	ldrb	r3, [r7, #7]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40022000 	.word	0x40022000

08001534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_InitTick+0x6c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <HAL_InitTick+0x70>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_InitTick+0x6c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4619      	mov	r1, r3
 8001552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001556:	fbb3 f3f1 	udiv	r3, r3, r1
 800155a:	fbb2 f3f3 	udiv	r3, r2, r3
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f941 	bl	80017e6 <HAL_SYSTICK_Config>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10f      	bne.n	800158a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b0f      	cmp	r3, #15
 800156e:	d809      	bhi.n	8001584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001570:	2200      	movs	r2, #0
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	f04f 30ff 	mov.w	r0, #4294967295
 8001578:	f000 f919 	bl	80017ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800157c:	4a0a      	ldr	r2, [pc, #40]	; (80015a8 <HAL_InitTick+0x74>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e007      	b.n	8001594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
 8001588:	e004      	b.n	8001594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	73fb      	strb	r3, [r7, #15]
 800158e:	e001      	b.n	8001594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000008 	.word	0x20000008
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_IncTick+0x20>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_IncTick+0x24>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4413      	add	r3, r2
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_IncTick+0x24>)
 80015be:	6013      	str	r3, [r2, #0]
}
 80015c0:	bf00      	nop
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008
 80015d0:	200002d8 	.word	0x200002d8

080015d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return uwTick;
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <HAL_GetTick+0x14>)
 80015da:	681b      	ldr	r3, [r3, #0]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	200002d8 	.word	0x200002d8

080015ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff ffee 	bl	80015d4 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001604:	d005      	beq.n	8001612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001606:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <HAL_Delay+0x44>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	4413      	add	r3, r2
 8001610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001612:	bf00      	nop
 8001614:	f7ff ffde 	bl	80015d4 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	429a      	cmp	r2, r3
 8001622:	d8f7      	bhi.n	8001614 <HAL_Delay+0x28>
  {
  }
}
 8001624:	bf00      	nop
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000008 	.word	0x20000008

08001634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001650:	4013      	ands	r3, r2
 8001652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800165c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001666:	4a04      	ldr	r2, [pc, #16]	; (8001678 <__NVIC_SetPriorityGrouping+0x44>)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60d3      	str	r3, [r2, #12]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <__NVIC_GetPriorityGrouping+0x18>)
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	0a1b      	lsrs	r3, r3, #8
 8001686:	f003 0307 	and.w	r3, r3, #7
}
 800168a:	4618      	mov	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	6039      	str	r1, [r7, #0]
 80016a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db0a      	blt.n	80016c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	490c      	ldr	r1, [pc, #48]	; (80016e4 <__NVIC_SetPriority+0x4c>)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	0112      	lsls	r2, r2, #4
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	440b      	add	r3, r1
 80016bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c0:	e00a      	b.n	80016d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	4908      	ldr	r1, [pc, #32]	; (80016e8 <__NVIC_SetPriority+0x50>)
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	3b04      	subs	r3, #4
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	b2d2      	uxtb	r2, r2
 80016d4:	440b      	add	r3, r1
 80016d6:	761a      	strb	r2, [r3, #24]
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	e000e100 	.word	0xe000e100
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	f1c3 0307 	rsb	r3, r3, #7
 8001706:	2b04      	cmp	r3, #4
 8001708:	bf28      	it	cs
 800170a:	2304      	movcs	r3, #4
 800170c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3304      	adds	r3, #4
 8001712:	2b06      	cmp	r3, #6
 8001714:	d902      	bls.n	800171c <NVIC_EncodePriority+0x30>
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3b03      	subs	r3, #3
 800171a:	e000      	b.n	800171e <NVIC_EncodePriority+0x32>
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43da      	mvns	r2, r3
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	401a      	ands	r2, r3
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001734:	f04f 31ff 	mov.w	r1, #4294967295
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	43d9      	mvns	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	4313      	orrs	r3, r2
         );
}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
	...

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff8e 	bl	8001698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff47 	bl	8001634 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff5c 	bl	800167c <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff8e 	bl	80016ec <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5d 	bl	8001698 <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffb0 	bl	8001754 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e154      	b.n	8001aba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8146 	beq.w	8001ab4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x40>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	6939      	ldr	r1, [r7, #16]
 800192e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0203 	and.w	r2, r3, #3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80a0 	beq.w	8001ab4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_GPIO_Init+0x2d8>)
 8001976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001978:	4a57      	ldr	r2, [pc, #348]	; (8001ad8 <HAL_GPIO_Init+0x2d8>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6613      	str	r3, [r2, #96]	; 0x60
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <HAL_GPIO_Init+0x2d8>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800198c:	4a53      	ldr	r2, [pc, #332]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b6:	d019      	beq.n	80019ec <HAL_GPIO_Init+0x1ec>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a49      	ldr	r2, [pc, #292]	; (8001ae0 <HAL_GPIO_Init+0x2e0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d013      	beq.n	80019e8 <HAL_GPIO_Init+0x1e8>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a48      	ldr	r2, [pc, #288]	; (8001ae4 <HAL_GPIO_Init+0x2e4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d00d      	beq.n	80019e4 <HAL_GPIO_Init+0x1e4>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_GPIO_Init+0x2e8>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d007      	beq.n	80019e0 <HAL_GPIO_Init+0x1e0>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a46      	ldr	r2, [pc, #280]	; (8001aec <HAL_GPIO_Init+0x2ec>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_GPIO_Init+0x1dc>
 80019d8:	2304      	movs	r3, #4
 80019da:	e008      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019dc:	2307      	movs	r3, #7
 80019de:	e006      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e0:	2303      	movs	r3, #3
 80019e2:	e004      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e002      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <HAL_GPIO_Init+0x1ee>
 80019ec:	2300      	movs	r3, #0
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	f002 0203 	and.w	r2, r2, #3
 80019f4:	0092      	lsls	r2, r2, #2
 80019f6:	4093      	lsls	r3, r2
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019fe:	4937      	ldr	r1, [pc, #220]	; (8001adc <HAL_GPIO_Init+0x2dc>)
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	089b      	lsrs	r3, r3, #2
 8001a04:	3302      	adds	r3, #2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a0c:	4b38      	ldr	r3, [pc, #224]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a30:	4a2f      	ldr	r2, [pc, #188]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a36:	4b2e      	ldr	r3, [pc, #184]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a5a:	4a25      	ldr	r2, [pc, #148]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a84:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_GPIO_Init+0x2f0>)
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f47f aea3 	bne.w	8001810 <HAL_GPIO_Init+0x10>
  }
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	371c      	adds	r7, #28
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	40010000 	.word	0x40010000
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000800 	.word	0x48000800
 8001ae8:	48000c00 	.word	0x48000c00
 8001aec:	48001000 	.word	0x48001000
 8001af0:	40010400 	.word	0x40010400

08001af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	807b      	strh	r3, [r7, #2]
 8001b00:	4613      	mov	r3, r2
 8001b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b04:	787b      	ldrb	r3, [r7, #1]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0a:	887a      	ldrh	r2, [r7, #2]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b28:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40007000 	.word	0x40007000

08001b40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4e:	d130      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b50:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5c:	d038      	beq.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b66:	4a1e      	ldr	r2, [pc, #120]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2232      	movs	r2, #50	; 0x32
 8001b74:	fb02 f303 	mul.w	r3, r2, r3
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9b      	lsrs	r3, r3, #18
 8001b80:	3301      	adds	r3, #1
 8001b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b84:	e002      	b.n	8001b8c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8c:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b8e:	695b      	ldr	r3, [r3, #20]
 8001b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b98:	d102      	bne.n	8001ba0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f2      	bne.n	8001b86 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba0:	4b0f      	ldr	r3, [pc, #60]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bac:	d110      	bne.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	e00f      	b.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d007      	beq.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc0:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc8:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3714      	adds	r7, #20
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40007000 	.word	0x40007000
 8001be4:	20000000 	.word	0x20000000
 8001be8:	431bde83 	.word	0x431bde83

08001bec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f000 bc02 	b.w	8002404 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c00:	4b96      	ldr	r3, [pc, #600]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 030c 	and.w	r3, r3, #12
 8001c08:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c0a:	4b94      	ldr	r3, [pc, #592]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f000 80e4 	beq.w	8001dea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d007      	beq.n	8001c38 <HAL_RCC_OscConfig+0x4c>
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	f040 808b 	bne.w	8001d46 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f040 8087 	bne.w	8001d46 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c38:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d005      	beq.n	8001c50 <HAL_RCC_OscConfig+0x64>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e3d9      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1a      	ldr	r2, [r3, #32]
 8001c54:	4b81      	ldr	r3, [pc, #516]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0308 	and.w	r3, r3, #8
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d004      	beq.n	8001c6a <HAL_RCC_OscConfig+0x7e>
 8001c60:	4b7e      	ldr	r3, [pc, #504]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c68:	e005      	b.n	8001c76 <HAL_RCC_OscConfig+0x8a>
 8001c6a:	4b7c      	ldr	r3, [pc, #496]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d223      	bcs.n	8001cc2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fd8c 	bl	800279c <RCC_SetFlashLatencyFromMSIRange>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e3ba      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c8e:	4b73      	ldr	r3, [pc, #460]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a72      	ldr	r2, [pc, #456]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	4b70      	ldr	r3, [pc, #448]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	496d      	ldr	r1, [pc, #436]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cac:	4b6b      	ldr	r3, [pc, #428]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	021b      	lsls	r3, r3, #8
 8001cba:	4968      	ldr	r1, [pc, #416]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
 8001cc0:	e025      	b.n	8001d0e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc2:	4b66      	ldr	r3, [pc, #408]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a65      	ldr	r2, [pc, #404]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b63      	ldr	r3, [pc, #396]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4960      	ldr	r1, [pc, #384]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	495b      	ldr	r1, [pc, #364]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fd4c 	bl	800279c <RCC_SetFlashLatencyFromMSIRange>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e37a      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d0e:	f000 fc81 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8001d12:	4602      	mov	r2, r0
 8001d14:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	4950      	ldr	r1, [pc, #320]	; (8001e60 <HAL_RCC_OscConfig+0x274>)
 8001d20:	5ccb      	ldrb	r3, [r1, r3]
 8001d22:	f003 031f 	and.w	r3, r3, #31
 8001d26:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2a:	4a4e      	ldr	r2, [pc, #312]	; (8001e64 <HAL_RCC_OscConfig+0x278>)
 8001d2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fbfe 	bl	8001534 <HAL_InitTick>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d052      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	e35e      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d032      	beq.n	8001db4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d4e:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fc3b 	bl	80015d4 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d62:	f7ff fc37 	bl	80015d4 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e347      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d74:	4b39      	ldr	r3, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d80:	4b36      	ldr	r3, [pc, #216]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a35      	ldr	r2, [pc, #212]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4930      	ldr	r1, [pc, #192]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d9e:	4b2f      	ldr	r3, [pc, #188]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	492b      	ldr	r1, [pc, #172]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	604b      	str	r3, [r1, #4]
 8001db2:	e01a      	b.n	8001dea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a28      	ldr	r2, [pc, #160]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fc08 	bl	80015d4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dc8:	f7ff fc04 	bl	80015d4 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e314      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dda:	4b20      	ldr	r3, [pc, #128]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f0      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x1dc>
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d073      	beq.n	8001ede <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_OscConfig+0x21c>
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d10e      	bne.n	8001e20 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d063      	beq.n	8001edc <HAL_RCC_OscConfig+0x2f0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d15f      	bne.n	8001edc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e2f1      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x24c>
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0b      	ldr	r2, [pc, #44]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e025      	b.n	8001e84 <HAL_RCC_OscConfig+0x298>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d114      	bne.n	8001e6c <HAL_RCC_OscConfig+0x280>
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a05      	ldr	r2, [pc, #20]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a02      	ldr	r2, [pc, #8]	; (8001e5c <HAL_RCC_OscConfig+0x270>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x298>
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	080067d0 	.word	0x080067d0
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000004 	.word	0x20000004
 8001e6c:	4ba0      	ldr	r3, [pc, #640]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a9f      	ldr	r2, [pc, #636]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	4b9d      	ldr	r3, [pc, #628]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a9c      	ldr	r2, [pc, #624]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d013      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fba2 	bl	80015d4 <HAL_GetTick>
 8001e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e92:	e008      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e94:	f7ff fb9e 	bl	80015d4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	2b64      	cmp	r3, #100	; 0x64
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e2ae      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea6:	4b92      	ldr	r3, [pc, #584]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0f0      	beq.n	8001e94 <HAL_RCC_OscConfig+0x2a8>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb8e 	bl	80015d4 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fb8a 	bl	80015d4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b64      	cmp	r3, #100	; 0x64
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e29a      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ece:	4b88      	ldr	r3, [pc, #544]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x2d0>
 8001eda:	e000      	b.n	8001ede <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d060      	beq.n	8001fac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x310>
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	2b0c      	cmp	r3, #12
 8001ef4:	d119      	bne.n	8001f2a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d116      	bne.n	8001f2a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001efc:	4b7c      	ldr	r3, [pc, #496]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x328>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e277      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f14:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	061b      	lsls	r3, r3, #24
 8001f22:	4973      	ldr	r1, [pc, #460]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f28:	e040      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d023      	beq.n	8001f7a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f32:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3e:	f7ff fb49 	bl	80015d4 <HAL_GetTick>
 8001f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f46:	f7ff fb45 	bl	80015d4 <HAL_GetTick>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e255      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f58:	4b65      	ldr	r3, [pc, #404]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f64:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	495f      	ldr	r1, [pc, #380]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]
 8001f78:	e018      	b.n	8001fac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fb25 	bl	80015d4 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fb21 	bl	80015d4 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e231      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d03c      	beq.n	8002032 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01c      	beq.n	8001ffa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc6:	4a4a      	ldr	r2, [pc, #296]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7ff fb00 	bl	80015d4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd8:	f7ff fafc 	bl	80015d4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e20c      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ef      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x3ec>
 8001ff8:	e01b      	b.n	8002032 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002000:	4a3b      	ldr	r2, [pc, #236]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7ff fae3 	bl	80015d4 <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002012:	f7ff fadf 	bl	80015d4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e1ef      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002024:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8002026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1ef      	bne.n	8002012 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 80a6 	beq.w	800218c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10d      	bne.n	800206c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 8002056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002068:	2301      	movs	r3, #1
 800206a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <HAL_RCC_OscConfig+0x508>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d118      	bne.n	80020aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002078:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_OscConfig+0x508>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a1d      	ldr	r2, [pc, #116]	; (80020f4 <HAL_RCC_OscConfig+0x508>)
 800207e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002084:	f7ff faa6 	bl	80015d4 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208c:	f7ff faa2 	bl	80015d4 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1b2      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_RCC_OscConfig+0x508>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d108      	bne.n	80020c4 <HAL_RCC_OscConfig+0x4d8>
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 80020ba:	f043 0301 	orr.w	r3, r3, #1
 80020be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020c2:	e029      	b.n	8002118 <HAL_RCC_OscConfig+0x52c>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2b05      	cmp	r3, #5
 80020ca:	d115      	bne.n	80020f8 <HAL_RCC_OscConfig+0x50c>
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	4a03      	ldr	r2, [pc, #12]	; (80020f0 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ec:	e014      	b.n	8002118 <HAL_RCC_OscConfig+0x52c>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40007000 	.word	0x40007000
 80020f8:	4b9a      	ldr	r3, [pc, #616]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	4a99      	ldr	r2, [pc, #612]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002100:	f023 0301 	bic.w	r3, r3, #1
 8002104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002108:	4b96      	ldr	r3, [pc, #600]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a95      	ldr	r2, [pc, #596]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d016      	beq.n	800214e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff fa58 	bl	80015d4 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff fa54 	bl	80015d4 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e162      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800213e:	4b89      	ldr	r3, [pc, #548]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ed      	beq.n	8002128 <HAL_RCC_OscConfig+0x53c>
 800214c:	e015      	b.n	800217a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214e:	f7ff fa41 	bl	80015d4 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002154:	e00a      	b.n	800216c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7ff fa3d 	bl	80015d4 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f241 3288 	movw	r2, #5000	; 0x1388
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e14b      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800216c:	4b7d      	ldr	r3, [pc, #500]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 800216e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1ed      	bne.n	8002156 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800217a:	7ffb      	ldrb	r3, [r7, #31]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d105      	bne.n	800218c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002180:	4b78      	ldr	r3, [pc, #480]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	4a77      	ldr	r2, [pc, #476]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002186:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800218a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03c      	beq.n	8002212 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01c      	beq.n	80021da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021a0:	4b70      	ldr	r3, [pc, #448]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80021a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021a6:	4a6f      	ldr	r2, [pc, #444]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b0:	f7ff fa10 	bl	80015d4 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021b8:	f7ff fa0c 	bl	80015d4 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e11c      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ca:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80021cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ef      	beq.n	80021b8 <HAL_RCC_OscConfig+0x5cc>
 80021d8:	e01b      	b.n	8002212 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021da:	4b62      	ldr	r3, [pc, #392]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80021dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021e0:	4a60      	ldr	r2, [pc, #384]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80021e2:	f023 0301 	bic.w	r3, r3, #1
 80021e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ea:	f7ff f9f3 	bl	80015d4 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f2:	f7ff f9ef 	bl	80015d4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e0ff      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002204:	4b57      	ldr	r3, [pc, #348]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1ef      	bne.n	80021f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80f3 	beq.w	8002402 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002220:	2b02      	cmp	r3, #2
 8002222:	f040 80c9 	bne.w	80023b8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002226:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0203 	and.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002236:	429a      	cmp	r2, r3
 8002238:	d12c      	bne.n	8002294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002244:	3b01      	subs	r3, #1
 8002246:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d123      	bne.n	8002294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002256:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d11b      	bne.n	8002294 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002266:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d113      	bne.n	8002294 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d109      	bne.n	8002294 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	085b      	lsrs	r3, r3, #1
 800228c:	3b01      	subs	r3, #1
 800228e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d06b      	beq.n	800236c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b0c      	cmp	r3, #12
 8002298:	d062      	beq.n	8002360 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0ac      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022aa:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a2d      	ldr	r2, [pc, #180]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80022b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b6:	f7ff f98d 	bl	80015d4 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022be:	f7ff f989 	bl	80015d4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e099      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	4b24      	ldr	r3, [pc, #144]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022dc:	4b21      	ldr	r3, [pc, #132]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	4b21      	ldr	r3, [pc, #132]	; (8002368 <HAL_RCC_OscConfig+0x77c>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022ec:	3a01      	subs	r2, #1
 80022ee:	0112      	lsls	r2, r2, #4
 80022f0:	4311      	orrs	r1, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022f6:	0212      	lsls	r2, r2, #8
 80022f8:	4311      	orrs	r1, r2
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022fe:	0852      	lsrs	r2, r2, #1
 8002300:	3a01      	subs	r2, #1
 8002302:	0552      	lsls	r2, r2, #21
 8002304:	4311      	orrs	r1, r2
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800230a:	0852      	lsrs	r2, r2, #1
 800230c:	3a01      	subs	r2, #1
 800230e:	0652      	lsls	r2, r2, #25
 8002310:	4311      	orrs	r1, r2
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002316:	06d2      	lsls	r2, r2, #27
 8002318:	430a      	orrs	r2, r1
 800231a:	4912      	ldr	r1, [pc, #72]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 800231c:	4313      	orrs	r3, r2
 800231e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800232c:	4b0d      	ldr	r3, [pc, #52]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002332:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002336:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002338:	f7ff f94c 	bl	80015d4 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002340:	f7ff f948 	bl	80015d4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e058      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_RCC_OscConfig+0x778>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235e:	e050      	b.n	8002402 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e04f      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
 8002364:	40021000 	.word	0x40021000
 8002368:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x820>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d144      	bne.n	8002402 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_OscConfig+0x820>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a23      	ldr	r2, [pc, #140]	; (800240c <HAL_RCC_OscConfig+0x820>)
 800237e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002384:	4b21      	ldr	r3, [pc, #132]	; (800240c <HAL_RCC_OscConfig+0x820>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	4a20      	ldr	r2, [pc, #128]	; (800240c <HAL_RCC_OscConfig+0x820>)
 800238a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800238e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002390:	f7ff f920 	bl	80015d4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff f91c 	bl	80015d4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e02c      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023aa:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_RCC_OscConfig+0x820>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x7ac>
 80023b6:	e024      	b.n	8002402 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d01f      	beq.n	80023fe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_OscConfig+0x820>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a12      	ldr	r2, [pc, #72]	; (800240c <HAL_RCC_OscConfig+0x820>)
 80023c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7ff f903 	bl	80015d4 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff f8ff 	bl	80015d4 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e00f      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_OscConfig+0x820>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80023f0:	4b06      	ldr	r3, [pc, #24]	; (800240c <HAL_RCC_OscConfig+0x820>)
 80023f2:	68da      	ldr	r2, [r3, #12]
 80023f4:	4905      	ldr	r1, [pc, #20]	; (800240c <HAL_RCC_OscConfig+0x820>)
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_OscConfig+0x824>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
 80023fc:	e001      	b.n	8002402 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3720      	adds	r7, #32
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	40021000 	.word	0x40021000
 8002410:	feeefffc 	.word	0xfeeefffc

08002414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0e7      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b75      	ldr	r3, [pc, #468]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d910      	bls.n	8002458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b72      	ldr	r3, [pc, #456]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 0207 	bic.w	r2, r3, #7
 800243e:	4970      	ldr	r1, [pc, #448]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b6e      	ldr	r3, [pc, #440]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e0cf      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002470:	429a      	cmp	r2, r3
 8002472:	d908      	bls.n	8002486 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002474:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4960      	ldr	r1, [pc, #384]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d04c      	beq.n	800252c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b03      	cmp	r3, #3
 8002498:	d107      	bne.n	80024aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800249a:	4b5a      	ldr	r3, [pc, #360]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d121      	bne.n	80024ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e0a6      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d107      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024b2:	4b54      	ldr	r3, [pc, #336]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d115      	bne.n	80024ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e09a      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ca:	4b4e      	ldr	r3, [pc, #312]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e08e      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e086      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4943      	ldr	r1, [pc, #268]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024fc:	f7ff f86a 	bl	80015d4 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7ff f866 	bl	80015d4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e06e      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d010      	beq.n	800255a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	4b31      	ldr	r3, [pc, #196]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002544:	429a      	cmp	r2, r3
 8002546:	d208      	bcs.n	800255a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	492b      	ldr	r1, [pc, #172]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255a:	4b29      	ldr	r3, [pc, #164]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d210      	bcs.n	800258a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002568:	4b25      	ldr	r3, [pc, #148]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f023 0207 	bic.w	r2, r3, #7
 8002570:	4923      	ldr	r1, [pc, #140]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <HAL_RCC_ClockConfig+0x1ec>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d001      	beq.n	800258a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e036      	b.n	80025f8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	2b00      	cmp	r3, #0
 8002594:	d008      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	4918      	ldr	r1, [pc, #96]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d009      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b4:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4910      	ldr	r1, [pc, #64]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025c8:	f000 f824 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <HAL_RCC_ClockConfig+0x1f0>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 030f 	and.w	r3, r3, #15
 80025d8:	490b      	ldr	r1, [pc, #44]	; (8002608 <HAL_RCC_ClockConfig+0x1f4>)
 80025da:	5ccb      	ldrb	r3, [r1, r3]
 80025dc:	f003 031f 	and.w	r3, r3, #31
 80025e0:	fa22 f303 	lsr.w	r3, r2, r3
 80025e4:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_RCC_ClockConfig+0x1f8>)
 80025e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025e8:	4b09      	ldr	r3, [pc, #36]	; (8002610 <HAL_RCC_ClockConfig+0x1fc>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ffa1 	bl	8001534 <HAL_InitTick>
 80025f2:	4603      	mov	r3, r0
 80025f4:	72fb      	strb	r3, [r7, #11]

  return status;
 80025f6:	7afb      	ldrb	r3, [r7, #11]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40022000 	.word	0x40022000
 8002604:	40021000 	.word	0x40021000
 8002608:	080067d0 	.word	0x080067d0
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800261a:	2300      	movs	r3, #0
 800261c:	61fb      	str	r3, [r7, #28]
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002622:	4b3e      	ldr	r3, [pc, #248]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x34>
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d121      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b01      	cmp	r3, #1
 8002646:	d11e      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002648:	4b34      	ldr	r3, [pc, #208]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002654:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	e005      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002670:	4a2b      	ldr	r2, [pc, #172]	; (8002720 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002678:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10d      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002684:	e00a      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d102      	bne.n	8002692 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_RCC_GetSysClockFreq+0x110>)
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e004      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b08      	cmp	r3, #8
 8002696:	d101      	bne.n	800269c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_RCC_GetSysClockFreq+0x114>)
 800269a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	2b0c      	cmp	r3, #12
 80026a0:	d134      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026a2:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d003      	beq.n	80026ba <HAL_RCC_GetSysClockFreq+0xa6>
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d003      	beq.n	80026c0 <HAL_RCC_GetSysClockFreq+0xac>
 80026b8:	e005      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	; (8002724 <HAL_RCC_GetSysClockFreq+0x110>)
 80026bc:	617b      	str	r3, [r7, #20]
      break;
 80026be:	e005      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_RCC_GetSysClockFreq+0x114>)
 80026c2:	617b      	str	r3, [r7, #20]
      break;
 80026c4:	e002      	b.n	80026cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	617b      	str	r3, [r7, #20]
      break;
 80026ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026cc:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	3301      	adds	r3, #1
 80026d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	0a1b      	lsrs	r3, r3, #8
 80026e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	fb03 f202 	mul.w	r2, r3, r2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <HAL_RCC_GetSysClockFreq+0x108>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	0e5b      	lsrs	r3, r3, #25
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	3301      	adds	r3, #1
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	fbb2 f3f3 	udiv	r3, r2, r3
 800270a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800270c:	69bb      	ldr	r3, [r7, #24]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3724      	adds	r7, #36	; 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000
 8002720:	080067e8 	.word	0x080067e8
 8002724:	00f42400 	.word	0x00f42400
 8002728:	007a1200 	.word	0x007a1200

0800272c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <HAL_RCC_GetHCLKFreq+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	20000000 	.word	0x20000000

08002744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002748:	f7ff fff0 	bl	800272c <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_RCC_GetPCLK1Freq+0x28>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	080067e0 	.word	0x080067e0

08002770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002774:	f7ff ffda 	bl	800272c <HAL_RCC_GetHCLKFreq>
 8002778:	4602      	mov	r2, r0
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	0adb      	lsrs	r3, r3, #11
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	4904      	ldr	r1, [pc, #16]	; (8002798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002786:	5ccb      	ldrb	r3, [r1, r3]
 8002788:	f003 031f 	and.w	r3, r3, #31
 800278c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40021000 	.word	0x40021000
 8002798:	080067e0 	.word	0x080067e0

0800279c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027b4:	f7ff f9b6 	bl	8001b24 <HAL_PWREx_GetVoltageRange>
 80027b8:	6178      	str	r0, [r7, #20]
 80027ba:	e014      	b.n	80027e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	; 0x58
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027d4:	f7ff f9a6 	bl	8001b24 <HAL_PWREx_GetVoltageRange>
 80027d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ec:	d10b      	bne.n	8002806 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d919      	bls.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2ba0      	cmp	r3, #160	; 0xa0
 80027f8:	d902      	bls.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027fa:	2302      	movs	r3, #2
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e013      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002800:	2301      	movs	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	e010      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d902      	bls.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800280c:	2303      	movs	r3, #3
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e00a      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d102      	bne.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002818:	2302      	movs	r3, #2
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e004      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d101      	bne.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002824:	2301      	movs	r3, #1
 8002826:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 0207 	bic.w	r2, r3, #7
 8002830:	4909      	ldr	r1, [pc, #36]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	40022000 	.word	0x40022000

0800285c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002864:	2300      	movs	r3, #0
 8002866:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002868:	2300      	movs	r3, #0
 800286a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002874:	2b00      	cmp	r3, #0
 8002876:	d031      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002880:	d01a      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002882:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002886:	d814      	bhi.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d009      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800288c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002890:	d10f      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4a5c      	ldr	r2, [pc, #368]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800289e:	e00c      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 fa22 	bl	8002cf0 <RCCEx_PLLSAI1_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	74fb      	strb	r3, [r7, #19]
      break;
 80028b6:	e000      	b.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80028b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ba:	7cfb      	ldrb	r3, [r7, #19]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10b      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028c0:	4b51      	ldr	r3, [pc, #324]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	494e      	ldr	r1, [pc, #312]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028d6:	e001      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7cfb      	ldrb	r3, [r7, #19]
 80028da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 809e 	beq.w	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028ee:	4b46      	ldr	r3, [pc, #280]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00d      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002904:	4b40      	ldr	r3, [pc, #256]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	4a3f      	ldr	r2, [pc, #252]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800290e:	6593      	str	r3, [r2, #88]	; 0x58
 8002910:	4b3d      	ldr	r3, [pc, #244]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002918:	60bb      	str	r3, [r7, #8]
 800291a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291c:	2301      	movs	r3, #1
 800291e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002920:	4b3a      	ldr	r3, [pc, #232]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a39      	ldr	r2, [pc, #228]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800292a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800292c:	f7fe fe52 	bl	80015d4 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002932:	e009      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002934:	f7fe fe4e 	bl	80015d4 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d902      	bls.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	74fb      	strb	r3, [r7, #19]
        break;
 8002946:	e005      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002948:	4b30      	ldr	r3, [pc, #192]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0ef      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002954:	7cfb      	ldrb	r3, [r7, #19]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d15a      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800295a:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800295c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002960:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002964:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01e      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	429a      	cmp	r2, r3
 8002974:	d019      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002976:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800297c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002980:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	4a1f      	ldr	r2, [pc, #124]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800298a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002992:	4b1d      	ldr	r3, [pc, #116]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002998:	4a1b      	ldr	r2, [pc, #108]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029a2:	4a19      	ldr	r2, [pc, #100]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d016      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fe0e 	bl	80015d4 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ba:	e00b      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029bc:	f7fe fe0a 	bl	80015d4 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d902      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	74fb      	strb	r3, [r7, #19]
            break;
 80029d2:	e006      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d4:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ec      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10b      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e8:	4b07      	ldr	r3, [pc, #28]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	4904      	ldr	r1, [pc, #16]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029fe:	e009      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	74bb      	strb	r3, [r7, #18]
 8002a04:	e006      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7cfb      	ldrb	r3, [r7, #19]
 8002a12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a14:	7c7b      	ldrb	r3, [r7, #17]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b8d      	ldr	r3, [pc, #564]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1e:	4a8c      	ldr	r2, [pc, #560]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a32:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f023 0203 	bic.w	r2, r3, #3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	4983      	ldr	r1, [pc, #524]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a54:	4b7e      	ldr	r3, [pc, #504]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 020c 	bic.w	r2, r3, #12
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	497b      	ldr	r1, [pc, #492]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a76:	4b76      	ldr	r3, [pc, #472]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	4972      	ldr	r1, [pc, #456]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a98:	4b6d      	ldr	r3, [pc, #436]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	496a      	ldr	r1, [pc, #424]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002aba:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac8:	4961      	ldr	r1, [pc, #388]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002adc:	4b5c      	ldr	r3, [pc, #368]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	4959      	ldr	r1, [pc, #356]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002afe:	4b54      	ldr	r3, [pc, #336]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4950      	ldr	r1, [pc, #320]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b20:	4b4b      	ldr	r3, [pc, #300]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	4948      	ldr	r1, [pc, #288]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b42:	4b43      	ldr	r3, [pc, #268]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	493f      	ldr	r1, [pc, #252]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d028      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b64:	4b3a      	ldr	r3, [pc, #232]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b72:	4937      	ldr	r1, [pc, #220]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b82:	d106      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b84:	4b32      	ldr	r3, [pc, #200]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b8e:	60d3      	str	r3, [r2, #12]
 8002b90:	e011      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f8a4 	bl	8002cf0 <RCCEx_PLLSAI1_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002bb2:	7cfb      	ldrb	r3, [r7, #19]
 8002bb4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d028      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd0:	491f      	ldr	r1, [pc, #124]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002be0:	d106      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be2:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	4a1a      	ldr	r2, [pc, #104]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002be8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bec:	60d3      	str	r3, [r2, #12]
 8002bee:	e011      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2101      	movs	r1, #1
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f875 	bl	8002cf0 <RCCEx_PLLSAI1_Config>
 8002c06:	4603      	mov	r3, r0
 8002c08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d02b      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2e:	4908      	ldr	r1, [pc, #32]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c3e:	d109      	bne.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	4a02      	ldr	r2, [pc, #8]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c4a:	60d3      	str	r3, [r2, #12]
 8002c4c:	e014      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002c4e:	bf00      	nop
 8002c50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3304      	adds	r3, #4
 8002c62:	2101      	movs	r1, #1
 8002c64:	4618      	mov	r0, r3
 8002c66:	f000 f843 	bl	8002cf0 <RCCEx_PLLSAI1_Config>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6e:	7cfb      	ldrb	r3, [r7, #19]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002c74:	7cfb      	ldrb	r3, [r7, #19]
 8002c76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01c      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	4916      	ldr	r1, [pc, #88]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca2:	d10c      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3304      	adds	r3, #4
 8002ca8:	2102      	movs	r1, #2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f820 	bl	8002cf0 <RCCEx_PLLSAI1_Config>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cb4:	7cfb      	ldrb	r3, [r7, #19]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002cba:	7cfb      	ldrb	r3, [r7, #19]
 8002cbc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd8:	4904      	ldr	r1, [pc, #16]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ce0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40021000 	.word	0x40021000

08002cf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cfe:	4b74      	ldr	r3, [pc, #464]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d018      	beq.n	8002d3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d0a:	4b71      	ldr	r3, [pc, #452]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0203 	and.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10d      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d22:	4b6b      	ldr	r3, [pc, #428]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
       ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d047      	beq.n	8002dc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e044      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	d018      	beq.n	8002d76 <RCCEx_PLLSAI1_Config+0x86>
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d825      	bhi.n	8002d94 <RCCEx_PLLSAI1_Config+0xa4>
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d002      	beq.n	8002d52 <RCCEx_PLLSAI1_Config+0x62>
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d009      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x74>
 8002d50:	e020      	b.n	8002d94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d52:	4b5f      	ldr	r3, [pc, #380]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11d      	bne.n	8002d9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d62:	e01a      	b.n	8002d9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d64:	4b5a      	ldr	r3, [pc, #360]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d116      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d74:	e013      	b.n	8002d9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d76:	4b56      	ldr	r3, [pc, #344]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d82:	4b53      	ldr	r3, [pc, #332]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d92:	e006      	b.n	8002da2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      break;
 8002d98:	e004      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e002      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002da2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10d      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002daa:	4b49      	ldr	r3, [pc, #292]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6819      	ldr	r1, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	430b      	orrs	r3, r1
 8002dc0:	4943      	ldr	r1, [pc, #268]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d17c      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002dcc:	4b40      	ldr	r3, [pc, #256]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a3f      	ldr	r2, [pc, #252]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002dd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd8:	f7fe fbfc 	bl	80015d4 <HAL_GetTick>
 8002ddc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dde:	e009      	b.n	8002df4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002de0:	f7fe fbf8 	bl	80015d4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d902      	bls.n	8002df4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	73fb      	strb	r3, [r7, #15]
        break;
 8002df2:	e005      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002df4:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ef      	bne.n	8002de0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d15f      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d110      	bne.n	8002e2e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0c:	4b30      	ldr	r3, [pc, #192]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002e14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6892      	ldr	r2, [r2, #8]
 8002e1c:	0211      	lsls	r1, r2, #8
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	06d2      	lsls	r2, r2, #27
 8002e24:	430a      	orrs	r2, r1
 8002e26:	492a      	ldr	r1, [pc, #168]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	610b      	str	r3, [r1, #16]
 8002e2c:	e027      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d112      	bne.n	8002e5a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002e3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	0211      	lsls	r1, r2, #8
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6912      	ldr	r2, [r2, #16]
 8002e4a:	0852      	lsrs	r2, r2, #1
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0552      	lsls	r2, r2, #21
 8002e50:	430a      	orrs	r2, r1
 8002e52:	491f      	ldr	r1, [pc, #124]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	610b      	str	r3, [r1, #16]
 8002e58:	e011      	b.n	8002e7e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e62:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	0211      	lsls	r1, r2, #8
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6952      	ldr	r2, [r2, #20]
 8002e70:	0852      	lsrs	r2, r2, #1
 8002e72:	3a01      	subs	r2, #1
 8002e74:	0652      	lsls	r2, r2, #25
 8002e76:	430a      	orrs	r2, r1
 8002e78:	4915      	ldr	r1, [pc, #84]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e7e:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e88:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fba3 	bl	80015d4 <HAL_GetTick>
 8002e8e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e90:	e009      	b.n	8002ea6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e92:	f7fe fb9f 	bl	80015d4 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d902      	bls.n	8002ea6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	73fb      	strb	r3, [r7, #15]
          break;
 8002ea4:	e005      	b.n	8002eb2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ef      	beq.n	8002e92 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002eb2:	7bfb      	ldrb	r3, [r7, #15]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d106      	bne.n	8002ec6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	4903      	ldr	r1, [pc, #12]	; (8002ed0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e095      	b.n	8003012 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d108      	bne.n	8002f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ef6:	d009      	beq.n	8002f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	61da      	str	r2, [r3, #28]
 8002efe:	e005      	b.n	8002f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fd ff6c 	bl	8000e04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f4c:	d902      	bls.n	8002f54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e002      	b.n	8002f5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002f62:	d007      	beq.n	8002f74 <HAL_SPI_Init+0xa0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f6c:	d002      	beq.n	8002f74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb6:	ea42 0103 	orr.w	r1, r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	0c1b      	lsrs	r3, r3, #16
 8002fd0:	f003 0204 	and.w	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002ff0:	ea42 0103 	orr.w	r1, r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b08a      	sub	sp, #40	; 0x28
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003028:	2301      	movs	r3, #1
 800302a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800302c:	2300      	movs	r3, #0
 800302e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003038:	2b01      	cmp	r3, #1
 800303a:	d101      	bne.n	8003040 <HAL_SPI_TransmitReceive+0x26>
 800303c:	2302      	movs	r3, #2
 800303e:	e1fb      	b.n	8003438 <HAL_SPI_TransmitReceive+0x41e>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003048:	f7fe fac4 	bl	80015d4 <HAL_GetTick>
 800304c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003054:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003064:	7efb      	ldrb	r3, [r7, #27]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d00e      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x6e>
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003070:	d106      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d102      	bne.n	8003080 <HAL_SPI_TransmitReceive+0x66>
 800307a:	7efb      	ldrb	r3, [r7, #27]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d003      	beq.n	8003088 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003080:	2302      	movs	r3, #2
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003086:	e1cd      	b.n	8003424 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_SPI_TransmitReceive+0x80>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_TransmitReceive+0x80>
 8003094:	887b      	ldrh	r3, [r7, #2]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d103      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80030a0:	e1c0      	b.n	8003424 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	d003      	beq.n	80030b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2205      	movs	r2, #5
 80030b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	887a      	ldrh	r2, [r7, #2]
 80030c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	887a      	ldrh	r2, [r7, #2]
 80030ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	887a      	ldrh	r2, [r7, #2]
 80030e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80030f8:	d802      	bhi.n	8003100 <HAL_SPI_TransmitReceive+0xe6>
 80030fa:	8a3b      	ldrh	r3, [r7, #16]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d908      	bls.n	8003112 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685a      	ldr	r2, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800310e:	605a      	str	r2, [r3, #4]
 8003110:	e007      	b.n	8003122 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003120:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d007      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003148:	d97c      	bls.n	8003244 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x13e>
 8003152:	8a7b      	ldrh	r3, [r7, #18]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d169      	bne.n	800322c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	881a      	ldrh	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	1c9a      	adds	r2, r3, #2
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	e056      	b.n	800322c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b02      	cmp	r3, #2
 800318a:	d11b      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x1aa>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x1aa>
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	2b01      	cmp	r3, #1
 800319a:	d113      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a0:	881a      	ldrh	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d11c      	bne.n	800320c <HAL_SPI_TransmitReceive+0x1f2>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d016      	beq.n	800320c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e8:	b292      	uxth	r2, r2
 80031ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	1c9a      	adds	r2, r3, #2
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003208:	2301      	movs	r3, #1
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800320c:	f7fe f9e2 	bl	80015d4 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003218:	429a      	cmp	r2, r3
 800321a:	d807      	bhi.n	800322c <HAL_SPI_TransmitReceive+0x212>
 800321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003222:	d003      	beq.n	800322c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800322a:	e0fb      	b.n	8003424 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1a3      	bne.n	800317e <HAL_SPI_TransmitReceive+0x164>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d19d      	bne.n	800317e <HAL_SPI_TransmitReceive+0x164>
 8003242:	e0df      	b.n	8003404 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_SPI_TransmitReceive+0x23a>
 800324c:	8a7b      	ldrh	r3, [r7, #18]
 800324e:	2b01      	cmp	r3, #1
 8003250:	f040 80cb 	bne.w	80033ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b01      	cmp	r3, #1
 800325c:	d912      	bls.n	8003284 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003262:	881a      	ldrh	r2, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	1c9a      	adds	r2, r3, #2
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003278:	b29b      	uxth	r3, r3
 800327a:	3b02      	subs	r3, #2
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003282:	e0b2      	b.n	80033ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	7812      	ldrb	r2, [r2, #0]
 8003290:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032aa:	e09e      	b.n	80033ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d134      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x30a>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d02f      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x30a>
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d12c      	bne.n	8003324 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d912      	bls.n	80032fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d8:	881a      	ldrh	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e4:	1c9a      	adds	r2, r3, #2
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b02      	subs	r3, #2
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80032f8:	e012      	b.n	8003320 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	330c      	adds	r3, #12
 8003304:	7812      	ldrb	r2, [r2, #0]
 8003306:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003316:	b29b      	uxth	r3, r3
 8003318:	3b01      	subs	r3, #1
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d148      	bne.n	80033c4 <HAL_SPI_TransmitReceive+0x3aa>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003338:	b29b      	uxth	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d042      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d923      	bls.n	8003392 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	b292      	uxth	r2, r2
 8003356:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b02      	subs	r3, #2
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b01      	cmp	r3, #1
 800337e:	d81f      	bhi.n	80033c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	e016      	b.n	80033c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f103 020c 	add.w	r2, r3, #12
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	7812      	ldrb	r2, [r2, #0]
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033c0:	2301      	movs	r3, #1
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80033c4:	f7fe f906 	bl	80015d4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d803      	bhi.n	80033dc <HAL_SPI_TransmitReceive+0x3c2>
 80033d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033da:	d102      	bne.n	80033e2 <HAL_SPI_TransmitReceive+0x3c8>
 80033dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80033e8:	e01c      	b.n	8003424 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f af5b 	bne.w	80032ac <HAL_SPI_TransmitReceive+0x292>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f47f af54 	bne.w	80032ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f937 	bl	800367c <SPI_EndRxTxTransaction>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	661a      	str	r2, [r3, #96]	; 0x60
 8003420:	e000      	b.n	8003424 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003422:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003438:	4618      	mov	r0, r3
 800343a:	3728      	adds	r7, #40	; 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b088      	sub	sp, #32
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003450:	f7fe f8c0 	bl	80015d4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	4413      	add	r3, r2
 800345e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003460:	f7fe f8b8 	bl	80015d4 <HAL_GetTick>
 8003464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003466:	4b39      	ldr	r3, [pc, #228]	; (800354c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	015b      	lsls	r3, r3, #5
 800346c:	0d1b      	lsrs	r3, r3, #20
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003476:	e054      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800347e:	d050      	beq.n	8003522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003480:	f7fe f8a8 	bl	80015d4 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	69fa      	ldr	r2, [r7, #28]
 800348c:	429a      	cmp	r2, r3
 800348e:	d902      	bls.n	8003496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d13d      	bne.n	8003512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034ae:	d111      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034b8:	d004      	beq.n	80034c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d107      	bne.n	80034d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d10f      	bne.n	80034fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e017      	b.n	8003542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	3b01      	subs	r3, #1
 8003520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	4013      	ands	r3, r2
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	429a      	cmp	r2, r3
 8003530:	bf0c      	ite	eq
 8003532:	2301      	moveq	r3, #1
 8003534:	2300      	movne	r3, #0
 8003536:	b2db      	uxtb	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	79fb      	ldrb	r3, [r7, #7]
 800353c:	429a      	cmp	r2, r3
 800353e:	d19b      	bne.n	8003478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000000 	.word	0x20000000

08003550 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003562:	f7fe f837 	bl	80015d4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	4413      	add	r3, r2
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003572:	f7fe f82f 	bl	80015d4 <HAL_GetTick>
 8003576:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	330c      	adds	r3, #12
 800357e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003580:	4b3d      	ldr	r3, [pc, #244]	; (8003678 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	00da      	lsls	r2, r3, #3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	0d1b      	lsrs	r3, r3, #20
 8003590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003592:	fb02 f303 	mul.w	r3, r2, r3
 8003596:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003598:	e060      	b.n	800365c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80035a0:	d107      	bne.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80035b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b8:	d050      	beq.n	800365c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ba:	f7fe f80b 	bl	80015d4 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6a3b      	ldr	r3, [r7, #32]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d902      	bls.n	80035d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80035ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d13d      	bne.n	800364c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80035de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e8:	d111      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f2:	d004      	beq.n	80035fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035fc:	d107      	bne.n	800360e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800360c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003616:	d10f      	bne.n	8003638 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003636:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e010      	b.n	800366e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3b01      	subs	r3, #1
 800365a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4013      	ands	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d196      	bne.n	800359a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3728      	adds	r7, #40	; 0x28
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000000 	.word	0x20000000

0800367c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff5b 	bl	8003550 <SPI_WaitFifoStateUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e027      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff fec0 	bl	8003440 <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e014      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff ff34 	bl	8003550 <SPI_WaitFifoStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e000      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e049      	b.n	80037ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7fd fdc4 	bl	80012bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 fba0 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d001      	beq.n	80037d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e033      	b.n	8003838 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_TIM_Base_Start+0x8c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_TIM_Base_Start+0x3e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037ea:	d004      	beq.n	80037f6 <HAL_TIM_Base_Start+0x3e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_TIM_Base_Start+0x90>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d115      	bne.n	8003822 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <HAL_TIM_Base_Start+0x94>)
 80037fe:	4013      	ands	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b06      	cmp	r3, #6
 8003806:	d015      	beq.n	8003834 <HAL_TIM_Base_Start+0x7c>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800380e:	d011      	beq.n	8003834 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003820:	e008      	b.n	8003834 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e000      	b.n	8003836 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003834:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40014000 	.word	0x40014000
 800384c:	00010007 	.word	0x00010007

08003850 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e049      	b.n	80038f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f841 	bl	80038fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4619      	mov	r1, r3
 800388e:	4610      	mov	r0, r2
 8003890:	f000 fafc 	bl	8003e8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
	...

08003914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <HAL_TIM_PWM_Start+0x24>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e03c      	b.n	80039b2 <HAL_TIM_PWM_Start+0x9e>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	2b04      	cmp	r3, #4
 800393c:	d109      	bne.n	8003952 <HAL_TIM_PWM_Start+0x3e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b01      	cmp	r3, #1
 8003948:	bf14      	ite	ne
 800394a:	2301      	movne	r3, #1
 800394c:	2300      	moveq	r3, #0
 800394e:	b2db      	uxtb	r3, r3
 8003950:	e02f      	b.n	80039b2 <HAL_TIM_PWM_Start+0x9e>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b08      	cmp	r3, #8
 8003956:	d109      	bne.n	800396c <HAL_TIM_PWM_Start+0x58>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	bf14      	ite	ne
 8003964:	2301      	movne	r3, #1
 8003966:	2300      	moveq	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	e022      	b.n	80039b2 <HAL_TIM_PWM_Start+0x9e>
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2b0c      	cmp	r3, #12
 8003970:	d109      	bne.n	8003986 <HAL_TIM_PWM_Start+0x72>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b01      	cmp	r3, #1
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	e015      	b.n	80039b2 <HAL_TIM_PWM_Start+0x9e>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b10      	cmp	r3, #16
 800398a:	d109      	bne.n	80039a0 <HAL_TIM_PWM_Start+0x8c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b01      	cmp	r3, #1
 8003996:	bf14      	ite	ne
 8003998:	2301      	movne	r3, #1
 800399a:	2300      	moveq	r3, #0
 800399c:	b2db      	uxtb	r3, r3
 800399e:	e008      	b.n	80039b2 <HAL_TIM_PWM_Start+0x9e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e07e      	b.n	8003ab8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d104      	bne.n	80039ca <HAL_TIM_PWM_Start+0xb6>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039c8:	e023      	b.n	8003a12 <HAL_TIM_PWM_Start+0xfe>
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d104      	bne.n	80039da <HAL_TIM_PWM_Start+0xc6>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2202      	movs	r2, #2
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039d8:	e01b      	b.n	8003a12 <HAL_TIM_PWM_Start+0xfe>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b08      	cmp	r3, #8
 80039de:	d104      	bne.n	80039ea <HAL_TIM_PWM_Start+0xd6>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039e8:	e013      	b.n	8003a12 <HAL_TIM_PWM_Start+0xfe>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b0c      	cmp	r3, #12
 80039ee:	d104      	bne.n	80039fa <HAL_TIM_PWM_Start+0xe6>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f8:	e00b      	b.n	8003a12 <HAL_TIM_PWM_Start+0xfe>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b10      	cmp	r3, #16
 80039fe:	d104      	bne.n	8003a0a <HAL_TIM_PWM_Start+0xf6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a08:	e003      	b.n	8003a12 <HAL_TIM_PWM_Start+0xfe>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	6839      	ldr	r1, [r7, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fdb2 	bl	8004584 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a26      	ldr	r2, [pc, #152]	; (8003ac0 <HAL_TIM_PWM_Start+0x1ac>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x12a>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <HAL_TIM_PWM_Start+0x1b0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x12a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_TIM_PWM_Start+0x1b4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_PWM_Start+0x12e>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e000      	b.n	8003a44 <HAL_TIM_PWM_Start+0x130>
 8003a42:	2300      	movs	r3, #0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_TIM_PWM_Start+0x1ac>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d009      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x162>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6a:	d004      	beq.n	8003a76 <HAL_TIM_PWM_Start+0x162>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a14      	ldr	r2, [pc, #80]	; (8003ac4 <HAL_TIM_PWM_Start+0x1b0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d115      	bne.n	8003aa2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b13      	ldr	r3, [pc, #76]	; (8003acc <HAL_TIM_PWM_Start+0x1b8>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d015      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x1a0>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8e:	d011      	beq.n	8003ab4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	e008      	b.n	8003ab4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f042 0201 	orr.w	r2, r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e000      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40012c00 	.word	0x40012c00
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	00010007 	.word	0x00010007

08003ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0ff      	b.n	8003cee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b14      	cmp	r3, #20
 8003afa:	f200 80f0 	bhi.w	8003cde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003afe:	a201      	add	r2, pc, #4	; (adr r2, 8003b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003cdf 	.word	0x08003cdf
 8003b0c:	08003cdf 	.word	0x08003cdf
 8003b10:	08003cdf 	.word	0x08003cdf
 8003b14:	08003b99 	.word	0x08003b99
 8003b18:	08003cdf 	.word	0x08003cdf
 8003b1c:	08003cdf 	.word	0x08003cdf
 8003b20:	08003cdf 	.word	0x08003cdf
 8003b24:	08003bdb 	.word	0x08003bdb
 8003b28:	08003cdf 	.word	0x08003cdf
 8003b2c:	08003cdf 	.word	0x08003cdf
 8003b30:	08003cdf 	.word	0x08003cdf
 8003b34:	08003c1b 	.word	0x08003c1b
 8003b38:	08003cdf 	.word	0x08003cdf
 8003b3c:	08003cdf 	.word	0x08003cdf
 8003b40:	08003cdf 	.word	0x08003cdf
 8003b44:	08003c5d 	.word	0x08003c5d
 8003b48:	08003cdf 	.word	0x08003cdf
 8003b4c:	08003cdf 	.word	0x08003cdf
 8003b50:	08003cdf 	.word	0x08003cdf
 8003b54:	08003c9d 	.word	0x08003c9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68b9      	ldr	r1, [r7, #8]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 f9f8 	bl	8003f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0208 	orr.w	r2, r2, #8
 8003b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6999      	ldr	r1, [r3, #24]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	619a      	str	r2, [r3, #24]
      break;
 8003b96:	e0a5      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fa54 	bl	800404c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	699a      	ldr	r2, [r3, #24]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6999      	ldr	r1, [r3, #24]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	021a      	lsls	r2, r3, #8
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	619a      	str	r2, [r3, #24]
      break;
 8003bd8:	e084      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68b9      	ldr	r1, [r7, #8]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 faad 	bl	8004140 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f042 0208 	orr.w	r2, r2, #8
 8003bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0204 	bic.w	r2, r2, #4
 8003c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69d9      	ldr	r1, [r3, #28]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	61da      	str	r2, [r3, #28]
      break;
 8003c18:	e064      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68b9      	ldr	r1, [r7, #8]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f000 fb05 	bl	8004230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	69da      	ldr	r2, [r3, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69d9      	ldr	r1, [r3, #28]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	021a      	lsls	r2, r3, #8
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	61da      	str	r2, [r3, #28]
      break;
 8003c5a:	e043      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fb42 	bl	80042ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0208 	orr.w	r2, r2, #8
 8003c76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691a      	ldr	r2, [r3, #16]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c9a:	e023      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68b9      	ldr	r1, [r7, #8]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fb7a 	bl	800439c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	021a      	lsls	r2, r3, #8
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003cdc:	e002      	b.n	8003ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop

08003cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0b6      	b.n	8003e82 <HAL_TIM_ConfigClockSource+0x18a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d50:	d03e      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0xd8>
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d56:	f200 8087 	bhi.w	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5e:	f000 8086 	beq.w	8003e6e <HAL_TIM_ConfigClockSource+0x176>
 8003d62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d66:	d87f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d01a      	beq.n	8003da2 <HAL_TIM_ConfigClockSource+0xaa>
 8003d6c:	2b70      	cmp	r3, #112	; 0x70
 8003d6e:	d87b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d050      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0x11e>
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d877      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d78:	2b50      	cmp	r3, #80	; 0x50
 8003d7a:	d03c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0xfe>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d873      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d058      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x13e>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d86f      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d064      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15e>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d86b      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d060      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15e>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d867      	bhi.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d05c      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15e>
 8003d9c:	2b10      	cmp	r3, #16
 8003d9e:	d05a      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x15e>
 8003da0:	e062      	b.n	8003e68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6899      	ldr	r1, [r3, #8]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f000 fbc7 	bl	8004544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	609a      	str	r2, [r3, #8]
      break;
 8003dce:	e04f      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6818      	ldr	r0, [r3, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	6899      	ldr	r1, [r3, #8]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	f000 fbb0 	bl	8004544 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003df2:	609a      	str	r2, [r3, #8]
      break;
 8003df4:	e03c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6818      	ldr	r0, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	6859      	ldr	r1, [r3, #4]
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f000 fb24 	bl	8004450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2150      	movs	r1, #80	; 0x50
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fb7d 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003e14:	e02c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 fb43 	bl	80044ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2160      	movs	r1, #96	; 0x60
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb6d 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003e34:	e01c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fb04 	bl	8004450 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2140      	movs	r1, #64	; 0x40
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb5d 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003e54:	e00c      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f000 fb54 	bl	800450e <TIM_ITRx_SetConfig>
      break;
 8003e66:	e003      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e6c:	e000      	b.n	8003e70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003e6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a2a      	ldr	r2, [pc, #168]	; (8003f48 <TIM_Base_SetConfig+0xbc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d003      	beq.n	8003eac <TIM_Base_SetConfig+0x20>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eaa:	d108      	bne.n	8003ebe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <TIM_Base_SetConfig+0xbc>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00b      	beq.n	8003ede <TIM_Base_SetConfig+0x52>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d007      	beq.n	8003ede <TIM_Base_SetConfig+0x52>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a1e      	ldr	r2, [pc, #120]	; (8003f4c <TIM_Base_SetConfig+0xc0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d003      	beq.n	8003ede <TIM_Base_SetConfig+0x52>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <TIM_Base_SetConfig+0xc4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d108      	bne.n	8003ef0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a0c      	ldr	r2, [pc, #48]	; (8003f48 <TIM_Base_SetConfig+0xbc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d007      	beq.n	8003f2c <TIM_Base_SetConfig+0xa0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a0b      	ldr	r2, [pc, #44]	; (8003f4c <TIM_Base_SetConfig+0xc0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d003      	beq.n	8003f2c <TIM_Base_SetConfig+0xa0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <TIM_Base_SetConfig+0xc4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d103      	bne.n	8003f34 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	615a      	str	r2, [r3, #20]
}
 8003f3a:	bf00      	nop
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40012c00 	.word	0x40012c00
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400

08003f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b087      	sub	sp, #28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1b      	ldr	r3, [r3, #32]
 8003f62:	f023 0201 	bic.w	r2, r3, #1
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f023 0302 	bic.w	r3, r3, #2
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a24      	ldr	r2, [pc, #144]	; (8004040 <TIM_OC1_SetConfig+0xec>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <TIM_OC1_SetConfig+0x70>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a23      	ldr	r2, [pc, #140]	; (8004044 <TIM_OC1_SetConfig+0xf0>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d003      	beq.n	8003fc4 <TIM_OC1_SetConfig+0x70>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	4a22      	ldr	r2, [pc, #136]	; (8004048 <TIM_OC1_SetConfig+0xf4>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10c      	bne.n	8003fde <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f023 0308 	bic.w	r3, r3, #8
 8003fca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f023 0304 	bic.w	r3, r3, #4
 8003fdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a17      	ldr	r2, [pc, #92]	; (8004040 <TIM_OC1_SetConfig+0xec>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d007      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xa2>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a16      	ldr	r2, [pc, #88]	; (8004044 <TIM_OC1_SetConfig+0xf0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d003      	beq.n	8003ff6 <TIM_OC1_SetConfig+0xa2>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a15      	ldr	r2, [pc, #84]	; (8004048 <TIM_OC1_SetConfig+0xf4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d111      	bne.n	800401a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ffc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	4313      	orrs	r3, r2
 800400e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	621a      	str	r2, [r3, #32]
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40014000 	.word	0x40014000
 8004048:	40014400 	.word	0x40014400

0800404c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0210 	bic.w	r2, r3, #16
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800407a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004086:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f023 0320 	bic.w	r3, r3, #32
 800409a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	011b      	lsls	r3, r3, #4
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a22      	ldr	r2, [pc, #136]	; (8004134 <TIM_OC2_SetConfig+0xe8>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d10d      	bne.n	80040cc <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a19      	ldr	r2, [pc, #100]	; (8004134 <TIM_OC2_SetConfig+0xe8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <TIM_OC2_SetConfig+0x98>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a18      	ldr	r2, [pc, #96]	; (8004138 <TIM_OC2_SetConfig+0xec>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d003      	beq.n	80040e4 <TIM_OC2_SetConfig+0x98>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a17      	ldr	r2, [pc, #92]	; (800413c <TIM_OC2_SetConfig+0xf0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d113      	bne.n	800410c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	621a      	str	r2, [r3, #32]
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	40012c00 	.word	0x40012c00
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400

08004140 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0303 	bic.w	r3, r3, #3
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800418c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	021b      	lsls	r3, r3, #8
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a21      	ldr	r2, [pc, #132]	; (8004224 <TIM_OC3_SetConfig+0xe4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d10d      	bne.n	80041be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	021b      	lsls	r3, r3, #8
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <TIM_OC3_SetConfig+0xe4>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d007      	beq.n	80041d6 <TIM_OC3_SetConfig+0x96>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a17      	ldr	r2, [pc, #92]	; (8004228 <TIM_OC3_SetConfig+0xe8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <TIM_OC3_SetConfig+0x96>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a16      	ldr	r2, [pc, #88]	; (800422c <TIM_OC3_SetConfig+0xec>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d113      	bne.n	80041fe <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	621a      	str	r2, [r3, #32]
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400

08004230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004230:	b480      	push	{r7}
 8004232:	b087      	sub	sp, #28
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800427e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	031b      	lsls	r3, r3, #12
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	4313      	orrs	r3, r2
 800428a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a14      	ldr	r2, [pc, #80]	; (80042e0 <TIM_OC4_SetConfig+0xb0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_OC4_SetConfig+0x74>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <TIM_OC4_SetConfig+0xb4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC4_SetConfig+0x74>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <TIM_OC4_SetConfig+0xb8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d109      	bne.n	80042b8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	019b      	lsls	r3, r3, #6
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40012c00 	.word	0x40012c00
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400

080042ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800431a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004330:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	041b      	lsls	r3, r3, #16
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a13      	ldr	r2, [pc, #76]	; (8004390 <TIM_OC5_SetConfig+0xa4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <TIM_OC5_SetConfig+0x6a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a12      	ldr	r2, [pc, #72]	; (8004394 <TIM_OC5_SetConfig+0xa8>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d003      	beq.n	8004356 <TIM_OC5_SetConfig+0x6a>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a11      	ldr	r2, [pc, #68]	; (8004398 <TIM_OC5_SetConfig+0xac>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d109      	bne.n	800436a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800435c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	021b      	lsls	r3, r3, #8
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	4313      	orrs	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40012c00 	.word	0x40012c00
 8004394:	40014000 	.word	0x40014000
 8004398:	40014400 	.word	0x40014400

0800439c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	051b      	lsls	r3, r3, #20
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a14      	ldr	r2, [pc, #80]	; (8004444 <TIM_OC6_SetConfig+0xa8>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d007      	beq.n	8004408 <TIM_OC6_SetConfig+0x6c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a13      	ldr	r2, [pc, #76]	; (8004448 <TIM_OC6_SetConfig+0xac>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d003      	beq.n	8004408 <TIM_OC6_SetConfig+0x6c>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a12      	ldr	r2, [pc, #72]	; (800444c <TIM_OC6_SetConfig+0xb0>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d109      	bne.n	800441c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800440e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	029b      	lsls	r3, r3, #10
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	621a      	str	r2, [r3, #32]
}
 8004436:	bf00      	nop
 8004438:	371c      	adds	r7, #28
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40012c00 	.word	0x40012c00
 8004448:	40014000 	.word	0x40014000
 800444c:	40014400 	.word	0x40014400

08004450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0201 	bic.w	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800447a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 030a 	bic.w	r3, r3, #10
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	4313      	orrs	r3, r2
 8004494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044ae:	b480      	push	{r7}
 80044b0:	b087      	sub	sp, #28
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	f023 0210 	bic.w	r2, r3, #16
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	031b      	lsls	r3, r3, #12
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004524:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	f043 0307 	orr.w	r3, r3, #7
 8004530:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	609a      	str	r2, [r3, #8]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800455e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	431a      	orrs	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4313      	orrs	r3, r2
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	609a      	str	r2, [r3, #8]
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 031f 	and.w	r3, r3, #31
 8004596:	2201      	movs	r2, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1a      	ldr	r2, [r3, #32]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	401a      	ands	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1a      	ldr	r2, [r3, #32]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 031f 	and.w	r3, r3, #31
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	fa01 f303 	lsl.w	r3, r1, r3
 80045bc:	431a      	orrs	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
	...

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e04f      	b.n	8004688 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a21      	ldr	r2, [pc, #132]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d108      	bne.n	8004624 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004618:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a14      	ldr	r2, [pc, #80]	; (8004694 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d009      	beq.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004650:	d004      	beq.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10c      	bne.n	8004676 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	4313      	orrs	r3, r2
 800466c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40014000 	.word	0x40014000

0800469c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e040      	b.n	8004730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc fe94 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2224      	movs	r2, #36	; 0x24
 80046c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0201 	bic.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f8c0 	bl	8004860 <UART_SetConfig>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d101      	bne.n	80046ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e022      	b.n	8004730 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fb0e 	bl	8004d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 fb95 	bl	8004e58 <UART_CheckIdleState>
 800472e:	4603      	mov	r3, r0
}
 8004730:	4618      	mov	r0, r3
 8004732:	3708      	adds	r7, #8
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800474c:	2b20      	cmp	r3, #32
 800474e:	f040 8082 	bne.w	8004856 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_Transmit+0x26>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07a      	b.n	8004858 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004768:	2b01      	cmp	r3, #1
 800476a:	d101      	bne.n	8004770 <HAL_UART_Transmit+0x38>
 800476c:	2302      	movs	r3, #2
 800476e:	e073      	b.n	8004858 <HAL_UART_Transmit+0x120>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2221      	movs	r2, #33	; 0x21
 8004784:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004786:	f7fc ff25 	bl	80015d4 <HAL_GetTick>
 800478a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	88fa      	ldrh	r2, [r7, #6]
 8004790:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	88fa      	ldrh	r2, [r7, #6]
 8004798:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a4:	d108      	bne.n	80047b8 <HAL_UART_Transmit+0x80>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	61bb      	str	r3, [r7, #24]
 80047b6:	e003      	b.n	80047c0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80047c8:	e02d      	b.n	8004826 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2180      	movs	r1, #128	; 0x80
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fb88 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e039      	b.n	8004858 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	881a      	ldrh	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047f6:	b292      	uxth	r2, r2
 80047f8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	3302      	adds	r3, #2
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e008      	b.n	8004814 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	b292      	uxth	r2, r2
 800480c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	3301      	adds	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800481a:	b29b      	uxth	r3, r3
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800482c:	b29b      	uxth	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1cb      	bne.n	80047ca <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2200      	movs	r2, #0
 800483a:	2140      	movs	r1, #64	; 0x40
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fb54 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e005      	b.n	8004858 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2220      	movs	r2, #32
 8004850:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004852:	2300      	movs	r3, #0
 8004854:	e000      	b.n	8004858 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004856:	2302      	movs	r3, #2
  }
}
 8004858:	4618      	mov	r0, r3
 800485a:	3720      	adds	r7, #32
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004864:	b08a      	sub	sp, #40	; 0x28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	431a      	orrs	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	431a      	orrs	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	4313      	orrs	r3, r2
 8004886:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	4b9e      	ldr	r3, [pc, #632]	; (8004b08 <UART_SetConfig+0x2a8>)
 8004890:	4013      	ands	r3, r2
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004898:	430b      	orrs	r3, r1
 800489a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a93      	ldr	r2, [pc, #588]	; (8004b0c <UART_SetConfig+0x2ac>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c8:	4313      	orrs	r3, r2
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a8a      	ldr	r2, [pc, #552]	; (8004b10 <UART_SetConfig+0x2b0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d126      	bne.n	8004938 <UART_SetConfig+0xd8>
 80048ea:	4b8a      	ldr	r3, [pc, #552]	; (8004b14 <UART_SetConfig+0x2b4>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f003 0303 	and.w	r3, r3, #3
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d81b      	bhi.n	8004930 <UART_SetConfig+0xd0>
 80048f8:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <UART_SetConfig+0xa0>)
 80048fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048fe:	bf00      	nop
 8004900:	08004911 	.word	0x08004911
 8004904:	08004921 	.word	0x08004921
 8004908:	08004919 	.word	0x08004919
 800490c:	08004929 	.word	0x08004929
 8004910:	2301      	movs	r3, #1
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004916:	e0ab      	b.n	8004a70 <UART_SetConfig+0x210>
 8004918:	2302      	movs	r3, #2
 800491a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800491e:	e0a7      	b.n	8004a70 <UART_SetConfig+0x210>
 8004920:	2304      	movs	r3, #4
 8004922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004926:	e0a3      	b.n	8004a70 <UART_SetConfig+0x210>
 8004928:	2308      	movs	r3, #8
 800492a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800492e:	e09f      	b.n	8004a70 <UART_SetConfig+0x210>
 8004930:	2310      	movs	r3, #16
 8004932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004936:	e09b      	b.n	8004a70 <UART_SetConfig+0x210>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a76      	ldr	r2, [pc, #472]	; (8004b18 <UART_SetConfig+0x2b8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d138      	bne.n	80049b4 <UART_SetConfig+0x154>
 8004942:	4b74      	ldr	r3, [pc, #464]	; (8004b14 <UART_SetConfig+0x2b4>)
 8004944:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004948:	f003 030c 	and.w	r3, r3, #12
 800494c:	2b0c      	cmp	r3, #12
 800494e:	d82d      	bhi.n	80049ac <UART_SetConfig+0x14c>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <UART_SetConfig+0xf8>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	0800498d 	.word	0x0800498d
 800495c:	080049ad 	.word	0x080049ad
 8004960:	080049ad 	.word	0x080049ad
 8004964:	080049ad 	.word	0x080049ad
 8004968:	0800499d 	.word	0x0800499d
 800496c:	080049ad 	.word	0x080049ad
 8004970:	080049ad 	.word	0x080049ad
 8004974:	080049ad 	.word	0x080049ad
 8004978:	08004995 	.word	0x08004995
 800497c:	080049ad 	.word	0x080049ad
 8004980:	080049ad 	.word	0x080049ad
 8004984:	080049ad 	.word	0x080049ad
 8004988:	080049a5 	.word	0x080049a5
 800498c:	2300      	movs	r3, #0
 800498e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004992:	e06d      	b.n	8004a70 <UART_SetConfig+0x210>
 8004994:	2302      	movs	r3, #2
 8004996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800499a:	e069      	b.n	8004a70 <UART_SetConfig+0x210>
 800499c:	2304      	movs	r3, #4
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049a2:	e065      	b.n	8004a70 <UART_SetConfig+0x210>
 80049a4:	2308      	movs	r3, #8
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049aa:	e061      	b.n	8004a70 <UART_SetConfig+0x210>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049b2:	e05d      	b.n	8004a70 <UART_SetConfig+0x210>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a58      	ldr	r2, [pc, #352]	; (8004b1c <UART_SetConfig+0x2bc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d125      	bne.n	8004a0a <UART_SetConfig+0x1aa>
 80049be:	4b55      	ldr	r3, [pc, #340]	; (8004b14 <UART_SetConfig+0x2b4>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80049c8:	2b30      	cmp	r3, #48	; 0x30
 80049ca:	d016      	beq.n	80049fa <UART_SetConfig+0x19a>
 80049cc:	2b30      	cmp	r3, #48	; 0x30
 80049ce:	d818      	bhi.n	8004a02 <UART_SetConfig+0x1a2>
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	d00a      	beq.n	80049ea <UART_SetConfig+0x18a>
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	d814      	bhi.n	8004a02 <UART_SetConfig+0x1a2>
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <UART_SetConfig+0x182>
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d008      	beq.n	80049f2 <UART_SetConfig+0x192>
 80049e0:	e00f      	b.n	8004a02 <UART_SetConfig+0x1a2>
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049e8:	e042      	b.n	8004a70 <UART_SetConfig+0x210>
 80049ea:	2302      	movs	r3, #2
 80049ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f0:	e03e      	b.n	8004a70 <UART_SetConfig+0x210>
 80049f2:	2304      	movs	r3, #4
 80049f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80049f8:	e03a      	b.n	8004a70 <UART_SetConfig+0x210>
 80049fa:	2308      	movs	r3, #8
 80049fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a00:	e036      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a02:	2310      	movs	r3, #16
 8004a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a08:	e032      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3f      	ldr	r2, [pc, #252]	; (8004b0c <UART_SetConfig+0x2ac>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d12a      	bne.n	8004a6a <UART_SetConfig+0x20a>
 8004a14:	4b3f      	ldr	r3, [pc, #252]	; (8004b14 <UART_SetConfig+0x2b4>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a22:	d01a      	beq.n	8004a5a <UART_SetConfig+0x1fa>
 8004a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a28:	d81b      	bhi.n	8004a62 <UART_SetConfig+0x202>
 8004a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a2e:	d00c      	beq.n	8004a4a <UART_SetConfig+0x1ea>
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a34:	d815      	bhi.n	8004a62 <UART_SetConfig+0x202>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <UART_SetConfig+0x1e2>
 8004a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a3e:	d008      	beq.n	8004a52 <UART_SetConfig+0x1f2>
 8004a40:	e00f      	b.n	8004a62 <UART_SetConfig+0x202>
 8004a42:	2300      	movs	r3, #0
 8004a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a48:	e012      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a50:	e00e      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a52:	2304      	movs	r3, #4
 8004a54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a58:	e00a      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a60:	e006      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a62:	2310      	movs	r3, #16
 8004a64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a68:	e002      	b.n	8004a70 <UART_SetConfig+0x210>
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <UART_SetConfig+0x2ac>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	f040 808a 	bne.w	8004b90 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a80:	2b08      	cmp	r3, #8
 8004a82:	d824      	bhi.n	8004ace <UART_SetConfig+0x26e>
 8004a84:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <UART_SetConfig+0x22c>)
 8004a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8a:	bf00      	nop
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004acf 	.word	0x08004acf
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004acf 	.word	0x08004acf
 8004a9c:	08004abf 	.word	0x08004abf
 8004aa0:	08004acf 	.word	0x08004acf
 8004aa4:	08004acf 	.word	0x08004acf
 8004aa8:	08004acf 	.word	0x08004acf
 8004aac:	08004ac7 	.word	0x08004ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ab0:	f7fd fe48 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8004ab4:	61f8      	str	r0, [r7, #28]
        break;
 8004ab6:	e010      	b.n	8004ada <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab8:	4b19      	ldr	r3, [pc, #100]	; (8004b20 <UART_SetConfig+0x2c0>)
 8004aba:	61fb      	str	r3, [r7, #28]
        break;
 8004abc:	e00d      	b.n	8004ada <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004abe:	f7fd fda9 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8004ac2:	61f8      	str	r0, [r7, #28]
        break;
 8004ac4:	e009      	b.n	8004ada <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aca:	61fb      	str	r3, [r7, #28]
        break;
 8004acc:	e005      	b.n	8004ada <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ad8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8109 	beq.w	8004cf4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	005b      	lsls	r3, r3, #1
 8004aea:	4413      	add	r3, r2
 8004aec:	69fa      	ldr	r2, [r7, #28]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d305      	bcc.n	8004afe <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004af8:	69fa      	ldr	r2, [r7, #28]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d912      	bls.n	8004b24 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b04:	e0f6      	b.n	8004cf4 <UART_SetConfig+0x494>
 8004b06:	bf00      	nop
 8004b08:	efff69f3 	.word	0xefff69f3
 8004b0c:	40008000 	.word	0x40008000
 8004b10:	40013800 	.word	0x40013800
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40004400 	.word	0x40004400
 8004b1c:	40004800 	.word	0x40004800
 8004b20:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	2200      	movs	r2, #0
 8004b28:	461c      	mov	r4, r3
 8004b2a:	4615      	mov	r5, r2
 8004b2c:	f04f 0200 	mov.w	r2, #0
 8004b30:	f04f 0300 	mov.w	r3, #0
 8004b34:	022b      	lsls	r3, r5, #8
 8004b36:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b3a:	0222      	lsls	r2, r4, #8
 8004b3c:	68f9      	ldr	r1, [r7, #12]
 8004b3e:	6849      	ldr	r1, [r1, #4]
 8004b40:	0849      	lsrs	r1, r1, #1
 8004b42:	2000      	movs	r0, #0
 8004b44:	4688      	mov	r8, r1
 8004b46:	4681      	mov	r9, r0
 8004b48:	eb12 0a08 	adds.w	sl, r2, r8
 8004b4c:	eb43 0b09 	adc.w	fp, r3, r9
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5e:	4650      	mov	r0, sl
 8004b60:	4659      	mov	r1, fp
 8004b62:	f7fb fb8d 	bl	8000280 <__aeabi_uldivmod>
 8004b66:	4602      	mov	r2, r0
 8004b68:	460b      	mov	r3, r1
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b74:	d308      	bcc.n	8004b88 <UART_SetConfig+0x328>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b7c:	d204      	bcs.n	8004b88 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	60da      	str	r2, [r3, #12]
 8004b86:	e0b5      	b.n	8004cf4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004b8e:	e0b1      	b.n	8004cf4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	d15d      	bne.n	8004c56 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004b9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d827      	bhi.n	8004bf2 <UART_SetConfig+0x392>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <UART_SetConfig+0x348>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bcd 	.word	0x08004bcd
 8004bac:	08004bd5 	.word	0x08004bd5
 8004bb0:	08004bdd 	.word	0x08004bdd
 8004bb4:	08004bf3 	.word	0x08004bf3
 8004bb8:	08004be3 	.word	0x08004be3
 8004bbc:	08004bf3 	.word	0x08004bf3
 8004bc0:	08004bf3 	.word	0x08004bf3
 8004bc4:	08004bf3 	.word	0x08004bf3
 8004bc8:	08004beb 	.word	0x08004beb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bcc:	f7fd fdba 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8004bd0:	61f8      	str	r0, [r7, #28]
        break;
 8004bd2:	e014      	b.n	8004bfe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fd fdcc 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	61f8      	str	r0, [r7, #28]
        break;
 8004bda:	e010      	b.n	8004bfe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bdc:	4b4c      	ldr	r3, [pc, #304]	; (8004d10 <UART_SetConfig+0x4b0>)
 8004bde:	61fb      	str	r3, [r7, #28]
        break;
 8004be0:	e00d      	b.n	8004bfe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004be2:	f7fd fd17 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8004be6:	61f8      	str	r0, [r7, #28]
        break;
 8004be8:	e009      	b.n	8004bfe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bee:	61fb      	str	r3, [r7, #28]
        break;
 8004bf0:	e005      	b.n	8004bfe <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d077      	beq.n	8004cf4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005a      	lsls	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	085b      	lsrs	r3, r3, #1
 8004c0e:	441a      	add	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	2b0f      	cmp	r3, #15
 8004c1e:	d916      	bls.n	8004c4e <UART_SetConfig+0x3ee>
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c26:	d212      	bcs.n	8004c4e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	f023 030f 	bic.w	r3, r3, #15
 8004c30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	085b      	lsrs	r3, r3, #1
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	8afb      	ldrh	r3, [r7, #22]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	8afa      	ldrh	r2, [r7, #22]
 8004c4a:	60da      	str	r2, [r3, #12]
 8004c4c:	e052      	b.n	8004cf4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004c54:	e04e      	b.n	8004cf4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c5a:	2b08      	cmp	r3, #8
 8004c5c:	d827      	bhi.n	8004cae <UART_SetConfig+0x44e>
 8004c5e:	a201      	add	r2, pc, #4	; (adr r2, 8004c64 <UART_SetConfig+0x404>)
 8004c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c64:	08004c89 	.word	0x08004c89
 8004c68:	08004c91 	.word	0x08004c91
 8004c6c:	08004c99 	.word	0x08004c99
 8004c70:	08004caf 	.word	0x08004caf
 8004c74:	08004c9f 	.word	0x08004c9f
 8004c78:	08004caf 	.word	0x08004caf
 8004c7c:	08004caf 	.word	0x08004caf
 8004c80:	08004caf 	.word	0x08004caf
 8004c84:	08004ca7 	.word	0x08004ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c88:	f7fd fd5c 	bl	8002744 <HAL_RCC_GetPCLK1Freq>
 8004c8c:	61f8      	str	r0, [r7, #28]
        break;
 8004c8e:	e014      	b.n	8004cba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c90:	f7fd fd6e 	bl	8002770 <HAL_RCC_GetPCLK2Freq>
 8004c94:	61f8      	str	r0, [r7, #28]
        break;
 8004c96:	e010      	b.n	8004cba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c98:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <UART_SetConfig+0x4b0>)
 8004c9a:	61fb      	str	r3, [r7, #28]
        break;
 8004c9c:	e00d      	b.n	8004cba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c9e:	f7fd fcb9 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 8004ca2:	61f8      	str	r0, [r7, #28]
        break;
 8004ca4:	e009      	b.n	8004cba <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004caa:	61fb      	str	r3, [r7, #28]
        break;
 8004cac:	e005      	b.n	8004cba <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004cb8:	bf00      	nop
    }

    if (pclk != 0U)
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d019      	beq.n	8004cf4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	085a      	lsrs	r2, r3, #1
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	441a      	add	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	2b0f      	cmp	r3, #15
 8004cd8:	d909      	bls.n	8004cee <UART_SetConfig+0x48e>
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce0:	d205      	bcs.n	8004cee <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60da      	str	r2, [r3, #12]
 8004cec:	e002      	b.n	8004cf4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3728      	adds	r7, #40	; 0x28
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	00f42400 	.word	0x00f42400

08004d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	f003 0302 	and.w	r3, r3, #2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	430a      	orrs	r2, r1
 8004d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	430a      	orrs	r2, r1
 8004de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01a      	beq.n	8004e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e12:	d10a      	bne.n	8004e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr

08004e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e68:	f7fc fbb4 	bl	80015d4 <HAL_GetTick>
 8004e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d10e      	bne.n	8004e9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e80:	9300      	str	r3, [sp, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f82d 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e023      	b.n	8004ee2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d10e      	bne.n	8004ec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f817 	bl	8004eea <UART_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e00d      	b.n	8004ee2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2220      	movs	r2, #32
 8004ed0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3710      	adds	r7, #16
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b09c      	sub	sp, #112	; 0x70
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	603b      	str	r3, [r7, #0]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004efa:	e0a5      	b.n	8005048 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	f000 80a1 	beq.w	8005048 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f06:	f7fc fb65 	bl	80015d4 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d302      	bcc.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x32>
 8004f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d13e      	bne.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f30:	667b      	str	r3, [r7, #100]	; 0x64
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	663b      	str	r3, [r7, #96]	; 0x60
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e5      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e067      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d04f      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fb6:	d147      	bne.n	8005048 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fc0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	461a      	mov	r2, r3
 8004fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e6      	bne.n	8004fc2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3308      	adds	r3, #8
 8004ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	613b      	str	r3, [r7, #16]
   return(result);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	66bb      	str	r3, [r7, #104]	; 0x68
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	3308      	adds	r3, #8
 8005012:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005014:	623a      	str	r2, [r7, #32]
 8005016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	69f9      	ldr	r1, [r7, #28]
 800501a:	6a3a      	ldr	r2, [r7, #32]
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	61bb      	str	r3, [r7, #24]
   return(result);
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e5      	bne.n	8004ff4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e010      	b.n	800506a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	f43f af4a 	beq.w	8004efc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3770      	adds	r7, #112	; 0x70
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <setCSLine>:
#define RES14           14

#define AMT22_DELAY     10

void setCSLine (GPIO_TypeDef* encoderPort, uint16_t encoderPin, GPIO_PinState csLine)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	807b      	strh	r3, [r7, #2]
 800507e:	4613      	mov	r3, r2
 8005080:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8005082:	787a      	ldrb	r2, [r7, #1]
 8005084:	887b      	ldrh	r3, [r7, #2]
 8005086:	4619      	mov	r1, r3
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7fc fd33 	bl	8001af4 <HAL_GPIO_WritePin>
}
 800508e:	bf00      	nop
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <spiWriteRead>:

uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t releaseLine, TIM_HandleTypeDef *timer)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b088      	sub	sp, #32
 800509a:	af02      	add	r7, sp, #8
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	461a      	mov	r2, r3
 80050a2:	460b      	mov	r3, r1
 80050a4:	72fb      	strb	r3, [r7, #11]
 80050a6:	4613      	mov	r3, r2
 80050a8:	813b      	strh	r3, [r7, #8]
  //to hold received data  
  uint8_t data;

  //set cs low, cs may already be low but there's no issue calling it again except for extra time
  setCSLine(encoderPort, encoderPin , GPIO_PIN_RESET);
 80050aa:	893b      	ldrh	r3, [r7, #8]
 80050ac:	2200      	movs	r2, #0
 80050ae:	4619      	mov	r1, r3
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff ffde 	bl	8005072 <setCSLine>

  //There is a minimum time requirement after CS goes low before data can be clocked out of the encoder.
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80050b6:	200a      	movs	r0, #10
 80050b8:	f000 f988 	bl	80053cc <delay_us_AMT22>

  //send the command and receive response of the slave
  HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 80050bc:	f107 0217 	add.w	r2, r7, #23
 80050c0:	f107 010b 	add.w	r1, r7, #11
 80050c4:	230a      	movs	r3, #10
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	2301      	movs	r3, #1
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7fd ffa5 	bl	800301a <HAL_SPI_TransmitReceive>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
  //  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80050d0:	200a      	movs	r0, #10
 80050d2:	f000 f97b 	bl	80053cc <delay_us_AMT22>

  setCSLine(encoderPort, encoderPin, releaseLine); //if releaseLine is high set it high else it stays low
 80050d6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80050da:	893b      	ldrh	r3, [r7, #8]
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff ffc7 	bl	8005072 <setCSLine>

  return data;
 80050e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <getTurnCounterSPI>:

// TODO: Fix this. It's 2am so I'm probably missing something very obvious.
void getTurnCounterSPI(int16_t* returnArr, SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, uint8_t resolution, TIM_HandleTypeDef *timer)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b090      	sub	sp, #64	; 0x40
 80050f2:	af02      	add	r7, sp, #8
 80050f4:	60f8      	str	r0, [r7, #12]
 80050f6:	60b9      	str	r1, [r7, #8]
 80050f8:	607a      	str	r2, [r7, #4]
 80050fa:	807b      	strh	r3, [r7, #2]
	uint8_t binaryArray[16];        //after receiving the position we will populate this array and use it for calculating the checksum
	int16_t position, turns;
	int16_t ret_arr[2];

	//get first byte which is the high byte, shift it 8 bits. don't release line for the first byte
	bitstream = (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8);
 80050fc:	887a      	ldrh	r2, [r7, #2]
 80050fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	2300      	movs	r3, #0
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	4613      	mov	r3, r2
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	2100      	movs	r1, #0
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f7ff ffc2 	bl	8005096 <spiWriteRead>
 8005112:	4603      	mov	r3, r0
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28

	//this is the time required between bytes as specified in the datasheet.
	//  delay(timer, 3);
	delay_us_AMT22(AMT22_DELAY);
 8005118:	200a      	movs	r0, #10
 800511a:	f000 f957 	bl	80053cc <delay_us_AMT22>

	//OR the low byte with the currentPosition variable. release line after second byte
	bitstream |= (spiWriteRead(hspi, AMT22_TURNS, encoderPort, encoderPin, 0, timer));
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	2300      	movs	r3, #0
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	21a0      	movs	r1, #160	; 0xa0
 800512e:	68b8      	ldr	r0, [r7, #8]
 8005130:	f7ff ffb1 	bl	8005096 <spiWriteRead>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	4313      	orrs	r3, r2
 800513c:	62bb      	str	r3, [r7, #40]	; 0x28

	delay_us_AMT22(AMT22_DELAY);
 800513e:	200a      	movs	r0, #10
 8005140:	f000 f944 	bl	80053cc <delay_us_AMT22>

	// Datasheet says the number will be a 14 bit signed integer, so shift the lower 8 bits
	// by 10 to align the sign bits
	bitstream2 = (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer) << 8);
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	2300      	movs	r3, #0
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	4613      	mov	r3, r2
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	2100      	movs	r1, #0
 8005154:	68b8      	ldr	r0, [r7, #8]
 8005156:	f7ff ff9e 	bl	8005096 <spiWriteRead>
 800515a:	4603      	mov	r3, r0
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	627b      	str	r3, [r7, #36]	; 0x24

	delay_us_AMT22(AMT22_DELAY);
 8005160:	200a      	movs	r0, #10
 8005162:	f000 f933 	bl	80053cc <delay_us_AMT22>

	// Read the lower two bits, and shift them left by 2 since we shifted the high bits by 10 already
	bitstream2 |= (spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1, timer));
 8005166:	887a      	ldrh	r2, [r7, #2]
 8005168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	2301      	movs	r3, #1
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	2100      	movs	r1, #0
 8005176:	68b8      	ldr	r0, [r7, #8]
 8005178:	f7ff ff8d 	bl	8005096 <spiWriteRead>
 800517c:	4603      	mov	r3, r0
 800517e:	461a      	mov	r2, r3
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	4313      	orrs	r3, r2
 8005184:	627b      	str	r3, [r7, #36]	; 0x24

  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++){binaryArray[i] = (0x01) & (bitstream >> (i));}
 8005186:	2300      	movs	r3, #0
 8005188:	633b      	str	r3, [r7, #48]	; 0x30
 800518a:	e010      	b.n	80051ae <getTurnCounterSPI+0xc0>
 800518c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800518e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005190:	fa22 f303 	lsr.w	r3, r2, r3
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	b2d9      	uxtb	r1, r3
 800519c:	f107 0214 	add.w	r2, r7, #20
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	4413      	add	r3, r2
 80051a4:	460a      	mov	r2, r1
 80051a6:	701a      	strb	r2, [r3, #0]
 80051a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051aa:	3301      	adds	r3, #1
 80051ac:	633b      	str	r3, [r7, #48]	; 0x30
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	ddeb      	ble.n	800518c <getTurnCounterSPI+0x9e>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
	if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 80051b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051b8:	4619      	mov	r1, r3
 80051ba:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80051be:	7ffb      	ldrb	r3, [r7, #31]
 80051c0:	4053      	eors	r3, r2
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	7f7b      	ldrb	r3, [r7, #29]
 80051c6:	4053      	eors	r3, r2
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	7efb      	ldrb	r3, [r7, #27]
 80051cc:	4053      	eors	r3, r2
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	7e7b      	ldrb	r3, [r7, #25]
 80051d2:	4053      	eors	r3, r2
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
 80051d8:	4053      	eors	r3, r2
 80051da:	b2da      	uxtb	r2, r3
 80051dc:	7d7b      	ldrb	r3, [r7, #21]
 80051de:	429a      	cmp	r2, r3
 80051e0:	bf0c      	ite	eq
 80051e2:	2301      	moveq	r3, #1
 80051e4:	2300      	movne	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	4299      	cmp	r1, r3
 80051ea:	d122      	bne.n	8005232 <getTurnCounterSPI+0x144>
		 && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 80051ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80051f0:	4619      	mov	r1, r3
 80051f2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80051f6:	7fbb      	ldrb	r3, [r7, #30]
 80051f8:	4053      	eors	r3, r2
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	7f3b      	ldrb	r3, [r7, #28]
 80051fe:	4053      	eors	r3, r2
 8005200:	b2da      	uxtb	r2, r3
 8005202:	7ebb      	ldrb	r3, [r7, #26]
 8005204:	4053      	eors	r3, r2
 8005206:	b2da      	uxtb	r2, r3
 8005208:	7e3b      	ldrb	r3, [r7, #24]
 800520a:	4053      	eors	r3, r2
 800520c:	b2da      	uxtb	r2, r3
 800520e:	7dbb      	ldrb	r3, [r7, #22]
 8005210:	4053      	eors	r3, r2
 8005212:	b2da      	uxtb	r2, r3
 8005214:	7d3b      	ldrb	r3, [r7, #20]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	4299      	cmp	r1, r3
 8005222:	d106      	bne.n	8005232 <getTurnCounterSPI+0x144>
	{
	 //we got back a good position, so just mask away the checkbits
	 bitstream &= 0x3FFF;
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800522a:	62bb      	str	r3, [r7, #40]	; 0x28

	 // extend sign bit here?
	 // if(bitstream & 0x2000){turns = (0xC000 | bitstream);}
	 position = bitstream;
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005230:	e002      	b.n	8005238 <getTurnCounterSPI+0x14a>
	}
	else
	{
	position = 0xFFFF; //bad position
 8005232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005236:	86fb      	strh	r3, [r7, #54]	; 0x36
	}


  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
  if ((resolution == RES12) && (position != 0xFFFF)) position = position >> 2;
 8005238:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800523c:	2b0c      	cmp	r3, #12
 800523e:	d103      	bne.n	8005248 <getTurnCounterSPI+0x15a>
 8005240:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005244:	109b      	asrs	r3, r3, #2
 8005246:	86fb      	strh	r3, [r7, #54]	; 0x36


  //run through the 16 bits of position and put each bit into a slot in the array so we can do the checksum calculation
  for(int i = 0; i < 16; i++){binaryArray[i] = (0x01) & (bitstream2 >> (i));}
 8005248:	2300      	movs	r3, #0
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524c:	e010      	b.n	8005270 <getTurnCounterSPI+0x182>
 800524e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005252:	fa22 f303 	lsr.w	r3, r2, r3
 8005256:	b2db      	uxtb	r3, r3
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	b2d9      	uxtb	r1, r3
 800525e:	f107 0214 	add.w	r2, r7, #20
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	4413      	add	r3, r2
 8005266:	460a      	mov	r2, r1
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800526c:	3301      	adds	r3, #1
 800526e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b0f      	cmp	r3, #15
 8005274:	ddeb      	ble.n	800524e <getTurnCounterSPI+0x160>

  //using the equation on the datasheet we can calculate the checksums and then make sure they match what the encoder sent
	if ((binaryArray[15] == !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9] ^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3] ^ binaryArray[1]))
 8005276:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800527a:	4619      	mov	r1, r3
 800527c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005280:	7ffb      	ldrb	r3, [r7, #31]
 8005282:	4053      	eors	r3, r2
 8005284:	b2da      	uxtb	r2, r3
 8005286:	7f7b      	ldrb	r3, [r7, #29]
 8005288:	4053      	eors	r3, r2
 800528a:	b2da      	uxtb	r2, r3
 800528c:	7efb      	ldrb	r3, [r7, #27]
 800528e:	4053      	eors	r3, r2
 8005290:	b2da      	uxtb	r2, r3
 8005292:	7e7b      	ldrb	r3, [r7, #25]
 8005294:	4053      	eors	r3, r2
 8005296:	b2da      	uxtb	r2, r3
 8005298:	7dfb      	ldrb	r3, [r7, #23]
 800529a:	4053      	eors	r3, r2
 800529c:	b2da      	uxtb	r2, r3
 800529e:	7d7b      	ldrb	r3, [r7, #21]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	bf0c      	ite	eq
 80052a4:	2301      	moveq	r3, #1
 80052a6:	2300      	movne	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	4299      	cmp	r1, r3
 80052ac:	d130      	bne.n	8005310 <getTurnCounterSPI+0x222>
		 && (binaryArray[14] == !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8] ^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2] ^ binaryArray[0])))
 80052ae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80052b2:	4619      	mov	r1, r3
 80052b4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80052b8:	7fbb      	ldrb	r3, [r7, #30]
 80052ba:	4053      	eors	r3, r2
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	7f3b      	ldrb	r3, [r7, #28]
 80052c0:	4053      	eors	r3, r2
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	7ebb      	ldrb	r3, [r7, #26]
 80052c6:	4053      	eors	r3, r2
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	7e3b      	ldrb	r3, [r7, #24]
 80052cc:	4053      	eors	r3, r2
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	7dbb      	ldrb	r3, [r7, #22]
 80052d2:	4053      	eors	r3, r2
 80052d4:	b2da      	uxtb	r2, r3
 80052d6:	7d3b      	ldrb	r3, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	4299      	cmp	r1, r3
 80052e4:	d114      	bne.n	8005310 <getTurnCounterSPI+0x222>
	{
	 //we got back a good position, so just mask away the checkbits
	 bitstream2 &= 0x3FFF;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24

	 // extend sign bit here?
	 if(bitstream2 & 0x2000){
 80052ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d008      	beq.n	800530a <getTurnCounterSPI+0x21c>
		 turns = (0xC000 | bitstream2);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	ea6f 4383 	mvn.w	r3, r3, lsl #18
 8005300:	ea6f 4393 	mvn.w	r3, r3, lsr #18
 8005304:	b29b      	uxth	r3, r3
 8005306:	86bb      	strh	r3, [r7, #52]	; 0x34
	 if(bitstream2 & 0x2000){
 8005308:	e005      	b.n	8005316 <getTurnCounterSPI+0x228>
	 }else{
		 turns = bitstream2;
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	86bb      	strh	r3, [r7, #52]	; 0x34
	 if(bitstream2 & 0x2000){
 800530e:	e002      	b.n	8005316 <getTurnCounterSPI+0x228>
	 }
	}
	else
	{
	turns = 0xFFFF; //bad position
 8005310:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005314:	86bb      	strh	r3, [r7, #52]	; 0x34
	}


  // currentPosition &= 0x3FFF;
  //If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	returnArr[0] = position;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800531a:	801a      	strh	r2, [r3, #0]
	returnArr[1] = turns;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3302      	adds	r3, #2
 8005320:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005322:	801a      	strh	r2, [r3, #0]

}
 8005324:	bf00      	nop
 8005326:	3738      	adds	r7, #56	; 0x38
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <setZeroSPI>:
  if ((resolution == RES12) && (currentPosition != 0xFFFF)) currentPosition = currentPosition >> 2;
  return currentPosition;
}

void setZeroSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af02      	add	r7, sp, #8
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	603b      	str	r3, [r7, #0]
 8005338:	4613      	mov	r3, r2
 800533a:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 800533c:	88fa      	ldrh	r2, [r7, #6]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	2300      	movs	r3, #0
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	2100      	movs	r1, #0
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff fea2 	bl	8005096 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(3);
 8005352:	2003      	movs	r0, #3
 8005354:	f000 f83a 	bl	80053cc <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1, timer);
 8005358:	88fa      	ldrh	r2, [r7, #6]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	9301      	str	r3, [sp, #4]
 800535e:	2301      	movs	r3, #1
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	2170      	movs	r1, #112	; 0x70
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f7ff fe94 	bl	8005096 <spiWriteRead>


//  delay(timer, 250);
  delay_us_AMT22(250);
 800536e:	20fa      	movs	r0, #250	; 0xfa
 8005370:	f000 f82c 	bl	80053cc <delay_us_AMT22>
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <resetAMT22>:

void resetAMT22(SPI_HandleTypeDef *hspi, GPIO_TypeDef* encoderPort, uint16_t encoderPin, TIM_HandleTypeDef *timer)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af02      	add	r7, sp, #8
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	603b      	str	r3, [r7, #0]
 8005388:	4613      	mov	r3, r2
 800538a:	80fb      	strh	r3, [r7, #6]
  spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0, timer);
 800538c:	88fa      	ldrh	r2, [r7, #6]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	2300      	movs	r3, #0
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	4613      	mov	r3, r2
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	2100      	movs	r1, #0
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fe7a 	bl	8005096 <spiWriteRead>

  //There is also a minimum time after clocking that CS should remain asserted before we release it
//  delay(timer, 3);
  delay_us_AMT22(AMT22_DELAY);
 80053a2:	200a      	movs	r0, #10
 80053a4:	f000 f812 	bl	80053cc <delay_us_AMT22>

  spiWriteRead(hspi, AMT22_RESET, encoderPort, encoderPin, 1, timer);
 80053a8:	88fa      	ldrh	r2, [r7, #6]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	9301      	str	r3, [sp, #4]
 80053ae:	2301      	movs	r3, #1
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	4613      	mov	r3, r2
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	2160      	movs	r1, #96	; 0x60
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7ff fe6c 	bl	8005096 <spiWriteRead>

//  delay(timer, 250);
  delay_us_AMT22(250);
 80053be:	20fa      	movs	r0, #250	; 0xfa
 80053c0:	f000 f804 	bl	80053cc <delay_us_AMT22>
}
 80053c4:	bf00      	nop
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <delay_us_AMT22>:
			passedTime +=timer->Init.Period;
		}
	}
}
void delay_us_AMT22 (uint16_t us)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80053d6:	4b09      	ldr	r3, [pc, #36]	; (80053fc <delay_us_AMT22+0x30>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2200      	movs	r2, #0
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80053de:	bf00      	nop
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <delay_us_AMT22+0x30>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053e6:	88fb      	ldrh	r3, [r7, #6]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d3f9      	bcc.n	80053e0 <delay_us_AMT22+0x14>
}
 80053ec:	bf00      	nop
 80053ee:	bf00      	nop
 80053f0:	370c      	adds	r7, #12
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	200001bc 	.word	0x200001bc

08005400 <__errno>:
 8005400:	4b01      	ldr	r3, [pc, #4]	; (8005408 <__errno+0x8>)
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	2000000c 	.word	0x2000000c

0800540c <__libc_init_array>:
 800540c:	b570      	push	{r4, r5, r6, lr}
 800540e:	4d0d      	ldr	r5, [pc, #52]	; (8005444 <__libc_init_array+0x38>)
 8005410:	4c0d      	ldr	r4, [pc, #52]	; (8005448 <__libc_init_array+0x3c>)
 8005412:	1b64      	subs	r4, r4, r5
 8005414:	10a4      	asrs	r4, r4, #2
 8005416:	2600      	movs	r6, #0
 8005418:	42a6      	cmp	r6, r4
 800541a:	d109      	bne.n	8005430 <__libc_init_array+0x24>
 800541c:	4d0b      	ldr	r5, [pc, #44]	; (800544c <__libc_init_array+0x40>)
 800541e:	4c0c      	ldr	r4, [pc, #48]	; (8005450 <__libc_init_array+0x44>)
 8005420:	f001 f998 	bl	8006754 <_init>
 8005424:	1b64      	subs	r4, r4, r5
 8005426:	10a4      	asrs	r4, r4, #2
 8005428:	2600      	movs	r6, #0
 800542a:	42a6      	cmp	r6, r4
 800542c:	d105      	bne.n	800543a <__libc_init_array+0x2e>
 800542e:	bd70      	pop	{r4, r5, r6, pc}
 8005430:	f855 3b04 	ldr.w	r3, [r5], #4
 8005434:	4798      	blx	r3
 8005436:	3601      	adds	r6, #1
 8005438:	e7ee      	b.n	8005418 <__libc_init_array+0xc>
 800543a:	f855 3b04 	ldr.w	r3, [r5], #4
 800543e:	4798      	blx	r3
 8005440:	3601      	adds	r6, #1
 8005442:	e7f2      	b.n	800542a <__libc_init_array+0x1e>
 8005444:	08006f54 	.word	0x08006f54
 8005448:	08006f54 	.word	0x08006f54
 800544c:	08006f54 	.word	0x08006f54
 8005450:	08006f58 	.word	0x08006f58

08005454 <memset>:
 8005454:	4402      	add	r2, r0
 8005456:	4603      	mov	r3, r0
 8005458:	4293      	cmp	r3, r2
 800545a:	d100      	bne.n	800545e <memset+0xa>
 800545c:	4770      	bx	lr
 800545e:	f803 1b01 	strb.w	r1, [r3], #1
 8005462:	e7f9      	b.n	8005458 <memset+0x4>

08005464 <_free_r>:
 8005464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005466:	2900      	cmp	r1, #0
 8005468:	d044      	beq.n	80054f4 <_free_r+0x90>
 800546a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546e:	9001      	str	r0, [sp, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	f1a1 0404 	sub.w	r4, r1, #4
 8005476:	bfb8      	it	lt
 8005478:	18e4      	addlt	r4, r4, r3
 800547a:	f000 fd97 	bl	8005fac <__malloc_lock>
 800547e:	4a1e      	ldr	r2, [pc, #120]	; (80054f8 <_free_r+0x94>)
 8005480:	9801      	ldr	r0, [sp, #4]
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	b933      	cbnz	r3, 8005494 <_free_r+0x30>
 8005486:	6063      	str	r3, [r4, #4]
 8005488:	6014      	str	r4, [r2, #0]
 800548a:	b003      	add	sp, #12
 800548c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005490:	f000 bd92 	b.w	8005fb8 <__malloc_unlock>
 8005494:	42a3      	cmp	r3, r4
 8005496:	d908      	bls.n	80054aa <_free_r+0x46>
 8005498:	6825      	ldr	r5, [r4, #0]
 800549a:	1961      	adds	r1, r4, r5
 800549c:	428b      	cmp	r3, r1
 800549e:	bf01      	itttt	eq
 80054a0:	6819      	ldreq	r1, [r3, #0]
 80054a2:	685b      	ldreq	r3, [r3, #4]
 80054a4:	1949      	addeq	r1, r1, r5
 80054a6:	6021      	streq	r1, [r4, #0]
 80054a8:	e7ed      	b.n	8005486 <_free_r+0x22>
 80054aa:	461a      	mov	r2, r3
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	b10b      	cbz	r3, 80054b4 <_free_r+0x50>
 80054b0:	42a3      	cmp	r3, r4
 80054b2:	d9fa      	bls.n	80054aa <_free_r+0x46>
 80054b4:	6811      	ldr	r1, [r2, #0]
 80054b6:	1855      	adds	r5, r2, r1
 80054b8:	42a5      	cmp	r5, r4
 80054ba:	d10b      	bne.n	80054d4 <_free_r+0x70>
 80054bc:	6824      	ldr	r4, [r4, #0]
 80054be:	4421      	add	r1, r4
 80054c0:	1854      	adds	r4, r2, r1
 80054c2:	42a3      	cmp	r3, r4
 80054c4:	6011      	str	r1, [r2, #0]
 80054c6:	d1e0      	bne.n	800548a <_free_r+0x26>
 80054c8:	681c      	ldr	r4, [r3, #0]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	6053      	str	r3, [r2, #4]
 80054ce:	4421      	add	r1, r4
 80054d0:	6011      	str	r1, [r2, #0]
 80054d2:	e7da      	b.n	800548a <_free_r+0x26>
 80054d4:	d902      	bls.n	80054dc <_free_r+0x78>
 80054d6:	230c      	movs	r3, #12
 80054d8:	6003      	str	r3, [r0, #0]
 80054da:	e7d6      	b.n	800548a <_free_r+0x26>
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1961      	adds	r1, r4, r5
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf04      	itt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	6063      	str	r3, [r4, #4]
 80054ea:	bf04      	itt	eq
 80054ec:	1949      	addeq	r1, r1, r5
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	6054      	str	r4, [r2, #4]
 80054f2:	e7ca      	b.n	800548a <_free_r+0x26>
 80054f4:	b003      	add	sp, #12
 80054f6:	bd30      	pop	{r4, r5, pc}
 80054f8:	200002dc 	.word	0x200002dc

080054fc <sbrk_aligned>:
 80054fc:	b570      	push	{r4, r5, r6, lr}
 80054fe:	4e0e      	ldr	r6, [pc, #56]	; (8005538 <sbrk_aligned+0x3c>)
 8005500:	460c      	mov	r4, r1
 8005502:	6831      	ldr	r1, [r6, #0]
 8005504:	4605      	mov	r5, r0
 8005506:	b911      	cbnz	r1, 800550e <sbrk_aligned+0x12>
 8005508:	f000 f92e 	bl	8005768 <_sbrk_r>
 800550c:	6030      	str	r0, [r6, #0]
 800550e:	4621      	mov	r1, r4
 8005510:	4628      	mov	r0, r5
 8005512:	f000 f929 	bl	8005768 <_sbrk_r>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	d00a      	beq.n	8005530 <sbrk_aligned+0x34>
 800551a:	1cc4      	adds	r4, r0, #3
 800551c:	f024 0403 	bic.w	r4, r4, #3
 8005520:	42a0      	cmp	r0, r4
 8005522:	d007      	beq.n	8005534 <sbrk_aligned+0x38>
 8005524:	1a21      	subs	r1, r4, r0
 8005526:	4628      	mov	r0, r5
 8005528:	f000 f91e 	bl	8005768 <_sbrk_r>
 800552c:	3001      	adds	r0, #1
 800552e:	d101      	bne.n	8005534 <sbrk_aligned+0x38>
 8005530:	f04f 34ff 	mov.w	r4, #4294967295
 8005534:	4620      	mov	r0, r4
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	200002e0 	.word	0x200002e0

0800553c <_malloc_r>:
 800553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005540:	1ccd      	adds	r5, r1, #3
 8005542:	f025 0503 	bic.w	r5, r5, #3
 8005546:	3508      	adds	r5, #8
 8005548:	2d0c      	cmp	r5, #12
 800554a:	bf38      	it	cc
 800554c:	250c      	movcc	r5, #12
 800554e:	2d00      	cmp	r5, #0
 8005550:	4607      	mov	r7, r0
 8005552:	db01      	blt.n	8005558 <_malloc_r+0x1c>
 8005554:	42a9      	cmp	r1, r5
 8005556:	d905      	bls.n	8005564 <_malloc_r+0x28>
 8005558:	230c      	movs	r3, #12
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	2600      	movs	r6, #0
 800555e:	4630      	mov	r0, r6
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	4e2e      	ldr	r6, [pc, #184]	; (8005620 <_malloc_r+0xe4>)
 8005566:	f000 fd21 	bl	8005fac <__malloc_lock>
 800556a:	6833      	ldr	r3, [r6, #0]
 800556c:	461c      	mov	r4, r3
 800556e:	bb34      	cbnz	r4, 80055be <_malloc_r+0x82>
 8005570:	4629      	mov	r1, r5
 8005572:	4638      	mov	r0, r7
 8005574:	f7ff ffc2 	bl	80054fc <sbrk_aligned>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	4604      	mov	r4, r0
 800557c:	d14d      	bne.n	800561a <_malloc_r+0xde>
 800557e:	6834      	ldr	r4, [r6, #0]
 8005580:	4626      	mov	r6, r4
 8005582:	2e00      	cmp	r6, #0
 8005584:	d140      	bne.n	8005608 <_malloc_r+0xcc>
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	4631      	mov	r1, r6
 800558a:	4638      	mov	r0, r7
 800558c:	eb04 0803 	add.w	r8, r4, r3
 8005590:	f000 f8ea 	bl	8005768 <_sbrk_r>
 8005594:	4580      	cmp	r8, r0
 8005596:	d13a      	bne.n	800560e <_malloc_r+0xd2>
 8005598:	6821      	ldr	r1, [r4, #0]
 800559a:	3503      	adds	r5, #3
 800559c:	1a6d      	subs	r5, r5, r1
 800559e:	f025 0503 	bic.w	r5, r5, #3
 80055a2:	3508      	adds	r5, #8
 80055a4:	2d0c      	cmp	r5, #12
 80055a6:	bf38      	it	cc
 80055a8:	250c      	movcc	r5, #12
 80055aa:	4629      	mov	r1, r5
 80055ac:	4638      	mov	r0, r7
 80055ae:	f7ff ffa5 	bl	80054fc <sbrk_aligned>
 80055b2:	3001      	adds	r0, #1
 80055b4:	d02b      	beq.n	800560e <_malloc_r+0xd2>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	442b      	add	r3, r5
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	e00e      	b.n	80055dc <_malloc_r+0xa0>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	1b52      	subs	r2, r2, r5
 80055c2:	d41e      	bmi.n	8005602 <_malloc_r+0xc6>
 80055c4:	2a0b      	cmp	r2, #11
 80055c6:	d916      	bls.n	80055f6 <_malloc_r+0xba>
 80055c8:	1961      	adds	r1, r4, r5
 80055ca:	42a3      	cmp	r3, r4
 80055cc:	6025      	str	r5, [r4, #0]
 80055ce:	bf18      	it	ne
 80055d0:	6059      	strne	r1, [r3, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	bf08      	it	eq
 80055d6:	6031      	streq	r1, [r6, #0]
 80055d8:	5162      	str	r2, [r4, r5]
 80055da:	604b      	str	r3, [r1, #4]
 80055dc:	4638      	mov	r0, r7
 80055de:	f104 060b 	add.w	r6, r4, #11
 80055e2:	f000 fce9 	bl	8005fb8 <__malloc_unlock>
 80055e6:	f026 0607 	bic.w	r6, r6, #7
 80055ea:	1d23      	adds	r3, r4, #4
 80055ec:	1af2      	subs	r2, r6, r3
 80055ee:	d0b6      	beq.n	800555e <_malloc_r+0x22>
 80055f0:	1b9b      	subs	r3, r3, r6
 80055f2:	50a3      	str	r3, [r4, r2]
 80055f4:	e7b3      	b.n	800555e <_malloc_r+0x22>
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	42a3      	cmp	r3, r4
 80055fa:	bf0c      	ite	eq
 80055fc:	6032      	streq	r2, [r6, #0]
 80055fe:	605a      	strne	r2, [r3, #4]
 8005600:	e7ec      	b.n	80055dc <_malloc_r+0xa0>
 8005602:	4623      	mov	r3, r4
 8005604:	6864      	ldr	r4, [r4, #4]
 8005606:	e7b2      	b.n	800556e <_malloc_r+0x32>
 8005608:	4634      	mov	r4, r6
 800560a:	6876      	ldr	r6, [r6, #4]
 800560c:	e7b9      	b.n	8005582 <_malloc_r+0x46>
 800560e:	230c      	movs	r3, #12
 8005610:	603b      	str	r3, [r7, #0]
 8005612:	4638      	mov	r0, r7
 8005614:	f000 fcd0 	bl	8005fb8 <__malloc_unlock>
 8005618:	e7a1      	b.n	800555e <_malloc_r+0x22>
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	e7de      	b.n	80055dc <_malloc_r+0xa0>
 800561e:	bf00      	nop
 8005620:	200002dc 	.word	0x200002dc

08005624 <_perror_r>:
 8005624:	6983      	ldr	r3, [r0, #24]
 8005626:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005628:	68c4      	ldr	r4, [r0, #12]
 800562a:	4605      	mov	r5, r0
 800562c:	460e      	mov	r6, r1
 800562e:	b90b      	cbnz	r3, 8005634 <_perror_r+0x10>
 8005630:	f000 fc1c 	bl	8005e6c <__sinit>
 8005634:	4b43      	ldr	r3, [pc, #268]	; (8005744 <_perror_r+0x120>)
 8005636:	429c      	cmp	r4, r3
 8005638:	d132      	bne.n	80056a0 <_perror_r+0x7c>
 800563a:	686c      	ldr	r4, [r5, #4]
 800563c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800563e:	07d8      	lsls	r0, r3, #31
 8005640:	d405      	bmi.n	800564e <_perror_r+0x2a>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	0599      	lsls	r1, r3, #22
 8005646:	d402      	bmi.n	800564e <_perror_r+0x2a>
 8005648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564a:	f000 fcad 	bl	8005fa8 <__retarget_lock_acquire_recursive>
 800564e:	4621      	mov	r1, r4
 8005650:	4628      	mov	r0, r5
 8005652:	f000 fb39 	bl	8005cc8 <_fflush_r>
 8005656:	bb6e      	cbnz	r6, 80056b4 <_perror_r+0x90>
 8005658:	6829      	ldr	r1, [r5, #0]
 800565a:	ab01      	add	r3, sp, #4
 800565c:	2201      	movs	r2, #1
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f892 	bl	8005788 <_strerror_r>
 8005664:	4607      	mov	r7, r0
 8005666:	2800      	cmp	r0, #0
 8005668:	d14f      	bne.n	800570a <_perror_r+0xe6>
 800566a:	4837      	ldr	r0, [pc, #220]	; (8005748 <_perror_r+0x124>)
 800566c:	4f36      	ldr	r7, [pc, #216]	; (8005748 <_perror_r+0x124>)
 800566e:	f7fa fdaf 	bl	80001d0 <strlen>
 8005672:	4606      	mov	r6, r0
 8005674:	b156      	cbz	r6, 800568c <_perror_r+0x68>
 8005676:	4620      	mov	r0, r4
 8005678:	f000 fb62 	bl	8005d40 <fileno>
 800567c:	4633      	mov	r3, r6
 800567e:	4601      	mov	r1, r0
 8005680:	463a      	mov	r2, r7
 8005682:	4628      	mov	r0, r5
 8005684:	f000 fa88 	bl	8005b98 <_write_r>
 8005688:	2800      	cmp	r0, #0
 800568a:	da51      	bge.n	8005730 <_perror_r+0x10c>
 800568c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005690:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005692:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005696:	07d2      	lsls	r2, r2, #31
 8005698:	81a3      	strh	r3, [r4, #12]
 800569a:	d54c      	bpl.n	8005736 <_perror_r+0x112>
 800569c:	b003      	add	sp, #12
 800569e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056a0:	4b2a      	ldr	r3, [pc, #168]	; (800574c <_perror_r+0x128>)
 80056a2:	429c      	cmp	r4, r3
 80056a4:	d101      	bne.n	80056aa <_perror_r+0x86>
 80056a6:	68ac      	ldr	r4, [r5, #8]
 80056a8:	e7c8      	b.n	800563c <_perror_r+0x18>
 80056aa:	4b29      	ldr	r3, [pc, #164]	; (8005750 <_perror_r+0x12c>)
 80056ac:	429c      	cmp	r4, r3
 80056ae:	bf08      	it	eq
 80056b0:	68ec      	ldreq	r4, [r5, #12]
 80056b2:	e7c3      	b.n	800563c <_perror_r+0x18>
 80056b4:	7833      	ldrb	r3, [r6, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0ce      	beq.n	8005658 <_perror_r+0x34>
 80056ba:	4630      	mov	r0, r6
 80056bc:	f7fa fd88 	bl	80001d0 <strlen>
 80056c0:	4607      	mov	r7, r0
 80056c2:	b157      	cbz	r7, 80056da <_perror_r+0xb6>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fb3b 	bl	8005d40 <fileno>
 80056ca:	463b      	mov	r3, r7
 80056cc:	4601      	mov	r1, r0
 80056ce:	4632      	mov	r2, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 fa61 	bl	8005b98 <_write_r>
 80056d6:	2800      	cmp	r0, #0
 80056d8:	da14      	bge.n	8005704 <_perror_r+0xe0>
 80056da:	481e      	ldr	r0, [pc, #120]	; (8005754 <_perror_r+0x130>)
 80056dc:	4f1d      	ldr	r7, [pc, #116]	; (8005754 <_perror_r+0x130>)
 80056de:	f7fa fd77 	bl	80001d0 <strlen>
 80056e2:	4606      	mov	r6, r0
 80056e4:	2e00      	cmp	r6, #0
 80056e6:	d0b7      	beq.n	8005658 <_perror_r+0x34>
 80056e8:	4620      	mov	r0, r4
 80056ea:	f000 fb29 	bl	8005d40 <fileno>
 80056ee:	4633      	mov	r3, r6
 80056f0:	4601      	mov	r1, r0
 80056f2:	463a      	mov	r2, r7
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 fa4f 	bl	8005b98 <_write_r>
 80056fa:	2800      	cmp	r0, #0
 80056fc:	dbac      	blt.n	8005658 <_perror_r+0x34>
 80056fe:	1a36      	subs	r6, r6, r0
 8005700:	4407      	add	r7, r0
 8005702:	e7ef      	b.n	80056e4 <_perror_r+0xc0>
 8005704:	1a3f      	subs	r7, r7, r0
 8005706:	4406      	add	r6, r0
 8005708:	e7db      	b.n	80056c2 <_perror_r+0x9e>
 800570a:	f7fa fd61 	bl	80001d0 <strlen>
 800570e:	4606      	mov	r6, r0
 8005710:	2e00      	cmp	r6, #0
 8005712:	d0aa      	beq.n	800566a <_perror_r+0x46>
 8005714:	4620      	mov	r0, r4
 8005716:	f000 fb13 	bl	8005d40 <fileno>
 800571a:	4633      	mov	r3, r6
 800571c:	4601      	mov	r1, r0
 800571e:	463a      	mov	r2, r7
 8005720:	4628      	mov	r0, r5
 8005722:	f000 fa39 	bl	8005b98 <_write_r>
 8005726:	2800      	cmp	r0, #0
 8005728:	db9f      	blt.n	800566a <_perror_r+0x46>
 800572a:	1a36      	subs	r6, r6, r0
 800572c:	4407      	add	r7, r0
 800572e:	e7ef      	b.n	8005710 <_perror_r+0xec>
 8005730:	1a36      	subs	r6, r6, r0
 8005732:	4407      	add	r7, r0
 8005734:	e79e      	b.n	8005674 <_perror_r+0x50>
 8005736:	059b      	lsls	r3, r3, #22
 8005738:	d4b0      	bmi.n	800569c <_perror_r+0x78>
 800573a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800573c:	f000 fc35 	bl	8005faa <__retarget_lock_release_recursive>
 8005740:	e7ac      	b.n	800569c <_perror_r+0x78>
 8005742:	bf00      	nop
 8005744:	08006ed8 	.word	0x08006ed8
 8005748:	0800681f 	.word	0x0800681f
 800574c:	08006ef8 	.word	0x08006ef8
 8005750:	08006eb8 	.word	0x08006eb8
 8005754:	0800681c 	.word	0x0800681c

08005758 <perror>:
 8005758:	4b02      	ldr	r3, [pc, #8]	; (8005764 <perror+0xc>)
 800575a:	4601      	mov	r1, r0
 800575c:	6818      	ldr	r0, [r3, #0]
 800575e:	f7ff bf61 	b.w	8005624 <_perror_r>
 8005762:	bf00      	nop
 8005764:	2000000c 	.word	0x2000000c

08005768 <_sbrk_r>:
 8005768:	b538      	push	{r3, r4, r5, lr}
 800576a:	4d06      	ldr	r5, [pc, #24]	; (8005784 <_sbrk_r+0x1c>)
 800576c:	2300      	movs	r3, #0
 800576e:	4604      	mov	r4, r0
 8005770:	4608      	mov	r0, r1
 8005772:	602b      	str	r3, [r5, #0]
 8005774:	f7fb fc90 	bl	8001098 <_sbrk>
 8005778:	1c43      	adds	r3, r0, #1
 800577a:	d102      	bne.n	8005782 <_sbrk_r+0x1a>
 800577c:	682b      	ldr	r3, [r5, #0]
 800577e:	b103      	cbz	r3, 8005782 <_sbrk_r+0x1a>
 8005780:	6023      	str	r3, [r4, #0]
 8005782:	bd38      	pop	{r3, r4, r5, pc}
 8005784:	200002e8 	.word	0x200002e8

08005788 <_strerror_r>:
 8005788:	b510      	push	{r4, lr}
 800578a:	4604      	mov	r4, r0
 800578c:	4608      	mov	r0, r1
 800578e:	4611      	mov	r1, r2
 8005790:	288e      	cmp	r0, #142	; 0x8e
 8005792:	f200 8130 	bhi.w	80059f6 <_strerror_r+0x26e>
 8005796:	e8df f010 	tbh	[pc, r0, lsl #1]
 800579a:	0139      	.short	0x0139
 800579c:	0092008f 	.word	0x0092008f
 80057a0:	00960094 	.word	0x00960094
 80057a4:	009a0098 	.word	0x009a0098
 80057a8:	009e009c 	.word	0x009e009c
 80057ac:	00a400a2 	.word	0x00a400a2
 80057b0:	00aa00a8 	.word	0x00aa00a8
 80057b4:	00ae00ac 	.word	0x00ae00ac
 80057b8:	00b0012e 	.word	0x00b0012e
 80057bc:	00b400b2 	.word	0x00b400b2
 80057c0:	00b800b6 	.word	0x00b800b6
 80057c4:	00c000be 	.word	0x00c000be
 80057c8:	00c800c6 	.word	0x00c800c6
 80057cc:	00cc00ca 	.word	0x00cc00ca
 80057d0:	00d200ce 	.word	0x00d200ce
 80057d4:	00d800d6 	.word	0x00d800d6
 80057d8:	00dc00da 	.word	0x00dc00da
 80057dc:	00e000de 	.word	0x00e000de
 80057e0:	00e400e2 	.word	0x00e400e2
 80057e4:	012e012e 	.word	0x012e012e
 80057e8:	012e012e 	.word	0x012e012e
 80057ec:	012e012e 	.word	0x012e012e
 80057f0:	012e012e 	.word	0x012e012e
 80057f4:	00ec00e8 	.word	0x00ec00e8
 80057f8:	012e012e 	.word	0x012e012e
 80057fc:	012e012e 	.word	0x012e012e
 8005800:	012e012e 	.word	0x012e012e
 8005804:	012e012e 	.word	0x012e012e
 8005808:	012e012e 	.word	0x012e012e
 800580c:	012e012e 	.word	0x012e012e
 8005810:	00ee012e 	.word	0x00ee012e
 8005814:	00f00108 	.word	0x00f00108
 8005818:	012e00f2 	.word	0x012e00f2
 800581c:	012e012e 	.word	0x012e012e
 8005820:	012e00f4 	.word	0x012e00f4
 8005824:	012e012e 	.word	0x012e012e
 8005828:	012e00f6 	.word	0x012e00f6
 800582c:	00fa012e 	.word	0x00fa012e
 8005830:	012e012e 	.word	0x012e012e
 8005834:	012e00fc 	.word	0x012e00fc
 8005838:	012e012e 	.word	0x012e012e
 800583c:	012e012e 	.word	0x012e012e
 8005840:	012e012e 	.word	0x012e012e
 8005844:	012e012e 	.word	0x012e012e
 8005848:	00fe012e 	.word	0x00fe012e
 800584c:	0100012e 	.word	0x0100012e
 8005850:	01040102 	.word	0x01040102
 8005854:	012e012e 	.word	0x012e012e
 8005858:	012e0126 	.word	0x012e0126
 800585c:	012e012e 	.word	0x012e012e
 8005860:	012e012e 	.word	0x012e012e
 8005864:	012e012e 	.word	0x012e012e
 8005868:	0114012e 	.word	0x0114012e
 800586c:	010a0106 	.word	0x010a0106
 8005870:	010e010c 	.word	0x010e010c
 8005874:	012e0110 	.word	0x012e0110
 8005878:	01160112 	.word	0x01160112
 800587c:	00ea011a 	.word	0x00ea011a
 8005880:	012c00c2 	.word	0x012c00c2
 8005884:	00d000ba 	.word	0x00d000ba
 8005888:	00a000bc 	.word	0x00a000bc
 800588c:	012a00a6 	.word	0x012a00a6
 8005890:	012e00f8 	.word	0x012e00f8
 8005894:	00c40118 	.word	0x00c40118
 8005898:	011c011e 	.word	0x011c011e
 800589c:	012e012e 	.word	0x012e012e
 80058a0:	012e012e 	.word	0x012e012e
 80058a4:	00d4012e 	.word	0x00d4012e
 80058a8:	012e012e 	.word	0x012e012e
 80058ac:	00e6012e 	.word	0x00e6012e
 80058b0:	01200128 	.word	0x01200128
 80058b4:	01240122 	.word	0x01240122
 80058b8:	4b55      	ldr	r3, [pc, #340]	; (8005a10 <_strerror_r+0x288>)
 80058ba:	4618      	mov	r0, r3
 80058bc:	bd10      	pop	{r4, pc}
 80058be:	4b55      	ldr	r3, [pc, #340]	; (8005a14 <_strerror_r+0x28c>)
 80058c0:	e7fb      	b.n	80058ba <_strerror_r+0x132>
 80058c2:	4b55      	ldr	r3, [pc, #340]	; (8005a18 <_strerror_r+0x290>)
 80058c4:	e7f9      	b.n	80058ba <_strerror_r+0x132>
 80058c6:	4b55      	ldr	r3, [pc, #340]	; (8005a1c <_strerror_r+0x294>)
 80058c8:	e7f7      	b.n	80058ba <_strerror_r+0x132>
 80058ca:	4b55      	ldr	r3, [pc, #340]	; (8005a20 <_strerror_r+0x298>)
 80058cc:	e7f5      	b.n	80058ba <_strerror_r+0x132>
 80058ce:	4b55      	ldr	r3, [pc, #340]	; (8005a24 <_strerror_r+0x29c>)
 80058d0:	e7f3      	b.n	80058ba <_strerror_r+0x132>
 80058d2:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <_strerror_r+0x2a0>)
 80058d4:	e7f1      	b.n	80058ba <_strerror_r+0x132>
 80058d6:	4b55      	ldr	r3, [pc, #340]	; (8005a2c <_strerror_r+0x2a4>)
 80058d8:	e7ef      	b.n	80058ba <_strerror_r+0x132>
 80058da:	4b55      	ldr	r3, [pc, #340]	; (8005a30 <_strerror_r+0x2a8>)
 80058dc:	e7ed      	b.n	80058ba <_strerror_r+0x132>
 80058de:	4b55      	ldr	r3, [pc, #340]	; (8005a34 <_strerror_r+0x2ac>)
 80058e0:	e7eb      	b.n	80058ba <_strerror_r+0x132>
 80058e2:	4b55      	ldr	r3, [pc, #340]	; (8005a38 <_strerror_r+0x2b0>)
 80058e4:	e7e9      	b.n	80058ba <_strerror_r+0x132>
 80058e6:	4b55      	ldr	r3, [pc, #340]	; (8005a3c <_strerror_r+0x2b4>)
 80058e8:	e7e7      	b.n	80058ba <_strerror_r+0x132>
 80058ea:	4b55      	ldr	r3, [pc, #340]	; (8005a40 <_strerror_r+0x2b8>)
 80058ec:	e7e5      	b.n	80058ba <_strerror_r+0x132>
 80058ee:	4b55      	ldr	r3, [pc, #340]	; (8005a44 <_strerror_r+0x2bc>)
 80058f0:	e7e3      	b.n	80058ba <_strerror_r+0x132>
 80058f2:	4b55      	ldr	r3, [pc, #340]	; (8005a48 <_strerror_r+0x2c0>)
 80058f4:	e7e1      	b.n	80058ba <_strerror_r+0x132>
 80058f6:	4b55      	ldr	r3, [pc, #340]	; (8005a4c <_strerror_r+0x2c4>)
 80058f8:	e7df      	b.n	80058ba <_strerror_r+0x132>
 80058fa:	4b55      	ldr	r3, [pc, #340]	; (8005a50 <_strerror_r+0x2c8>)
 80058fc:	e7dd      	b.n	80058ba <_strerror_r+0x132>
 80058fe:	4b55      	ldr	r3, [pc, #340]	; (8005a54 <_strerror_r+0x2cc>)
 8005900:	e7db      	b.n	80058ba <_strerror_r+0x132>
 8005902:	4b55      	ldr	r3, [pc, #340]	; (8005a58 <_strerror_r+0x2d0>)
 8005904:	e7d9      	b.n	80058ba <_strerror_r+0x132>
 8005906:	4b55      	ldr	r3, [pc, #340]	; (8005a5c <_strerror_r+0x2d4>)
 8005908:	e7d7      	b.n	80058ba <_strerror_r+0x132>
 800590a:	4b55      	ldr	r3, [pc, #340]	; (8005a60 <_strerror_r+0x2d8>)
 800590c:	e7d5      	b.n	80058ba <_strerror_r+0x132>
 800590e:	4b55      	ldr	r3, [pc, #340]	; (8005a64 <_strerror_r+0x2dc>)
 8005910:	e7d3      	b.n	80058ba <_strerror_r+0x132>
 8005912:	4b55      	ldr	r3, [pc, #340]	; (8005a68 <_strerror_r+0x2e0>)
 8005914:	e7d1      	b.n	80058ba <_strerror_r+0x132>
 8005916:	4b55      	ldr	r3, [pc, #340]	; (8005a6c <_strerror_r+0x2e4>)
 8005918:	e7cf      	b.n	80058ba <_strerror_r+0x132>
 800591a:	4b55      	ldr	r3, [pc, #340]	; (8005a70 <_strerror_r+0x2e8>)
 800591c:	e7cd      	b.n	80058ba <_strerror_r+0x132>
 800591e:	4b55      	ldr	r3, [pc, #340]	; (8005a74 <_strerror_r+0x2ec>)
 8005920:	e7cb      	b.n	80058ba <_strerror_r+0x132>
 8005922:	4b55      	ldr	r3, [pc, #340]	; (8005a78 <_strerror_r+0x2f0>)
 8005924:	e7c9      	b.n	80058ba <_strerror_r+0x132>
 8005926:	4b55      	ldr	r3, [pc, #340]	; (8005a7c <_strerror_r+0x2f4>)
 8005928:	e7c7      	b.n	80058ba <_strerror_r+0x132>
 800592a:	4b55      	ldr	r3, [pc, #340]	; (8005a80 <_strerror_r+0x2f8>)
 800592c:	e7c5      	b.n	80058ba <_strerror_r+0x132>
 800592e:	4b55      	ldr	r3, [pc, #340]	; (8005a84 <_strerror_r+0x2fc>)
 8005930:	e7c3      	b.n	80058ba <_strerror_r+0x132>
 8005932:	4b55      	ldr	r3, [pc, #340]	; (8005a88 <_strerror_r+0x300>)
 8005934:	e7c1      	b.n	80058ba <_strerror_r+0x132>
 8005936:	4b55      	ldr	r3, [pc, #340]	; (8005a8c <_strerror_r+0x304>)
 8005938:	e7bf      	b.n	80058ba <_strerror_r+0x132>
 800593a:	4b55      	ldr	r3, [pc, #340]	; (8005a90 <_strerror_r+0x308>)
 800593c:	e7bd      	b.n	80058ba <_strerror_r+0x132>
 800593e:	4b55      	ldr	r3, [pc, #340]	; (8005a94 <_strerror_r+0x30c>)
 8005940:	e7bb      	b.n	80058ba <_strerror_r+0x132>
 8005942:	4b55      	ldr	r3, [pc, #340]	; (8005a98 <_strerror_r+0x310>)
 8005944:	e7b9      	b.n	80058ba <_strerror_r+0x132>
 8005946:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <_strerror_r+0x314>)
 8005948:	e7b7      	b.n	80058ba <_strerror_r+0x132>
 800594a:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <_strerror_r+0x318>)
 800594c:	e7b5      	b.n	80058ba <_strerror_r+0x132>
 800594e:	4b55      	ldr	r3, [pc, #340]	; (8005aa4 <_strerror_r+0x31c>)
 8005950:	e7b3      	b.n	80058ba <_strerror_r+0x132>
 8005952:	4b55      	ldr	r3, [pc, #340]	; (8005aa8 <_strerror_r+0x320>)
 8005954:	e7b1      	b.n	80058ba <_strerror_r+0x132>
 8005956:	4b55      	ldr	r3, [pc, #340]	; (8005aac <_strerror_r+0x324>)
 8005958:	e7af      	b.n	80058ba <_strerror_r+0x132>
 800595a:	4b55      	ldr	r3, [pc, #340]	; (8005ab0 <_strerror_r+0x328>)
 800595c:	e7ad      	b.n	80058ba <_strerror_r+0x132>
 800595e:	4b55      	ldr	r3, [pc, #340]	; (8005ab4 <_strerror_r+0x32c>)
 8005960:	e7ab      	b.n	80058ba <_strerror_r+0x132>
 8005962:	4b55      	ldr	r3, [pc, #340]	; (8005ab8 <_strerror_r+0x330>)
 8005964:	e7a9      	b.n	80058ba <_strerror_r+0x132>
 8005966:	4b55      	ldr	r3, [pc, #340]	; (8005abc <_strerror_r+0x334>)
 8005968:	e7a7      	b.n	80058ba <_strerror_r+0x132>
 800596a:	4b55      	ldr	r3, [pc, #340]	; (8005ac0 <_strerror_r+0x338>)
 800596c:	e7a5      	b.n	80058ba <_strerror_r+0x132>
 800596e:	4b55      	ldr	r3, [pc, #340]	; (8005ac4 <_strerror_r+0x33c>)
 8005970:	e7a3      	b.n	80058ba <_strerror_r+0x132>
 8005972:	4b55      	ldr	r3, [pc, #340]	; (8005ac8 <_strerror_r+0x340>)
 8005974:	e7a1      	b.n	80058ba <_strerror_r+0x132>
 8005976:	4b55      	ldr	r3, [pc, #340]	; (8005acc <_strerror_r+0x344>)
 8005978:	e79f      	b.n	80058ba <_strerror_r+0x132>
 800597a:	4b55      	ldr	r3, [pc, #340]	; (8005ad0 <_strerror_r+0x348>)
 800597c:	e79d      	b.n	80058ba <_strerror_r+0x132>
 800597e:	4b55      	ldr	r3, [pc, #340]	; (8005ad4 <_strerror_r+0x34c>)
 8005980:	e79b      	b.n	80058ba <_strerror_r+0x132>
 8005982:	4b55      	ldr	r3, [pc, #340]	; (8005ad8 <_strerror_r+0x350>)
 8005984:	e799      	b.n	80058ba <_strerror_r+0x132>
 8005986:	4b55      	ldr	r3, [pc, #340]	; (8005adc <_strerror_r+0x354>)
 8005988:	e797      	b.n	80058ba <_strerror_r+0x132>
 800598a:	4b55      	ldr	r3, [pc, #340]	; (8005ae0 <_strerror_r+0x358>)
 800598c:	e795      	b.n	80058ba <_strerror_r+0x132>
 800598e:	4b55      	ldr	r3, [pc, #340]	; (8005ae4 <_strerror_r+0x35c>)
 8005990:	e793      	b.n	80058ba <_strerror_r+0x132>
 8005992:	4b55      	ldr	r3, [pc, #340]	; (8005ae8 <_strerror_r+0x360>)
 8005994:	e791      	b.n	80058ba <_strerror_r+0x132>
 8005996:	4b55      	ldr	r3, [pc, #340]	; (8005aec <_strerror_r+0x364>)
 8005998:	e78f      	b.n	80058ba <_strerror_r+0x132>
 800599a:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <_strerror_r+0x368>)
 800599c:	e78d      	b.n	80058ba <_strerror_r+0x132>
 800599e:	4b55      	ldr	r3, [pc, #340]	; (8005af4 <_strerror_r+0x36c>)
 80059a0:	e78b      	b.n	80058ba <_strerror_r+0x132>
 80059a2:	4b55      	ldr	r3, [pc, #340]	; (8005af8 <_strerror_r+0x370>)
 80059a4:	e789      	b.n	80058ba <_strerror_r+0x132>
 80059a6:	4b55      	ldr	r3, [pc, #340]	; (8005afc <_strerror_r+0x374>)
 80059a8:	e787      	b.n	80058ba <_strerror_r+0x132>
 80059aa:	4b55      	ldr	r3, [pc, #340]	; (8005b00 <_strerror_r+0x378>)
 80059ac:	e785      	b.n	80058ba <_strerror_r+0x132>
 80059ae:	4b55      	ldr	r3, [pc, #340]	; (8005b04 <_strerror_r+0x37c>)
 80059b0:	e783      	b.n	80058ba <_strerror_r+0x132>
 80059b2:	4b55      	ldr	r3, [pc, #340]	; (8005b08 <_strerror_r+0x380>)
 80059b4:	e781      	b.n	80058ba <_strerror_r+0x132>
 80059b6:	4b55      	ldr	r3, [pc, #340]	; (8005b0c <_strerror_r+0x384>)
 80059b8:	e77f      	b.n	80058ba <_strerror_r+0x132>
 80059ba:	4b55      	ldr	r3, [pc, #340]	; (8005b10 <_strerror_r+0x388>)
 80059bc:	e77d      	b.n	80058ba <_strerror_r+0x132>
 80059be:	4b55      	ldr	r3, [pc, #340]	; (8005b14 <_strerror_r+0x38c>)
 80059c0:	e77b      	b.n	80058ba <_strerror_r+0x132>
 80059c2:	4b55      	ldr	r3, [pc, #340]	; (8005b18 <_strerror_r+0x390>)
 80059c4:	e779      	b.n	80058ba <_strerror_r+0x132>
 80059c6:	4b55      	ldr	r3, [pc, #340]	; (8005b1c <_strerror_r+0x394>)
 80059c8:	e777      	b.n	80058ba <_strerror_r+0x132>
 80059ca:	4b55      	ldr	r3, [pc, #340]	; (8005b20 <_strerror_r+0x398>)
 80059cc:	e775      	b.n	80058ba <_strerror_r+0x132>
 80059ce:	4b55      	ldr	r3, [pc, #340]	; (8005b24 <_strerror_r+0x39c>)
 80059d0:	e773      	b.n	80058ba <_strerror_r+0x132>
 80059d2:	4b55      	ldr	r3, [pc, #340]	; (8005b28 <_strerror_r+0x3a0>)
 80059d4:	e771      	b.n	80058ba <_strerror_r+0x132>
 80059d6:	4b55      	ldr	r3, [pc, #340]	; (8005b2c <_strerror_r+0x3a4>)
 80059d8:	e76f      	b.n	80058ba <_strerror_r+0x132>
 80059da:	4b55      	ldr	r3, [pc, #340]	; (8005b30 <_strerror_r+0x3a8>)
 80059dc:	e76d      	b.n	80058ba <_strerror_r+0x132>
 80059de:	4b55      	ldr	r3, [pc, #340]	; (8005b34 <_strerror_r+0x3ac>)
 80059e0:	e76b      	b.n	80058ba <_strerror_r+0x132>
 80059e2:	4b55      	ldr	r3, [pc, #340]	; (8005b38 <_strerror_r+0x3b0>)
 80059e4:	e769      	b.n	80058ba <_strerror_r+0x132>
 80059e6:	4b55      	ldr	r3, [pc, #340]	; (8005b3c <_strerror_r+0x3b4>)
 80059e8:	e767      	b.n	80058ba <_strerror_r+0x132>
 80059ea:	4b55      	ldr	r3, [pc, #340]	; (8005b40 <_strerror_r+0x3b8>)
 80059ec:	e765      	b.n	80058ba <_strerror_r+0x132>
 80059ee:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <_strerror_r+0x3bc>)
 80059f0:	e763      	b.n	80058ba <_strerror_r+0x132>
 80059f2:	4b55      	ldr	r3, [pc, #340]	; (8005b48 <_strerror_r+0x3c0>)
 80059f4:	e761      	b.n	80058ba <_strerror_r+0x132>
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	bf14      	ite	ne
 80059fa:	461a      	movne	r2, r3
 80059fc:	4622      	moveq	r2, r4
 80059fe:	f000 f8a9 	bl	8005b54 <_user_strerror>
 8005a02:	4b52      	ldr	r3, [pc, #328]	; (8005b4c <_strerror_r+0x3c4>)
 8005a04:	2800      	cmp	r0, #0
 8005a06:	bf18      	it	ne
 8005a08:	4603      	movne	r3, r0
 8005a0a:	e756      	b.n	80058ba <_strerror_r+0x132>
 8005a0c:	4b50      	ldr	r3, [pc, #320]	; (8005b50 <_strerror_r+0x3c8>)
 8005a0e:	e754      	b.n	80058ba <_strerror_r+0x132>
 8005a10:	08006821 	.word	0x08006821
 8005a14:	0800682b 	.word	0x0800682b
 8005a18:	08006845 	.word	0x08006845
 8005a1c:	08006855 	.word	0x08006855
 8005a20:	0800686d 	.word	0x0800686d
 8005a24:	08006877 	.word	0x08006877
 8005a28:	08006891 	.word	0x08006891
 8005a2c:	080068a3 	.word	0x080068a3
 8005a30:	080068b5 	.word	0x080068b5
 8005a34:	080068ce 	.word	0x080068ce
 8005a38:	080068de 	.word	0x080068de
 8005a3c:	080068ea 	.word	0x080068ea
 8005a40:	08006907 	.word	0x08006907
 8005a44:	08006919 	.word	0x08006919
 8005a48:	0800692a 	.word	0x0800692a
 8005a4c:	0800693c 	.word	0x0800693c
 8005a50:	08006948 	.word	0x08006948
 8005a54:	08006960 	.word	0x08006960
 8005a58:	0800696c 	.word	0x0800696c
 8005a5c:	0800697e 	.word	0x0800697e
 8005a60:	0800698d 	.word	0x0800698d
 8005a64:	0800699d 	.word	0x0800699d
 8005a68:	080069aa 	.word	0x080069aa
 8005a6c:	080069c9 	.word	0x080069c9
 8005a70:	080069d8 	.word	0x080069d8
 8005a74:	080069e9 	.word	0x080069e9
 8005a78:	08006a0d 	.word	0x08006a0d
 8005a7c:	08006a2b 	.word	0x08006a2b
 8005a80:	08006a49 	.word	0x08006a49
 8005a84:	08006a69 	.word	0x08006a69
 8005a88:	08006a80 	.word	0x08006a80
 8005a8c:	08006a8f 	.word	0x08006a8f
 8005a90:	08006a9e 	.word	0x08006a9e
 8005a94:	08006ab2 	.word	0x08006ab2
 8005a98:	08006aca 	.word	0x08006aca
 8005a9c:	08006ad8 	.word	0x08006ad8
 8005aa0:	08006ae5 	.word	0x08006ae5
 8005aa4:	08006afb 	.word	0x08006afb
 8005aa8:	08006b0a 	.word	0x08006b0a
 8005aac:	08006b16 	.word	0x08006b16
 8005ab0:	08006b45 	.word	0x08006b45
 8005ab4:	08006b56 	.word	0x08006b56
 8005ab8:	08006b71 	.word	0x08006b71
 8005abc:	08006b84 	.word	0x08006b84
 8005ac0:	08006b9a 	.word	0x08006b9a
 8005ac4:	08006ba3 	.word	0x08006ba3
 8005ac8:	08006bba 	.word	0x08006bba
 8005acc:	08006bc2 	.word	0x08006bc2
 8005ad0:	08006bcf 	.word	0x08006bcf
 8005ad4:	08006be4 	.word	0x08006be4
 8005ad8:	08006bf8 	.word	0x08006bf8
 8005adc:	08006c10 	.word	0x08006c10
 8005ae0:	08006c1f 	.word	0x08006c1f
 8005ae4:	08006c30 	.word	0x08006c30
 8005ae8:	08006c43 	.word	0x08006c43
 8005aec:	08006c4f 	.word	0x08006c4f
 8005af0:	08006c68 	.word	0x08006c68
 8005af4:	08006c7c 	.word	0x08006c7c
 8005af8:	08006c97 	.word	0x08006c97
 8005afc:	08006caf 	.word	0x08006caf
 8005b00:	08006cc9 	.word	0x08006cc9
 8005b04:	08006cd1 	.word	0x08006cd1
 8005b08:	08006d01 	.word	0x08006d01
 8005b0c:	08006d20 	.word	0x08006d20
 8005b10:	08006d3f 	.word	0x08006d3f
 8005b14:	08006d56 	.word	0x08006d56
 8005b18:	08006d69 	.word	0x08006d69
 8005b1c:	08006d82 	.word	0x08006d82
 8005b20:	08006d99 	.word	0x08006d99
 8005b24:	08006daf 	.word	0x08006daf
 8005b28:	08006dd0 	.word	0x08006dd0
 8005b2c:	08006de8 	.word	0x08006de8
 8005b30:	08006e04 	.word	0x08006e04
 8005b34:	08006e17 	.word	0x08006e17
 8005b38:	08006e2d 	.word	0x08006e2d
 8005b3c:	08006e41 	.word	0x08006e41
 8005b40:	08006e63 	.word	0x08006e63
 8005b44:	08006e89 	.word	0x08006e89
 8005b48:	08006e9a 	.word	0x08006e9a
 8005b4c:	08006820 	.word	0x08006820
 8005b50:	08006eaf 	.word	0x08006eaf

08005b54 <_user_strerror>:
 8005b54:	2000      	movs	r0, #0
 8005b56:	4770      	bx	lr

08005b58 <_vsiprintf_r>:
 8005b58:	b500      	push	{lr}
 8005b5a:	b09b      	sub	sp, #108	; 0x6c
 8005b5c:	9100      	str	r1, [sp, #0]
 8005b5e:	9104      	str	r1, [sp, #16]
 8005b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b64:	9105      	str	r1, [sp, #20]
 8005b66:	9102      	str	r1, [sp, #8]
 8005b68:	4905      	ldr	r1, [pc, #20]	; (8005b80 <_vsiprintf_r+0x28>)
 8005b6a:	9103      	str	r1, [sp, #12]
 8005b6c:	4669      	mov	r1, sp
 8005b6e:	f000 fa85 	bl	800607c <_svfiprintf_r>
 8005b72:	9b00      	ldr	r3, [sp, #0]
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
 8005b78:	b01b      	add	sp, #108	; 0x6c
 8005b7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005b7e:	bf00      	nop
 8005b80:	ffff0208 	.word	0xffff0208

08005b84 <vsiprintf>:
 8005b84:	4613      	mov	r3, r2
 8005b86:	460a      	mov	r2, r1
 8005b88:	4601      	mov	r1, r0
 8005b8a:	4802      	ldr	r0, [pc, #8]	; (8005b94 <vsiprintf+0x10>)
 8005b8c:	6800      	ldr	r0, [r0, #0]
 8005b8e:	f7ff bfe3 	b.w	8005b58 <_vsiprintf_r>
 8005b92:	bf00      	nop
 8005b94:	2000000c 	.word	0x2000000c

08005b98 <_write_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d07      	ldr	r5, [pc, #28]	; (8005bb8 <_write_r+0x20>)
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	4608      	mov	r0, r1
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	602a      	str	r2, [r5, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f7fb fa41 	bl	800102e <_write>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d102      	bne.n	8005bb6 <_write_r+0x1e>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	b103      	cbz	r3, 8005bb6 <_write_r+0x1e>
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	bd38      	pop	{r3, r4, r5, pc}
 8005bb8:	200002e8 	.word	0x200002e8

08005bbc <__sflush_r>:
 8005bbc:	898a      	ldrh	r2, [r1, #12]
 8005bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	0710      	lsls	r0, r2, #28
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	d458      	bmi.n	8005c7c <__sflush_r+0xc0>
 8005bca:	684b      	ldr	r3, [r1, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	dc05      	bgt.n	8005bdc <__sflush_r+0x20>
 8005bd0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dc02      	bgt.n	8005bdc <__sflush_r+0x20>
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bde:	2e00      	cmp	r6, #0
 8005be0:	d0f9      	beq.n	8005bd6 <__sflush_r+0x1a>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be8:	682f      	ldr	r7, [r5, #0]
 8005bea:	602b      	str	r3, [r5, #0]
 8005bec:	d032      	beq.n	8005c54 <__sflush_r+0x98>
 8005bee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	075a      	lsls	r2, r3, #29
 8005bf4:	d505      	bpl.n	8005c02 <__sflush_r+0x46>
 8005bf6:	6863      	ldr	r3, [r4, #4]
 8005bf8:	1ac0      	subs	r0, r0, r3
 8005bfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bfc:	b10b      	cbz	r3, 8005c02 <__sflush_r+0x46>
 8005bfe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c00:	1ac0      	subs	r0, r0, r3
 8005c02:	2300      	movs	r3, #0
 8005c04:	4602      	mov	r2, r0
 8005c06:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c08:	6a21      	ldr	r1, [r4, #32]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	47b0      	blx	r6
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	89a3      	ldrh	r3, [r4, #12]
 8005c12:	d106      	bne.n	8005c22 <__sflush_r+0x66>
 8005c14:	6829      	ldr	r1, [r5, #0]
 8005c16:	291d      	cmp	r1, #29
 8005c18:	d82c      	bhi.n	8005c74 <__sflush_r+0xb8>
 8005c1a:	4a2a      	ldr	r2, [pc, #168]	; (8005cc4 <__sflush_r+0x108>)
 8005c1c:	40ca      	lsrs	r2, r1
 8005c1e:	07d6      	lsls	r6, r2, #31
 8005c20:	d528      	bpl.n	8005c74 <__sflush_r+0xb8>
 8005c22:	2200      	movs	r2, #0
 8005c24:	6062      	str	r2, [r4, #4]
 8005c26:	04d9      	lsls	r1, r3, #19
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	6022      	str	r2, [r4, #0]
 8005c2c:	d504      	bpl.n	8005c38 <__sflush_r+0x7c>
 8005c2e:	1c42      	adds	r2, r0, #1
 8005c30:	d101      	bne.n	8005c36 <__sflush_r+0x7a>
 8005c32:	682b      	ldr	r3, [r5, #0]
 8005c34:	b903      	cbnz	r3, 8005c38 <__sflush_r+0x7c>
 8005c36:	6560      	str	r0, [r4, #84]	; 0x54
 8005c38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3a:	602f      	str	r7, [r5, #0]
 8005c3c:	2900      	cmp	r1, #0
 8005c3e:	d0ca      	beq.n	8005bd6 <__sflush_r+0x1a>
 8005c40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c44:	4299      	cmp	r1, r3
 8005c46:	d002      	beq.n	8005c4e <__sflush_r+0x92>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff fc0b 	bl	8005464 <_free_r>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	6360      	str	r0, [r4, #52]	; 0x34
 8005c52:	e7c1      	b.n	8005bd8 <__sflush_r+0x1c>
 8005c54:	6a21      	ldr	r1, [r4, #32]
 8005c56:	2301      	movs	r3, #1
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b0      	blx	r6
 8005c5c:	1c41      	adds	r1, r0, #1
 8005c5e:	d1c7      	bne.n	8005bf0 <__sflush_r+0x34>
 8005c60:	682b      	ldr	r3, [r5, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d0c4      	beq.n	8005bf0 <__sflush_r+0x34>
 8005c66:	2b1d      	cmp	r3, #29
 8005c68:	d001      	beq.n	8005c6e <__sflush_r+0xb2>
 8005c6a:	2b16      	cmp	r3, #22
 8005c6c:	d101      	bne.n	8005c72 <__sflush_r+0xb6>
 8005c6e:	602f      	str	r7, [r5, #0]
 8005c70:	e7b1      	b.n	8005bd6 <__sflush_r+0x1a>
 8005c72:	89a3      	ldrh	r3, [r4, #12]
 8005c74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c78:	81a3      	strh	r3, [r4, #12]
 8005c7a:	e7ad      	b.n	8005bd8 <__sflush_r+0x1c>
 8005c7c:	690f      	ldr	r7, [r1, #16]
 8005c7e:	2f00      	cmp	r7, #0
 8005c80:	d0a9      	beq.n	8005bd6 <__sflush_r+0x1a>
 8005c82:	0793      	lsls	r3, r2, #30
 8005c84:	680e      	ldr	r6, [r1, #0]
 8005c86:	bf08      	it	eq
 8005c88:	694b      	ldreq	r3, [r1, #20]
 8005c8a:	600f      	str	r7, [r1, #0]
 8005c8c:	bf18      	it	ne
 8005c8e:	2300      	movne	r3, #0
 8005c90:	eba6 0807 	sub.w	r8, r6, r7
 8005c94:	608b      	str	r3, [r1, #8]
 8005c96:	f1b8 0f00 	cmp.w	r8, #0
 8005c9a:	dd9c      	ble.n	8005bd6 <__sflush_r+0x1a>
 8005c9c:	6a21      	ldr	r1, [r4, #32]
 8005c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca0:	4643      	mov	r3, r8
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	47b0      	blx	r6
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	dc06      	bgt.n	8005cba <__sflush_r+0xfe>
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb8:	e78e      	b.n	8005bd8 <__sflush_r+0x1c>
 8005cba:	4407      	add	r7, r0
 8005cbc:	eba8 0800 	sub.w	r8, r8, r0
 8005cc0:	e7e9      	b.n	8005c96 <__sflush_r+0xda>
 8005cc2:	bf00      	nop
 8005cc4:	20400001 	.word	0x20400001

08005cc8 <_fflush_r>:
 8005cc8:	b538      	push	{r3, r4, r5, lr}
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	4605      	mov	r5, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	b913      	cbnz	r3, 8005cd8 <_fflush_r+0x10>
 8005cd2:	2500      	movs	r5, #0
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	b118      	cbz	r0, 8005ce2 <_fflush_r+0x1a>
 8005cda:	6983      	ldr	r3, [r0, #24]
 8005cdc:	b90b      	cbnz	r3, 8005ce2 <_fflush_r+0x1a>
 8005cde:	f000 f8c5 	bl	8005e6c <__sinit>
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <_fflush_r+0x6c>)
 8005ce4:	429c      	cmp	r4, r3
 8005ce6:	d11b      	bne.n	8005d20 <_fflush_r+0x58>
 8005ce8:	686c      	ldr	r4, [r5, #4]
 8005cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d0ef      	beq.n	8005cd2 <_fflush_r+0xa>
 8005cf2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf4:	07d0      	lsls	r0, r2, #31
 8005cf6:	d404      	bmi.n	8005d02 <_fflush_r+0x3a>
 8005cf8:	0599      	lsls	r1, r3, #22
 8005cfa:	d402      	bmi.n	8005d02 <_fflush_r+0x3a>
 8005cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cfe:	f000 f953 	bl	8005fa8 <__retarget_lock_acquire_recursive>
 8005d02:	4628      	mov	r0, r5
 8005d04:	4621      	mov	r1, r4
 8005d06:	f7ff ff59 	bl	8005bbc <__sflush_r>
 8005d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0c:	07da      	lsls	r2, r3, #31
 8005d0e:	4605      	mov	r5, r0
 8005d10:	d4e0      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d12:	89a3      	ldrh	r3, [r4, #12]
 8005d14:	059b      	lsls	r3, r3, #22
 8005d16:	d4dd      	bmi.n	8005cd4 <_fflush_r+0xc>
 8005d18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d1a:	f000 f946 	bl	8005faa <__retarget_lock_release_recursive>
 8005d1e:	e7d9      	b.n	8005cd4 <_fflush_r+0xc>
 8005d20:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <_fflush_r+0x70>)
 8005d22:	429c      	cmp	r4, r3
 8005d24:	d101      	bne.n	8005d2a <_fflush_r+0x62>
 8005d26:	68ac      	ldr	r4, [r5, #8]
 8005d28:	e7df      	b.n	8005cea <_fflush_r+0x22>
 8005d2a:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <_fflush_r+0x74>)
 8005d2c:	429c      	cmp	r4, r3
 8005d2e:	bf08      	it	eq
 8005d30:	68ec      	ldreq	r4, [r5, #12]
 8005d32:	e7da      	b.n	8005cea <_fflush_r+0x22>
 8005d34:	08006ed8 	.word	0x08006ed8
 8005d38:	08006ef8 	.word	0x08006ef8
 8005d3c:	08006eb8 	.word	0x08006eb8

08005d40 <fileno>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	4e1a      	ldr	r6, [pc, #104]	; (8005dac <fileno+0x6c>)
 8005d44:	6835      	ldr	r5, [r6, #0]
 8005d46:	4604      	mov	r4, r0
 8005d48:	b125      	cbz	r5, 8005d54 <fileno+0x14>
 8005d4a:	69ab      	ldr	r3, [r5, #24]
 8005d4c:	b913      	cbnz	r3, 8005d54 <fileno+0x14>
 8005d4e:	4628      	mov	r0, r5
 8005d50:	f000 f88c 	bl	8005e6c <__sinit>
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <fileno+0x70>)
 8005d56:	429c      	cmp	r4, r3
 8005d58:	d118      	bne.n	8005d8c <fileno+0x4c>
 8005d5a:	686c      	ldr	r4, [r5, #4]
 8005d5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d5e:	07d8      	lsls	r0, r3, #31
 8005d60:	d405      	bmi.n	8005d6e <fileno+0x2e>
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	0599      	lsls	r1, r3, #22
 8005d66:	d402      	bmi.n	8005d6e <fileno+0x2e>
 8005d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d6a:	f000 f91d 	bl	8005fa8 <__retarget_lock_acquire_recursive>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	b1ab      	cbz	r3, 8005da0 <fileno+0x60>
 8005d74:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8005d78:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d7a:	07d2      	lsls	r2, r2, #31
 8005d7c:	d404      	bmi.n	8005d88 <fileno+0x48>
 8005d7e:	059b      	lsls	r3, r3, #22
 8005d80:	d402      	bmi.n	8005d88 <fileno+0x48>
 8005d82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d84:	f000 f911 	bl	8005faa <__retarget_lock_release_recursive>
 8005d88:	4628      	mov	r0, r5
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}
 8005d8c:	4b09      	ldr	r3, [pc, #36]	; (8005db4 <fileno+0x74>)
 8005d8e:	429c      	cmp	r4, r3
 8005d90:	d101      	bne.n	8005d96 <fileno+0x56>
 8005d92:	68ac      	ldr	r4, [r5, #8]
 8005d94:	e7e2      	b.n	8005d5c <fileno+0x1c>
 8005d96:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <fileno+0x78>)
 8005d98:	429c      	cmp	r4, r3
 8005d9a:	bf08      	it	eq
 8005d9c:	68ec      	ldreq	r4, [r5, #12]
 8005d9e:	e7dd      	b.n	8005d5c <fileno+0x1c>
 8005da0:	6832      	ldr	r2, [r6, #0]
 8005da2:	2109      	movs	r1, #9
 8005da4:	6011      	str	r1, [r2, #0]
 8005da6:	f04f 35ff 	mov.w	r5, #4294967295
 8005daa:	e7e5      	b.n	8005d78 <fileno+0x38>
 8005dac:	2000000c 	.word	0x2000000c
 8005db0:	08006ed8 	.word	0x08006ed8
 8005db4:	08006ef8 	.word	0x08006ef8
 8005db8:	08006eb8 	.word	0x08006eb8

08005dbc <std>:
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	b510      	push	{r4, lr}
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	e9c0 3300 	strd	r3, r3, [r0]
 8005dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005dca:	6083      	str	r3, [r0, #8]
 8005dcc:	8181      	strh	r1, [r0, #12]
 8005dce:	6643      	str	r3, [r0, #100]	; 0x64
 8005dd0:	81c2      	strh	r2, [r0, #14]
 8005dd2:	6183      	str	r3, [r0, #24]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	2208      	movs	r2, #8
 8005dd8:	305c      	adds	r0, #92	; 0x5c
 8005dda:	f7ff fb3b 	bl	8005454 <memset>
 8005dde:	4b05      	ldr	r3, [pc, #20]	; (8005df4 <std+0x38>)
 8005de0:	6263      	str	r3, [r4, #36]	; 0x24
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <std+0x3c>)
 8005de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8005de6:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <std+0x40>)
 8005de8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <std+0x44>)
 8005dec:	6224      	str	r4, [r4, #32]
 8005dee:	6323      	str	r3, [r4, #48]	; 0x30
 8005df0:	bd10      	pop	{r4, pc}
 8005df2:	bf00      	nop
 8005df4:	080065a5 	.word	0x080065a5
 8005df8:	080065c7 	.word	0x080065c7
 8005dfc:	080065ff 	.word	0x080065ff
 8005e00:	08006623 	.word	0x08006623

08005e04 <_cleanup_r>:
 8005e04:	4901      	ldr	r1, [pc, #4]	; (8005e0c <_cleanup_r+0x8>)
 8005e06:	f000 b8af 	b.w	8005f68 <_fwalk_reent>
 8005e0a:	bf00      	nop
 8005e0c:	08005cc9 	.word	0x08005cc9

08005e10 <__sfmoreglue>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	2268      	movs	r2, #104	; 0x68
 8005e14:	1e4d      	subs	r5, r1, #1
 8005e16:	4355      	muls	r5, r2
 8005e18:	460e      	mov	r6, r1
 8005e1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005e1e:	f7ff fb8d 	bl	800553c <_malloc_r>
 8005e22:	4604      	mov	r4, r0
 8005e24:	b140      	cbz	r0, 8005e38 <__sfmoreglue+0x28>
 8005e26:	2100      	movs	r1, #0
 8005e28:	e9c0 1600 	strd	r1, r6, [r0]
 8005e2c:	300c      	adds	r0, #12
 8005e2e:	60a0      	str	r0, [r4, #8]
 8005e30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005e34:	f7ff fb0e 	bl	8005454 <memset>
 8005e38:	4620      	mov	r0, r4
 8005e3a:	bd70      	pop	{r4, r5, r6, pc}

08005e3c <__sfp_lock_acquire>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__sfp_lock_acquire+0x8>)
 8005e3e:	f000 b8b3 	b.w	8005fa8 <__retarget_lock_acquire_recursive>
 8005e42:	bf00      	nop
 8005e44:	200002e5 	.word	0x200002e5

08005e48 <__sfp_lock_release>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__sfp_lock_release+0x8>)
 8005e4a:	f000 b8ae 	b.w	8005faa <__retarget_lock_release_recursive>
 8005e4e:	bf00      	nop
 8005e50:	200002e5 	.word	0x200002e5

08005e54 <__sinit_lock_acquire>:
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <__sinit_lock_acquire+0x8>)
 8005e56:	f000 b8a7 	b.w	8005fa8 <__retarget_lock_acquire_recursive>
 8005e5a:	bf00      	nop
 8005e5c:	200002e6 	.word	0x200002e6

08005e60 <__sinit_lock_release>:
 8005e60:	4801      	ldr	r0, [pc, #4]	; (8005e68 <__sinit_lock_release+0x8>)
 8005e62:	f000 b8a2 	b.w	8005faa <__retarget_lock_release_recursive>
 8005e66:	bf00      	nop
 8005e68:	200002e6 	.word	0x200002e6

08005e6c <__sinit>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	4604      	mov	r4, r0
 8005e70:	f7ff fff0 	bl	8005e54 <__sinit_lock_acquire>
 8005e74:	69a3      	ldr	r3, [r4, #24]
 8005e76:	b11b      	cbz	r3, 8005e80 <__sinit+0x14>
 8005e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e7c:	f7ff bff0 	b.w	8005e60 <__sinit_lock_release>
 8005e80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e84:	6523      	str	r3, [r4, #80]	; 0x50
 8005e86:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <__sinit+0x68>)
 8005e88:	4a13      	ldr	r2, [pc, #76]	; (8005ed8 <__sinit+0x6c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	bf04      	itt	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	61a3      	streq	r3, [r4, #24]
 8005e96:	4620      	mov	r0, r4
 8005e98:	f000 f820 	bl	8005edc <__sfp>
 8005e9c:	6060      	str	r0, [r4, #4]
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 f81c 	bl	8005edc <__sfp>
 8005ea4:	60a0      	str	r0, [r4, #8]
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	f000 f818 	bl	8005edc <__sfp>
 8005eac:	2200      	movs	r2, #0
 8005eae:	60e0      	str	r0, [r4, #12]
 8005eb0:	2104      	movs	r1, #4
 8005eb2:	6860      	ldr	r0, [r4, #4]
 8005eb4:	f7ff ff82 	bl	8005dbc <std>
 8005eb8:	68a0      	ldr	r0, [r4, #8]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	2109      	movs	r1, #9
 8005ebe:	f7ff ff7d 	bl	8005dbc <std>
 8005ec2:	68e0      	ldr	r0, [r4, #12]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	2112      	movs	r1, #18
 8005ec8:	f7ff ff78 	bl	8005dbc <std>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	61a3      	str	r3, [r4, #24]
 8005ed0:	e7d2      	b.n	8005e78 <__sinit+0xc>
 8005ed2:	bf00      	nop
 8005ed4:	08006818 	.word	0x08006818
 8005ed8:	08005e05 	.word	0x08005e05

08005edc <__sfp>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	4607      	mov	r7, r0
 8005ee0:	f7ff ffac 	bl	8005e3c <__sfp_lock_acquire>
 8005ee4:	4b1e      	ldr	r3, [pc, #120]	; (8005f60 <__sfp+0x84>)
 8005ee6:	681e      	ldr	r6, [r3, #0]
 8005ee8:	69b3      	ldr	r3, [r6, #24]
 8005eea:	b913      	cbnz	r3, 8005ef2 <__sfp+0x16>
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff ffbd 	bl	8005e6c <__sinit>
 8005ef2:	3648      	adds	r6, #72	; 0x48
 8005ef4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	d503      	bpl.n	8005f04 <__sfp+0x28>
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	b30b      	cbz	r3, 8005f44 <__sfp+0x68>
 8005f00:	6836      	ldr	r6, [r6, #0]
 8005f02:	e7f7      	b.n	8005ef4 <__sfp+0x18>
 8005f04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005f08:	b9d5      	cbnz	r5, 8005f40 <__sfp+0x64>
 8005f0a:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <__sfp+0x88>)
 8005f0c:	60e3      	str	r3, [r4, #12]
 8005f0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005f12:	6665      	str	r5, [r4, #100]	; 0x64
 8005f14:	f000 f847 	bl	8005fa6 <__retarget_lock_init_recursive>
 8005f18:	f7ff ff96 	bl	8005e48 <__sfp_lock_release>
 8005f1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005f20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005f24:	6025      	str	r5, [r4, #0]
 8005f26:	61a5      	str	r5, [r4, #24]
 8005f28:	2208      	movs	r2, #8
 8005f2a:	4629      	mov	r1, r5
 8005f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005f30:	f7ff fa90 	bl	8005454 <memset>
 8005f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005f3c:	4620      	mov	r0, r4
 8005f3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f40:	3468      	adds	r4, #104	; 0x68
 8005f42:	e7d9      	b.n	8005ef8 <__sfp+0x1c>
 8005f44:	2104      	movs	r1, #4
 8005f46:	4638      	mov	r0, r7
 8005f48:	f7ff ff62 	bl	8005e10 <__sfmoreglue>
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	6030      	str	r0, [r6, #0]
 8005f50:	2800      	cmp	r0, #0
 8005f52:	d1d5      	bne.n	8005f00 <__sfp+0x24>
 8005f54:	f7ff ff78 	bl	8005e48 <__sfp_lock_release>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	e7ee      	b.n	8005f3c <__sfp+0x60>
 8005f5e:	bf00      	nop
 8005f60:	08006818 	.word	0x08006818
 8005f64:	ffff0001 	.word	0xffff0001

08005f68 <_fwalk_reent>:
 8005f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	4606      	mov	r6, r0
 8005f6e:	4688      	mov	r8, r1
 8005f70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f74:	2700      	movs	r7, #0
 8005f76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f7a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f7e:	d505      	bpl.n	8005f8c <_fwalk_reent+0x24>
 8005f80:	6824      	ldr	r4, [r4, #0]
 8005f82:	2c00      	cmp	r4, #0
 8005f84:	d1f7      	bne.n	8005f76 <_fwalk_reent+0xe>
 8005f86:	4638      	mov	r0, r7
 8005f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f8c:	89ab      	ldrh	r3, [r5, #12]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d907      	bls.n	8005fa2 <_fwalk_reent+0x3a>
 8005f92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f96:	3301      	adds	r3, #1
 8005f98:	d003      	beq.n	8005fa2 <_fwalk_reent+0x3a>
 8005f9a:	4629      	mov	r1, r5
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	47c0      	blx	r8
 8005fa0:	4307      	orrs	r7, r0
 8005fa2:	3568      	adds	r5, #104	; 0x68
 8005fa4:	e7e9      	b.n	8005f7a <_fwalk_reent+0x12>

08005fa6 <__retarget_lock_init_recursive>:
 8005fa6:	4770      	bx	lr

08005fa8 <__retarget_lock_acquire_recursive>:
 8005fa8:	4770      	bx	lr

08005faa <__retarget_lock_release_recursive>:
 8005faa:	4770      	bx	lr

08005fac <__malloc_lock>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__malloc_lock+0x8>)
 8005fae:	f7ff bffb 	b.w	8005fa8 <__retarget_lock_acquire_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	200002e4 	.word	0x200002e4

08005fb8 <__malloc_unlock>:
 8005fb8:	4801      	ldr	r0, [pc, #4]	; (8005fc0 <__malloc_unlock+0x8>)
 8005fba:	f7ff bff6 	b.w	8005faa <__retarget_lock_release_recursive>
 8005fbe:	bf00      	nop
 8005fc0:	200002e4 	.word	0x200002e4

08005fc4 <__ssputs_r>:
 8005fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fc8:	688e      	ldr	r6, [r1, #8]
 8005fca:	429e      	cmp	r6, r3
 8005fcc:	4682      	mov	sl, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	4690      	mov	r8, r2
 8005fd2:	461f      	mov	r7, r3
 8005fd4:	d838      	bhi.n	8006048 <__ssputs_r+0x84>
 8005fd6:	898a      	ldrh	r2, [r1, #12]
 8005fd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fdc:	d032      	beq.n	8006044 <__ssputs_r+0x80>
 8005fde:	6825      	ldr	r5, [r4, #0]
 8005fe0:	6909      	ldr	r1, [r1, #16]
 8005fe2:	eba5 0901 	sub.w	r9, r5, r1
 8005fe6:	6965      	ldr	r5, [r4, #20]
 8005fe8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	444b      	add	r3, r9
 8005ff4:	106d      	asrs	r5, r5, #1
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	bf38      	it	cc
 8005ffa:	461d      	movcc	r5, r3
 8005ffc:	0553      	lsls	r3, r2, #21
 8005ffe:	d531      	bpl.n	8006064 <__ssputs_r+0xa0>
 8006000:	4629      	mov	r1, r5
 8006002:	f7ff fa9b 	bl	800553c <_malloc_r>
 8006006:	4606      	mov	r6, r0
 8006008:	b950      	cbnz	r0, 8006020 <__ssputs_r+0x5c>
 800600a:	230c      	movs	r3, #12
 800600c:	f8ca 3000 	str.w	r3, [sl]
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	f04f 30ff 	mov.w	r0, #4294967295
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	6921      	ldr	r1, [r4, #16]
 8006022:	464a      	mov	r2, r9
 8006024:	f000 fb24 	bl	8006670 <memcpy>
 8006028:	89a3      	ldrh	r3, [r4, #12]
 800602a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800602e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006032:	81a3      	strh	r3, [r4, #12]
 8006034:	6126      	str	r6, [r4, #16]
 8006036:	6165      	str	r5, [r4, #20]
 8006038:	444e      	add	r6, r9
 800603a:	eba5 0509 	sub.w	r5, r5, r9
 800603e:	6026      	str	r6, [r4, #0]
 8006040:	60a5      	str	r5, [r4, #8]
 8006042:	463e      	mov	r6, r7
 8006044:	42be      	cmp	r6, r7
 8006046:	d900      	bls.n	800604a <__ssputs_r+0x86>
 8006048:	463e      	mov	r6, r7
 800604a:	6820      	ldr	r0, [r4, #0]
 800604c:	4632      	mov	r2, r6
 800604e:	4641      	mov	r1, r8
 8006050:	f000 fb1c 	bl	800668c <memmove>
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	1b9b      	subs	r3, r3, r6
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	4433      	add	r3, r6
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	2000      	movs	r0, #0
 8006062:	e7db      	b.n	800601c <__ssputs_r+0x58>
 8006064:	462a      	mov	r2, r5
 8006066:	f000 fb2b 	bl	80066c0 <_realloc_r>
 800606a:	4606      	mov	r6, r0
 800606c:	2800      	cmp	r0, #0
 800606e:	d1e1      	bne.n	8006034 <__ssputs_r+0x70>
 8006070:	6921      	ldr	r1, [r4, #16]
 8006072:	4650      	mov	r0, sl
 8006074:	f7ff f9f6 	bl	8005464 <_free_r>
 8006078:	e7c7      	b.n	800600a <__ssputs_r+0x46>
	...

0800607c <_svfiprintf_r>:
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	4698      	mov	r8, r3
 8006082:	898b      	ldrh	r3, [r1, #12]
 8006084:	061b      	lsls	r3, r3, #24
 8006086:	b09d      	sub	sp, #116	; 0x74
 8006088:	4607      	mov	r7, r0
 800608a:	460d      	mov	r5, r1
 800608c:	4614      	mov	r4, r2
 800608e:	d50e      	bpl.n	80060ae <_svfiprintf_r+0x32>
 8006090:	690b      	ldr	r3, [r1, #16]
 8006092:	b963      	cbnz	r3, 80060ae <_svfiprintf_r+0x32>
 8006094:	2140      	movs	r1, #64	; 0x40
 8006096:	f7ff fa51 	bl	800553c <_malloc_r>
 800609a:	6028      	str	r0, [r5, #0]
 800609c:	6128      	str	r0, [r5, #16]
 800609e:	b920      	cbnz	r0, 80060aa <_svfiprintf_r+0x2e>
 80060a0:	230c      	movs	r3, #12
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	e0d1      	b.n	800624e <_svfiprintf_r+0x1d2>
 80060aa:	2340      	movs	r3, #64	; 0x40
 80060ac:	616b      	str	r3, [r5, #20]
 80060ae:	2300      	movs	r3, #0
 80060b0:	9309      	str	r3, [sp, #36]	; 0x24
 80060b2:	2320      	movs	r3, #32
 80060b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060bc:	2330      	movs	r3, #48	; 0x30
 80060be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006268 <_svfiprintf_r+0x1ec>
 80060c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060c6:	f04f 0901 	mov.w	r9, #1
 80060ca:	4623      	mov	r3, r4
 80060cc:	469a      	mov	sl, r3
 80060ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060d2:	b10a      	cbz	r2, 80060d8 <_svfiprintf_r+0x5c>
 80060d4:	2a25      	cmp	r2, #37	; 0x25
 80060d6:	d1f9      	bne.n	80060cc <_svfiprintf_r+0x50>
 80060d8:	ebba 0b04 	subs.w	fp, sl, r4
 80060dc:	d00b      	beq.n	80060f6 <_svfiprintf_r+0x7a>
 80060de:	465b      	mov	r3, fp
 80060e0:	4622      	mov	r2, r4
 80060e2:	4629      	mov	r1, r5
 80060e4:	4638      	mov	r0, r7
 80060e6:	f7ff ff6d 	bl	8005fc4 <__ssputs_r>
 80060ea:	3001      	adds	r0, #1
 80060ec:	f000 80aa 	beq.w	8006244 <_svfiprintf_r+0x1c8>
 80060f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060f2:	445a      	add	r2, fp
 80060f4:	9209      	str	r2, [sp, #36]	; 0x24
 80060f6:	f89a 3000 	ldrb.w	r3, [sl]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 80a2 	beq.w	8006244 <_svfiprintf_r+0x1c8>
 8006100:	2300      	movs	r3, #0
 8006102:	f04f 32ff 	mov.w	r2, #4294967295
 8006106:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800610a:	f10a 0a01 	add.w	sl, sl, #1
 800610e:	9304      	str	r3, [sp, #16]
 8006110:	9307      	str	r3, [sp, #28]
 8006112:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006116:	931a      	str	r3, [sp, #104]	; 0x68
 8006118:	4654      	mov	r4, sl
 800611a:	2205      	movs	r2, #5
 800611c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006120:	4851      	ldr	r0, [pc, #324]	; (8006268 <_svfiprintf_r+0x1ec>)
 8006122:	f7fa f85d 	bl	80001e0 <memchr>
 8006126:	9a04      	ldr	r2, [sp, #16]
 8006128:	b9d8      	cbnz	r0, 8006162 <_svfiprintf_r+0xe6>
 800612a:	06d0      	lsls	r0, r2, #27
 800612c:	bf44      	itt	mi
 800612e:	2320      	movmi	r3, #32
 8006130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006134:	0711      	lsls	r1, r2, #28
 8006136:	bf44      	itt	mi
 8006138:	232b      	movmi	r3, #43	; 0x2b
 800613a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613e:	f89a 3000 	ldrb.w	r3, [sl]
 8006142:	2b2a      	cmp	r3, #42	; 0x2a
 8006144:	d015      	beq.n	8006172 <_svfiprintf_r+0xf6>
 8006146:	9a07      	ldr	r2, [sp, #28]
 8006148:	4654      	mov	r4, sl
 800614a:	2000      	movs	r0, #0
 800614c:	f04f 0c0a 	mov.w	ip, #10
 8006150:	4621      	mov	r1, r4
 8006152:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006156:	3b30      	subs	r3, #48	; 0x30
 8006158:	2b09      	cmp	r3, #9
 800615a:	d94e      	bls.n	80061fa <_svfiprintf_r+0x17e>
 800615c:	b1b0      	cbz	r0, 800618c <_svfiprintf_r+0x110>
 800615e:	9207      	str	r2, [sp, #28]
 8006160:	e014      	b.n	800618c <_svfiprintf_r+0x110>
 8006162:	eba0 0308 	sub.w	r3, r0, r8
 8006166:	fa09 f303 	lsl.w	r3, r9, r3
 800616a:	4313      	orrs	r3, r2
 800616c:	9304      	str	r3, [sp, #16]
 800616e:	46a2      	mov	sl, r4
 8006170:	e7d2      	b.n	8006118 <_svfiprintf_r+0x9c>
 8006172:	9b03      	ldr	r3, [sp, #12]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	9103      	str	r1, [sp, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	bfbb      	ittet	lt
 800617e:	425b      	neglt	r3, r3
 8006180:	f042 0202 	orrlt.w	r2, r2, #2
 8006184:	9307      	strge	r3, [sp, #28]
 8006186:	9307      	strlt	r3, [sp, #28]
 8006188:	bfb8      	it	lt
 800618a:	9204      	strlt	r2, [sp, #16]
 800618c:	7823      	ldrb	r3, [r4, #0]
 800618e:	2b2e      	cmp	r3, #46	; 0x2e
 8006190:	d10c      	bne.n	80061ac <_svfiprintf_r+0x130>
 8006192:	7863      	ldrb	r3, [r4, #1]
 8006194:	2b2a      	cmp	r3, #42	; 0x2a
 8006196:	d135      	bne.n	8006204 <_svfiprintf_r+0x188>
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	1d1a      	adds	r2, r3, #4
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	9203      	str	r2, [sp, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	bfb8      	it	lt
 80061a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80061a8:	3402      	adds	r4, #2
 80061aa:	9305      	str	r3, [sp, #20]
 80061ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006278 <_svfiprintf_r+0x1fc>
 80061b0:	7821      	ldrb	r1, [r4, #0]
 80061b2:	2203      	movs	r2, #3
 80061b4:	4650      	mov	r0, sl
 80061b6:	f7fa f813 	bl	80001e0 <memchr>
 80061ba:	b140      	cbz	r0, 80061ce <_svfiprintf_r+0x152>
 80061bc:	2340      	movs	r3, #64	; 0x40
 80061be:	eba0 000a 	sub.w	r0, r0, sl
 80061c2:	fa03 f000 	lsl.w	r0, r3, r0
 80061c6:	9b04      	ldr	r3, [sp, #16]
 80061c8:	4303      	orrs	r3, r0
 80061ca:	3401      	adds	r4, #1
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061d2:	4826      	ldr	r0, [pc, #152]	; (800626c <_svfiprintf_r+0x1f0>)
 80061d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061d8:	2206      	movs	r2, #6
 80061da:	f7fa f801 	bl	80001e0 <memchr>
 80061de:	2800      	cmp	r0, #0
 80061e0:	d038      	beq.n	8006254 <_svfiprintf_r+0x1d8>
 80061e2:	4b23      	ldr	r3, [pc, #140]	; (8006270 <_svfiprintf_r+0x1f4>)
 80061e4:	bb1b      	cbnz	r3, 800622e <_svfiprintf_r+0x1b2>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	3307      	adds	r3, #7
 80061ea:	f023 0307 	bic.w	r3, r3, #7
 80061ee:	3308      	adds	r3, #8
 80061f0:	9303      	str	r3, [sp, #12]
 80061f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061f4:	4433      	add	r3, r6
 80061f6:	9309      	str	r3, [sp, #36]	; 0x24
 80061f8:	e767      	b.n	80060ca <_svfiprintf_r+0x4e>
 80061fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80061fe:	460c      	mov	r4, r1
 8006200:	2001      	movs	r0, #1
 8006202:	e7a5      	b.n	8006150 <_svfiprintf_r+0xd4>
 8006204:	2300      	movs	r3, #0
 8006206:	3401      	adds	r4, #1
 8006208:	9305      	str	r3, [sp, #20]
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0c0a 	mov.w	ip, #10
 8006210:	4620      	mov	r0, r4
 8006212:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006216:	3a30      	subs	r2, #48	; 0x30
 8006218:	2a09      	cmp	r2, #9
 800621a:	d903      	bls.n	8006224 <_svfiprintf_r+0x1a8>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0c5      	beq.n	80061ac <_svfiprintf_r+0x130>
 8006220:	9105      	str	r1, [sp, #20]
 8006222:	e7c3      	b.n	80061ac <_svfiprintf_r+0x130>
 8006224:	fb0c 2101 	mla	r1, ip, r1, r2
 8006228:	4604      	mov	r4, r0
 800622a:	2301      	movs	r3, #1
 800622c:	e7f0      	b.n	8006210 <_svfiprintf_r+0x194>
 800622e:	ab03      	add	r3, sp, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <_svfiprintf_r+0x1f8>)
 8006236:	a904      	add	r1, sp, #16
 8006238:	4638      	mov	r0, r7
 800623a:	f3af 8000 	nop.w
 800623e:	1c42      	adds	r2, r0, #1
 8006240:	4606      	mov	r6, r0
 8006242:	d1d6      	bne.n	80061f2 <_svfiprintf_r+0x176>
 8006244:	89ab      	ldrh	r3, [r5, #12]
 8006246:	065b      	lsls	r3, r3, #25
 8006248:	f53f af2c 	bmi.w	80060a4 <_svfiprintf_r+0x28>
 800624c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800624e:	b01d      	add	sp, #116	; 0x74
 8006250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006254:	ab03      	add	r3, sp, #12
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	462a      	mov	r2, r5
 800625a:	4b06      	ldr	r3, [pc, #24]	; (8006274 <_svfiprintf_r+0x1f8>)
 800625c:	a904      	add	r1, sp, #16
 800625e:	4638      	mov	r0, r7
 8006260:	f000 f87a 	bl	8006358 <_printf_i>
 8006264:	e7eb      	b.n	800623e <_svfiprintf_r+0x1c2>
 8006266:	bf00      	nop
 8006268:	08006f18 	.word	0x08006f18
 800626c:	08006f22 	.word	0x08006f22
 8006270:	00000000 	.word	0x00000000
 8006274:	08005fc5 	.word	0x08005fc5
 8006278:	08006f1e 	.word	0x08006f1e

0800627c <_printf_common>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	4616      	mov	r6, r2
 8006282:	4699      	mov	r9, r3
 8006284:	688a      	ldr	r2, [r1, #8]
 8006286:	690b      	ldr	r3, [r1, #16]
 8006288:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800628c:	4293      	cmp	r3, r2
 800628e:	bfb8      	it	lt
 8006290:	4613      	movlt	r3, r2
 8006292:	6033      	str	r3, [r6, #0]
 8006294:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006298:	4607      	mov	r7, r0
 800629a:	460c      	mov	r4, r1
 800629c:	b10a      	cbz	r2, 80062a2 <_printf_common+0x26>
 800629e:	3301      	adds	r3, #1
 80062a0:	6033      	str	r3, [r6, #0]
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	0699      	lsls	r1, r3, #26
 80062a6:	bf42      	ittt	mi
 80062a8:	6833      	ldrmi	r3, [r6, #0]
 80062aa:	3302      	addmi	r3, #2
 80062ac:	6033      	strmi	r3, [r6, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	f015 0506 	ands.w	r5, r5, #6
 80062b4:	d106      	bne.n	80062c4 <_printf_common+0x48>
 80062b6:	f104 0a19 	add.w	sl, r4, #25
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	6832      	ldr	r2, [r6, #0]
 80062be:	1a9b      	subs	r3, r3, r2
 80062c0:	42ab      	cmp	r3, r5
 80062c2:	dc26      	bgt.n	8006312 <_printf_common+0x96>
 80062c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062c8:	1e13      	subs	r3, r2, #0
 80062ca:	6822      	ldr	r2, [r4, #0]
 80062cc:	bf18      	it	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	0692      	lsls	r2, r2, #26
 80062d2:	d42b      	bmi.n	800632c <_printf_common+0xb0>
 80062d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062d8:	4649      	mov	r1, r9
 80062da:	4638      	mov	r0, r7
 80062dc:	47c0      	blx	r8
 80062de:	3001      	adds	r0, #1
 80062e0:	d01e      	beq.n	8006320 <_printf_common+0xa4>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	68e5      	ldr	r5, [r4, #12]
 80062e6:	6832      	ldr	r2, [r6, #0]
 80062e8:	f003 0306 	and.w	r3, r3, #6
 80062ec:	2b04      	cmp	r3, #4
 80062ee:	bf08      	it	eq
 80062f0:	1aad      	subeq	r5, r5, r2
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	bf0c      	ite	eq
 80062f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80062fc:	2500      	movne	r5, #0
 80062fe:	4293      	cmp	r3, r2
 8006300:	bfc4      	itt	gt
 8006302:	1a9b      	subgt	r3, r3, r2
 8006304:	18ed      	addgt	r5, r5, r3
 8006306:	2600      	movs	r6, #0
 8006308:	341a      	adds	r4, #26
 800630a:	42b5      	cmp	r5, r6
 800630c:	d11a      	bne.n	8006344 <_printf_common+0xc8>
 800630e:	2000      	movs	r0, #0
 8006310:	e008      	b.n	8006324 <_printf_common+0xa8>
 8006312:	2301      	movs	r3, #1
 8006314:	4652      	mov	r2, sl
 8006316:	4649      	mov	r1, r9
 8006318:	4638      	mov	r0, r7
 800631a:	47c0      	blx	r8
 800631c:	3001      	adds	r0, #1
 800631e:	d103      	bne.n	8006328 <_printf_common+0xac>
 8006320:	f04f 30ff 	mov.w	r0, #4294967295
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	3501      	adds	r5, #1
 800632a:	e7c6      	b.n	80062ba <_printf_common+0x3e>
 800632c:	18e1      	adds	r1, r4, r3
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	2030      	movs	r0, #48	; 0x30
 8006332:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006336:	4422      	add	r2, r4
 8006338:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800633c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006340:	3302      	adds	r3, #2
 8006342:	e7c7      	b.n	80062d4 <_printf_common+0x58>
 8006344:	2301      	movs	r3, #1
 8006346:	4622      	mov	r2, r4
 8006348:	4649      	mov	r1, r9
 800634a:	4638      	mov	r0, r7
 800634c:	47c0      	blx	r8
 800634e:	3001      	adds	r0, #1
 8006350:	d0e6      	beq.n	8006320 <_printf_common+0xa4>
 8006352:	3601      	adds	r6, #1
 8006354:	e7d9      	b.n	800630a <_printf_common+0x8e>
	...

08006358 <_printf_i>:
 8006358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	7e0f      	ldrb	r7, [r1, #24]
 800635e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006360:	2f78      	cmp	r7, #120	; 0x78
 8006362:	4691      	mov	r9, r2
 8006364:	4680      	mov	r8, r0
 8006366:	460c      	mov	r4, r1
 8006368:	469a      	mov	sl, r3
 800636a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800636e:	d807      	bhi.n	8006380 <_printf_i+0x28>
 8006370:	2f62      	cmp	r7, #98	; 0x62
 8006372:	d80a      	bhi.n	800638a <_printf_i+0x32>
 8006374:	2f00      	cmp	r7, #0
 8006376:	f000 80d8 	beq.w	800652a <_printf_i+0x1d2>
 800637a:	2f58      	cmp	r7, #88	; 0x58
 800637c:	f000 80a3 	beq.w	80064c6 <_printf_i+0x16e>
 8006380:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006384:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006388:	e03a      	b.n	8006400 <_printf_i+0xa8>
 800638a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800638e:	2b15      	cmp	r3, #21
 8006390:	d8f6      	bhi.n	8006380 <_printf_i+0x28>
 8006392:	a101      	add	r1, pc, #4	; (adr r1, 8006398 <_printf_i+0x40>)
 8006394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006398:	080063f1 	.word	0x080063f1
 800639c:	08006405 	.word	0x08006405
 80063a0:	08006381 	.word	0x08006381
 80063a4:	08006381 	.word	0x08006381
 80063a8:	08006381 	.word	0x08006381
 80063ac:	08006381 	.word	0x08006381
 80063b0:	08006405 	.word	0x08006405
 80063b4:	08006381 	.word	0x08006381
 80063b8:	08006381 	.word	0x08006381
 80063bc:	08006381 	.word	0x08006381
 80063c0:	08006381 	.word	0x08006381
 80063c4:	08006511 	.word	0x08006511
 80063c8:	08006435 	.word	0x08006435
 80063cc:	080064f3 	.word	0x080064f3
 80063d0:	08006381 	.word	0x08006381
 80063d4:	08006381 	.word	0x08006381
 80063d8:	08006533 	.word	0x08006533
 80063dc:	08006381 	.word	0x08006381
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006381 	.word	0x08006381
 80063e8:	08006381 	.word	0x08006381
 80063ec:	080064fb 	.word	0x080064fb
 80063f0:	682b      	ldr	r3, [r5, #0]
 80063f2:	1d1a      	adds	r2, r3, #4
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	602a      	str	r2, [r5, #0]
 80063f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006400:	2301      	movs	r3, #1
 8006402:	e0a3      	b.n	800654c <_printf_i+0x1f4>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	6829      	ldr	r1, [r5, #0]
 8006408:	0606      	lsls	r6, r0, #24
 800640a:	f101 0304 	add.w	r3, r1, #4
 800640e:	d50a      	bpl.n	8006426 <_printf_i+0xce>
 8006410:	680e      	ldr	r6, [r1, #0]
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	2e00      	cmp	r6, #0
 8006416:	da03      	bge.n	8006420 <_printf_i+0xc8>
 8006418:	232d      	movs	r3, #45	; 0x2d
 800641a:	4276      	negs	r6, r6
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006420:	485e      	ldr	r0, [pc, #376]	; (800659c <_printf_i+0x244>)
 8006422:	230a      	movs	r3, #10
 8006424:	e019      	b.n	800645a <_printf_i+0x102>
 8006426:	680e      	ldr	r6, [r1, #0]
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800642e:	bf18      	it	ne
 8006430:	b236      	sxthne	r6, r6
 8006432:	e7ef      	b.n	8006414 <_printf_i+0xbc>
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6820      	ldr	r0, [r4, #0]
 8006438:	1d19      	adds	r1, r3, #4
 800643a:	6029      	str	r1, [r5, #0]
 800643c:	0601      	lsls	r1, r0, #24
 800643e:	d501      	bpl.n	8006444 <_printf_i+0xec>
 8006440:	681e      	ldr	r6, [r3, #0]
 8006442:	e002      	b.n	800644a <_printf_i+0xf2>
 8006444:	0646      	lsls	r6, r0, #25
 8006446:	d5fb      	bpl.n	8006440 <_printf_i+0xe8>
 8006448:	881e      	ldrh	r6, [r3, #0]
 800644a:	4854      	ldr	r0, [pc, #336]	; (800659c <_printf_i+0x244>)
 800644c:	2f6f      	cmp	r7, #111	; 0x6f
 800644e:	bf0c      	ite	eq
 8006450:	2308      	moveq	r3, #8
 8006452:	230a      	movne	r3, #10
 8006454:	2100      	movs	r1, #0
 8006456:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800645a:	6865      	ldr	r5, [r4, #4]
 800645c:	60a5      	str	r5, [r4, #8]
 800645e:	2d00      	cmp	r5, #0
 8006460:	bfa2      	ittt	ge
 8006462:	6821      	ldrge	r1, [r4, #0]
 8006464:	f021 0104 	bicge.w	r1, r1, #4
 8006468:	6021      	strge	r1, [r4, #0]
 800646a:	b90e      	cbnz	r6, 8006470 <_printf_i+0x118>
 800646c:	2d00      	cmp	r5, #0
 800646e:	d04d      	beq.n	800650c <_printf_i+0x1b4>
 8006470:	4615      	mov	r5, r2
 8006472:	fbb6 f1f3 	udiv	r1, r6, r3
 8006476:	fb03 6711 	mls	r7, r3, r1, r6
 800647a:	5dc7      	ldrb	r7, [r0, r7]
 800647c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006480:	4637      	mov	r7, r6
 8006482:	42bb      	cmp	r3, r7
 8006484:	460e      	mov	r6, r1
 8006486:	d9f4      	bls.n	8006472 <_printf_i+0x11a>
 8006488:	2b08      	cmp	r3, #8
 800648a:	d10b      	bne.n	80064a4 <_printf_i+0x14c>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	07de      	lsls	r6, r3, #31
 8006490:	d508      	bpl.n	80064a4 <_printf_i+0x14c>
 8006492:	6923      	ldr	r3, [r4, #16]
 8006494:	6861      	ldr	r1, [r4, #4]
 8006496:	4299      	cmp	r1, r3
 8006498:	bfde      	ittt	le
 800649a:	2330      	movle	r3, #48	; 0x30
 800649c:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064a4:	1b52      	subs	r2, r2, r5
 80064a6:	6122      	str	r2, [r4, #16]
 80064a8:	f8cd a000 	str.w	sl, [sp]
 80064ac:	464b      	mov	r3, r9
 80064ae:	aa03      	add	r2, sp, #12
 80064b0:	4621      	mov	r1, r4
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fee2 	bl	800627c <_printf_common>
 80064b8:	3001      	adds	r0, #1
 80064ba:	d14c      	bne.n	8006556 <_printf_i+0x1fe>
 80064bc:	f04f 30ff 	mov.w	r0, #4294967295
 80064c0:	b004      	add	sp, #16
 80064c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064c6:	4835      	ldr	r0, [pc, #212]	; (800659c <_printf_i+0x244>)
 80064c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80064cc:	6829      	ldr	r1, [r5, #0]
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80064d4:	6029      	str	r1, [r5, #0]
 80064d6:	061d      	lsls	r5, r3, #24
 80064d8:	d514      	bpl.n	8006504 <_printf_i+0x1ac>
 80064da:	07df      	lsls	r7, r3, #31
 80064dc:	bf44      	itt	mi
 80064de:	f043 0320 	orrmi.w	r3, r3, #32
 80064e2:	6023      	strmi	r3, [r4, #0]
 80064e4:	b91e      	cbnz	r6, 80064ee <_printf_i+0x196>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	f023 0320 	bic.w	r3, r3, #32
 80064ec:	6023      	str	r3, [r4, #0]
 80064ee:	2310      	movs	r3, #16
 80064f0:	e7b0      	b.n	8006454 <_printf_i+0xfc>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	f043 0320 	orr.w	r3, r3, #32
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	2378      	movs	r3, #120	; 0x78
 80064fc:	4828      	ldr	r0, [pc, #160]	; (80065a0 <_printf_i+0x248>)
 80064fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006502:	e7e3      	b.n	80064cc <_printf_i+0x174>
 8006504:	0659      	lsls	r1, r3, #25
 8006506:	bf48      	it	mi
 8006508:	b2b6      	uxthmi	r6, r6
 800650a:	e7e6      	b.n	80064da <_printf_i+0x182>
 800650c:	4615      	mov	r5, r2
 800650e:	e7bb      	b.n	8006488 <_printf_i+0x130>
 8006510:	682b      	ldr	r3, [r5, #0]
 8006512:	6826      	ldr	r6, [r4, #0]
 8006514:	6961      	ldr	r1, [r4, #20]
 8006516:	1d18      	adds	r0, r3, #4
 8006518:	6028      	str	r0, [r5, #0]
 800651a:	0635      	lsls	r5, r6, #24
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	d501      	bpl.n	8006524 <_printf_i+0x1cc>
 8006520:	6019      	str	r1, [r3, #0]
 8006522:	e002      	b.n	800652a <_printf_i+0x1d2>
 8006524:	0670      	lsls	r0, r6, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0x1c8>
 8006528:	8019      	strh	r1, [r3, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	6123      	str	r3, [r4, #16]
 800652e:	4615      	mov	r5, r2
 8006530:	e7ba      	b.n	80064a8 <_printf_i+0x150>
 8006532:	682b      	ldr	r3, [r5, #0]
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	602a      	str	r2, [r5, #0]
 8006538:	681d      	ldr	r5, [r3, #0]
 800653a:	6862      	ldr	r2, [r4, #4]
 800653c:	2100      	movs	r1, #0
 800653e:	4628      	mov	r0, r5
 8006540:	f7f9 fe4e 	bl	80001e0 <memchr>
 8006544:	b108      	cbz	r0, 800654a <_printf_i+0x1f2>
 8006546:	1b40      	subs	r0, r0, r5
 8006548:	6060      	str	r0, [r4, #4]
 800654a:	6863      	ldr	r3, [r4, #4]
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	2300      	movs	r3, #0
 8006550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006554:	e7a8      	b.n	80064a8 <_printf_i+0x150>
 8006556:	6923      	ldr	r3, [r4, #16]
 8006558:	462a      	mov	r2, r5
 800655a:	4649      	mov	r1, r9
 800655c:	4640      	mov	r0, r8
 800655e:	47d0      	blx	sl
 8006560:	3001      	adds	r0, #1
 8006562:	d0ab      	beq.n	80064bc <_printf_i+0x164>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	079b      	lsls	r3, r3, #30
 8006568:	d413      	bmi.n	8006592 <_printf_i+0x23a>
 800656a:	68e0      	ldr	r0, [r4, #12]
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	4298      	cmp	r0, r3
 8006570:	bfb8      	it	lt
 8006572:	4618      	movlt	r0, r3
 8006574:	e7a4      	b.n	80064c0 <_printf_i+0x168>
 8006576:	2301      	movs	r3, #1
 8006578:	4632      	mov	r2, r6
 800657a:	4649      	mov	r1, r9
 800657c:	4640      	mov	r0, r8
 800657e:	47d0      	blx	sl
 8006580:	3001      	adds	r0, #1
 8006582:	d09b      	beq.n	80064bc <_printf_i+0x164>
 8006584:	3501      	adds	r5, #1
 8006586:	68e3      	ldr	r3, [r4, #12]
 8006588:	9903      	ldr	r1, [sp, #12]
 800658a:	1a5b      	subs	r3, r3, r1
 800658c:	42ab      	cmp	r3, r5
 800658e:	dcf2      	bgt.n	8006576 <_printf_i+0x21e>
 8006590:	e7eb      	b.n	800656a <_printf_i+0x212>
 8006592:	2500      	movs	r5, #0
 8006594:	f104 0619 	add.w	r6, r4, #25
 8006598:	e7f5      	b.n	8006586 <_printf_i+0x22e>
 800659a:	bf00      	nop
 800659c:	08006f29 	.word	0x08006f29
 80065a0:	08006f3a 	.word	0x08006f3a

080065a4 <__sread>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	460c      	mov	r4, r1
 80065a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065ac:	f000 f8b8 	bl	8006720 <_read_r>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	bfab      	itete	ge
 80065b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065b6:	89a3      	ldrhlt	r3, [r4, #12]
 80065b8:	181b      	addge	r3, r3, r0
 80065ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065be:	bfac      	ite	ge
 80065c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80065c2:	81a3      	strhlt	r3, [r4, #12]
 80065c4:	bd10      	pop	{r4, pc}

080065c6 <__swrite>:
 80065c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ca:	461f      	mov	r7, r3
 80065cc:	898b      	ldrh	r3, [r1, #12]
 80065ce:	05db      	lsls	r3, r3, #23
 80065d0:	4605      	mov	r5, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	4616      	mov	r6, r2
 80065d6:	d505      	bpl.n	80065e4 <__swrite+0x1e>
 80065d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065dc:	2302      	movs	r3, #2
 80065de:	2200      	movs	r2, #0
 80065e0:	f000 f834 	bl	800664c <_lseek_r>
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ee:	81a3      	strh	r3, [r4, #12]
 80065f0:	4632      	mov	r2, r6
 80065f2:	463b      	mov	r3, r7
 80065f4:	4628      	mov	r0, r5
 80065f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065fa:	f7ff bacd 	b.w	8005b98 <_write_r>

080065fe <__sseek>:
 80065fe:	b510      	push	{r4, lr}
 8006600:	460c      	mov	r4, r1
 8006602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006606:	f000 f821 	bl	800664c <_lseek_r>
 800660a:	1c43      	adds	r3, r0, #1
 800660c:	89a3      	ldrh	r3, [r4, #12]
 800660e:	bf15      	itete	ne
 8006610:	6560      	strne	r0, [r4, #84]	; 0x54
 8006612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800661a:	81a3      	strheq	r3, [r4, #12]
 800661c:	bf18      	it	ne
 800661e:	81a3      	strhne	r3, [r4, #12]
 8006620:	bd10      	pop	{r4, pc}

08006622 <__sclose>:
 8006622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006626:	f000 b801 	b.w	800662c <_close_r>
	...

0800662c <_close_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4d06      	ldr	r5, [pc, #24]	; (8006648 <_close_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4604      	mov	r4, r0
 8006634:	4608      	mov	r0, r1
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	f7fa fd15 	bl	8001066 <_close>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_close_r+0x1a>
 8006640:	682b      	ldr	r3, [r5, #0]
 8006642:	b103      	cbz	r3, 8006646 <_close_r+0x1a>
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	200002e8 	.word	0x200002e8

0800664c <_lseek_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4d07      	ldr	r5, [pc, #28]	; (800666c <_lseek_r+0x20>)
 8006650:	4604      	mov	r4, r0
 8006652:	4608      	mov	r0, r1
 8006654:	4611      	mov	r1, r2
 8006656:	2200      	movs	r2, #0
 8006658:	602a      	str	r2, [r5, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f7fa fd0f 	bl	800107e <_lseek>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_lseek_r+0x1e>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_lseek_r+0x1e>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	200002e8 	.word	0x200002e8

08006670 <memcpy>:
 8006670:	440a      	add	r2, r1
 8006672:	4291      	cmp	r1, r2
 8006674:	f100 33ff 	add.w	r3, r0, #4294967295
 8006678:	d100      	bne.n	800667c <memcpy+0xc>
 800667a:	4770      	bx	lr
 800667c:	b510      	push	{r4, lr}
 800667e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006686:	4291      	cmp	r1, r2
 8006688:	d1f9      	bne.n	800667e <memcpy+0xe>
 800668a:	bd10      	pop	{r4, pc}

0800668c <memmove>:
 800668c:	4288      	cmp	r0, r1
 800668e:	b510      	push	{r4, lr}
 8006690:	eb01 0402 	add.w	r4, r1, r2
 8006694:	d902      	bls.n	800669c <memmove+0x10>
 8006696:	4284      	cmp	r4, r0
 8006698:	4623      	mov	r3, r4
 800669a:	d807      	bhi.n	80066ac <memmove+0x20>
 800669c:	1e43      	subs	r3, r0, #1
 800669e:	42a1      	cmp	r1, r4
 80066a0:	d008      	beq.n	80066b4 <memmove+0x28>
 80066a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066aa:	e7f8      	b.n	800669e <memmove+0x12>
 80066ac:	4402      	add	r2, r0
 80066ae:	4601      	mov	r1, r0
 80066b0:	428a      	cmp	r2, r1
 80066b2:	d100      	bne.n	80066b6 <memmove+0x2a>
 80066b4:	bd10      	pop	{r4, pc}
 80066b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066be:	e7f7      	b.n	80066b0 <memmove+0x24>

080066c0 <_realloc_r>:
 80066c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c4:	4680      	mov	r8, r0
 80066c6:	4614      	mov	r4, r2
 80066c8:	460e      	mov	r6, r1
 80066ca:	b921      	cbnz	r1, 80066d6 <_realloc_r+0x16>
 80066cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d0:	4611      	mov	r1, r2
 80066d2:	f7fe bf33 	b.w	800553c <_malloc_r>
 80066d6:	b92a      	cbnz	r2, 80066e4 <_realloc_r+0x24>
 80066d8:	f7fe fec4 	bl	8005464 <_free_r>
 80066dc:	4625      	mov	r5, r4
 80066de:	4628      	mov	r0, r5
 80066e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066e4:	f000 f82e 	bl	8006744 <_malloc_usable_size_r>
 80066e8:	4284      	cmp	r4, r0
 80066ea:	4607      	mov	r7, r0
 80066ec:	d802      	bhi.n	80066f4 <_realloc_r+0x34>
 80066ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066f2:	d812      	bhi.n	800671a <_realloc_r+0x5a>
 80066f4:	4621      	mov	r1, r4
 80066f6:	4640      	mov	r0, r8
 80066f8:	f7fe ff20 	bl	800553c <_malloc_r>
 80066fc:	4605      	mov	r5, r0
 80066fe:	2800      	cmp	r0, #0
 8006700:	d0ed      	beq.n	80066de <_realloc_r+0x1e>
 8006702:	42bc      	cmp	r4, r7
 8006704:	4622      	mov	r2, r4
 8006706:	4631      	mov	r1, r6
 8006708:	bf28      	it	cs
 800670a:	463a      	movcs	r2, r7
 800670c:	f7ff ffb0 	bl	8006670 <memcpy>
 8006710:	4631      	mov	r1, r6
 8006712:	4640      	mov	r0, r8
 8006714:	f7fe fea6 	bl	8005464 <_free_r>
 8006718:	e7e1      	b.n	80066de <_realloc_r+0x1e>
 800671a:	4635      	mov	r5, r6
 800671c:	e7df      	b.n	80066de <_realloc_r+0x1e>
	...

08006720 <_read_r>:
 8006720:	b538      	push	{r3, r4, r5, lr}
 8006722:	4d07      	ldr	r5, [pc, #28]	; (8006740 <_read_r+0x20>)
 8006724:	4604      	mov	r4, r0
 8006726:	4608      	mov	r0, r1
 8006728:	4611      	mov	r1, r2
 800672a:	2200      	movs	r2, #0
 800672c:	602a      	str	r2, [r5, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	f7fa fc60 	bl	8000ff4 <_read>
 8006734:	1c43      	adds	r3, r0, #1
 8006736:	d102      	bne.n	800673e <_read_r+0x1e>
 8006738:	682b      	ldr	r3, [r5, #0]
 800673a:	b103      	cbz	r3, 800673e <_read_r+0x1e>
 800673c:	6023      	str	r3, [r4, #0]
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	200002e8 	.word	0x200002e8

08006744 <_malloc_usable_size_r>:
 8006744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006748:	1f18      	subs	r0, r3, #4
 800674a:	2b00      	cmp	r3, #0
 800674c:	bfbc      	itt	lt
 800674e:	580b      	ldrlt	r3, [r1, r0]
 8006750:	18c0      	addlt	r0, r0, r3
 8006752:	4770      	bx	lr

08006754 <_init>:
 8006754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006756:	bf00      	nop
 8006758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800675a:	bc08      	pop	{r3}
 800675c:	469e      	mov	lr, r3
 800675e:	4770      	bx	lr

08006760 <_fini>:
 8006760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006762:	bf00      	nop
 8006764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006766:	bc08      	pop	{r3}
 8006768:	469e      	mov	lr, r3
 800676a:	4770      	bx	lr
